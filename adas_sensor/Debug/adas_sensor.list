
adas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e84  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007f94  08007f94  00008f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800816c  0800816c  0000a0c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800816c  0800816c  0000a0c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800816c  0800816c  0000a0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008170  08008170  00009170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08008174  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  200000c0  08008234  0000a0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001db4  08008234  0000adb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc3c  00000000  00000000  0000a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d6  00000000  00000000  00025d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002a100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001186  00000000  00000000  0002b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf01  00000000  00000000  0002c956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aaeb  00000000  00000000  00048857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099553  00000000  00000000  00063342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000656c  00000000  00000000  000fc8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00102e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f7c 	.word	0x08007f7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	08007f7c 	.word	0x08007f7c

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	@ (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800015a:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2210      	movs	r2, #16
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f001 f99f 	bl	80014e4 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 faaa 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000120 	.word	0x20000120
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a24      	ldr	r2, [pc, #144]	@ (8000268 <HAL_CAN_MspInit+0xac>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d141      	bne.n	8000260 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b23      	ldr	r3, [pc, #140]	@ (800026c <HAL_CAN_MspInit+0xb0>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a22      	ldr	r2, [pc, #136]	@ (800026c <HAL_CAN_MspInit+0xb0>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b20      	ldr	r3, [pc, #128]	@ (800026c <HAL_CAN_MspInit+0xb0>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b1d      	ldr	r3, [pc, #116]	@ (800026c <HAL_CAN_MspInit+0xb0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a1c      	ldr	r2, [pc, #112]	@ (800026c <HAL_CAN_MspInit+0xb0>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b1a      	ldr	r3, [pc, #104]	@ (800026c <HAL_CAN_MspInit+0xb0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	4813      	ldr	r0, [pc, #76]	@ (8000270 <HAL_CAN_MspInit+0xb4>)
 8000222:	f001 ff77 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	480d      	ldr	r0, [pc, #52]	@ (8000270 <HAL_CAN_MspInit+0xb4>)
 800023c:	f001 ff6a 	bl	8002114 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2105      	movs	r1, #5
 8000244:	2013      	movs	r0, #19
 8000246:	f001 ff3a 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800024a:	2013      	movs	r0, #19
 800024c:	f001 ff53 	bl	80020f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000250:	2200      	movs	r2, #0
 8000252:	2105      	movs	r1, #5
 8000254:	2014      	movs	r0, #20
 8000256:	f001 ff32 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800025a:	2014      	movs	r0, #20
 800025c:	f001 ff4b 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000260:	bf00      	nop
 8000262:	3720      	adds	r7, #32
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40006400 	.word	0x40006400
 800026c:	40021000 	.word	0x40021000
 8000270:	40010800 	.word	0x40010800

08000274 <delay_us>:
#include "delay.h"

// delay_us를 만드는 함수
void delay_us(uint16_t us)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800027e:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <delay_us+0x2c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2200      	movs	r2, #0
 8000284:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < us);
 8000286:	bf00      	nop
 8000288:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <delay_us+0x2c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	429a      	cmp	r2, r3
 8000292:	d3f9      	bcc.n	8000288 <delay_us+0x14>
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	200001a4 	.word	0x200001a4

080002a4 <_write>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

int _write(int file, char* p, int len)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	230a      	movs	r3, #10
 80002b6:	68b9      	ldr	r1, [r7, #8]
 80002b8:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <_write+0x24>)
 80002ba:	f003 fd19 	bl	8003cf0 <HAL_UART_Transmit>
	return len;
 80002be:	687b      	ldr	r3, [r7, #4]
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000234 	.word	0x20000234

080002cc <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	printf("STM32 start_sensor part!!\n");
 80002d0:	4818      	ldr	r0, [pc, #96]	@ (8000334 <MX_FREERTOS_Init+0x68>)
 80002d2:	f006 ff7b 	bl	80071cc <puts>

	// 초음파 초기화
	ultra_init();
 80002d6:	f000 fd4d 	bl	8000d74 <ultra_init>


	/* CAN 설정 부분 */
	// 필터 설정
	filter_INIT(0x0000, 0x0000);
 80002da:	2100      	movs	r1, #0
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 fa17 	bl	8000710 <filter_INIT>

	// can 채널에 필터 적용
	HAL_CAN_ConfigFilter(&hcan, &canFilter);
 80002e2:	4915      	ldr	r1, [pc, #84]	@ (8000338 <MX_FREERTOS_Init+0x6c>)
 80002e4:	4815      	ldr	r0, [pc, #84]	@ (800033c <MX_FREERTOS_Init+0x70>)
 80002e6:	f001 f9f8 	bl	80016da <HAL_CAN_ConfigFilter>

	// 송수신을 하기 위해 Normal 모드 진입
	HAL_CAN_Start(&hcan);
 80002ea:	4814      	ldr	r0, [pc, #80]	@ (800033c <MX_FREERTOS_Init+0x70>)
 80002ec:	f001 fabe 	bl	800186c <HAL_CAN_Start>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of sensorQueue */
	sensorQueueHandle = osMessageQueueNew (16, sizeof(SensorPacket), &sensorQueue_attributes);
 80002f0:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <MX_FREERTOS_Init+0x74>)
 80002f2:	2109      	movs	r1, #9
 80002f4:	2010      	movs	r0, #16
 80002f6:	f004 f808 	bl	800430a <osMessageQueueNew>
 80002fa:	4603      	mov	r3, r0
 80002fc:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <MX_FREERTOS_Init+0x78>)
 80002fe:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of ultraTask */
	ultraTaskHandle = osThreadNew(ultraTASK, NULL, &ultraTask_attributes);
 8000300:	4a11      	ldr	r2, [pc, #68]	@ (8000348 <MX_FREERTOS_Init+0x7c>)
 8000302:	2100      	movs	r1, #0
 8000304:	4811      	ldr	r0, [pc, #68]	@ (800034c <MX_FREERTOS_Init+0x80>)
 8000306:	f003 ff53 	bl	80041b0 <osThreadNew>
 800030a:	4603      	mov	r3, r0
 800030c:	4a10      	ldr	r2, [pc, #64]	@ (8000350 <MX_FREERTOS_Init+0x84>)
 800030e:	6013      	str	r3, [r2, #0]

	/* creation of irTask */
	irTaskHandle = osThreadNew(irTASK, NULL, &irTask_attributes);
 8000310:	4a10      	ldr	r2, [pc, #64]	@ (8000354 <MX_FREERTOS_Init+0x88>)
 8000312:	2100      	movs	r1, #0
 8000314:	4810      	ldr	r0, [pc, #64]	@ (8000358 <MX_FREERTOS_Init+0x8c>)
 8000316:	f003 ff4b 	bl	80041b0 <osThreadNew>
 800031a:	4603      	mov	r3, r0
 800031c:	4a0f      	ldr	r2, [pc, #60]	@ (800035c <MX_FREERTOS_Init+0x90>)
 800031e:	6013      	str	r3, [r2, #0]

	/* creation of transTask */
	transTaskHandle = osThreadNew(transTASK, NULL, &transTask_attributes);
 8000320:	4a0f      	ldr	r2, [pc, #60]	@ (8000360 <MX_FREERTOS_Init+0x94>)
 8000322:	2100      	movs	r1, #0
 8000324:	480f      	ldr	r0, [pc, #60]	@ (8000364 <MX_FREERTOS_Init+0x98>)
 8000326:	f003 ff43 	bl	80041b0 <osThreadNew>
 800032a:	4603      	mov	r3, r0
 800032c:	4a0e      	ldr	r2, [pc, #56]	@ (8000368 <MX_FREERTOS_Init+0x9c>)
 800032e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	08007fc0 	.word	0x08007fc0
 8000338:	200000f8 	.word	0x200000f8
 800033c:	20000120 	.word	0x20000120
 8000340:	080080f4 	.word	0x080080f4
 8000344:	20000154 	.word	0x20000154
 8000348:	08008088 	.word	0x08008088
 800034c:	0800036d 	.word	0x0800036d
 8000350:	20000148 	.word	0x20000148
 8000354:	080080ac 	.word	0x080080ac
 8000358:	0800041d 	.word	0x0800041d
 800035c:	2000014c 	.word	0x2000014c
 8000360:	080080d0 	.word	0x080080d0
 8000364:	080004b1 	.word	0x080004b1
 8000368:	20000150 	.word	0x20000150

0800036c <ultraTASK>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ultraTASK */
void ultraTASK(void *argument)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
	SensorPacket packet;

	/* Infinite loop */
	for(;;)
	{
		memset(packet.data, 0, sizeof(packet.data));
 8000374:	f107 0308 	add.w	r3, r7, #8
 8000378:	3301      	adds	r3, #1
 800037a:	2208      	movs	r2, #8
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f007 f804 	bl	800738c <memset>
		HCSR04_Trigger(); // 초음파 측정 시작
 8000384:	f000 fd12 	bl	8000dac <HCSR04_Trigger>

		printf("fst: %dcm, snd: %dcm, thd: %dcm, fth: %dcm\n",
				ultra[0].distance, ultra[1].distance, ultra[2].distance, ultra[3].distance);
 8000388:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <ultraTASK+0x9c>)
 800038a:	8a1b      	ldrh	r3, [r3, #16]
		printf("fst: %dcm, snd: %dcm, thd: %dcm, fth: %dcm\n",
 800038c:	4619      	mov	r1, r3
				ultra[0].distance, ultra[1].distance, ultra[2].distance, ultra[3].distance);
 800038e:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <ultraTASK+0x9c>)
 8000390:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
		printf("fst: %dcm, snd: %dcm, thd: %dcm, fth: %dcm\n",
 8000392:	461a      	mov	r2, r3
				ultra[0].distance, ultra[1].distance, ultra[2].distance, ultra[3].distance);
 8000394:	4b1c      	ldr	r3, [pc, #112]	@ (8000408 <ultraTASK+0x9c>)
 8000396:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		printf("fst: %dcm, snd: %dcm, thd: %dcm, fth: %dcm\n",
 8000398:	4618      	mov	r0, r3
				ultra[0].distance, ultra[1].distance, ultra[2].distance, ultra[3].distance);
 800039a:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <ultraTASK+0x9c>)
 800039c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
		printf("fst: %dcm, snd: %dcm, thd: %dcm, fth: %dcm\n",
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	4603      	mov	r3, r0
 80003a4:	4819      	ldr	r0, [pc, #100]	@ (800040c <ultraTASK+0xa0>)
 80003a6:	f006 fea9 	bl	80070fc <iprintf>
		//		TxData_ultra[1] = ultra[1].distance;
		//		TxData_ultra[2] = ultra[2].distance;
		//		TxData_ultra[3] = ultra[3].distance;


		packet.type = SENSOR_ULTRA;
 80003aa:	2300      	movs	r3, #0
 80003ac:	723b      	strb	r3, [r7, #8]
		packet.data[0] = ultra[0].distance;
 80003ae:	4b16      	ldr	r3, [pc, #88]	@ (8000408 <ultraTASK+0x9c>)
 80003b0:	8a1b      	ldrh	r3, [r3, #16]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	727b      	strb	r3, [r7, #9]
		packet.data[1] = ultra[1].distance;
 80003b6:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <ultraTASK+0x9c>)
 80003b8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	72bb      	strb	r3, [r7, #10]
		packet.data[2] = ultra[2].distance;
 80003be:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <ultraTASK+0x9c>)
 80003c0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	72fb      	strb	r3, [r7, #11]
		packet.data[3] = ultra[3].distance;
 80003c6:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <ultraTASK+0x9c>)
 80003c8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	733b      	strb	r3, [r7, #12]


		// osMessageQueuePut - 데이터를 큐에 넣는 함수

		osStatus_t status;
		if((status = osMessageQueuePut(sensorQueueHandle, &packet, 0, 0)) != osOK)
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <ultraTASK+0xa4>)
 80003d2:	6818      	ldr	r0, [r3, #0]
 80003d4:	f107 0108 	add.w	r1, r7, #8
 80003d8:	2300      	movs	r3, #0
 80003da:	2200      	movs	r2, #0
 80003dc:	f004 f808 	bl	80043f0 <osMessageQueuePut>
 80003e0:	6178      	str	r0, [r7, #20]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00b      	beq.n	8000400 <ultraTASK+0x94>
		{
			if(status == osErrorResource)
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	f113 0f03 	cmn.w	r3, #3
 80003ee:	d103      	bne.n	80003f8 <ultraTASK+0x8c>
				printf("Queue Full: sensorQueue is full!\n");
 80003f0:	4808      	ldr	r0, [pc, #32]	@ (8000414 <ultraTASK+0xa8>)
 80003f2:	f006 feeb 	bl	80071cc <puts>
 80003f6:	e003      	b.n	8000400 <ultraTASK+0x94>
			else
				printf("Queue Error: osMessageQueuePut failed with code %d\n", status);
 80003f8:	6979      	ldr	r1, [r7, #20]
 80003fa:	4807      	ldr	r0, [pc, #28]	@ (8000418 <ultraTASK+0xac>)
 80003fc:	f006 fe7e 	bl	80070fc <iprintf>
		}

		osDelay(200);
 8000400:	20c8      	movs	r0, #200	@ 0xc8
 8000402:	f003 ff67 	bl	80042d4 <osDelay>
	{
 8000406:	e7b5      	b.n	8000374 <ultraTASK+0x8>
 8000408:	20000008 	.word	0x20000008
 800040c:	08007fdc 	.word	0x08007fdc
 8000410:	20000154 	.word	0x20000154
 8000414:	08008008 	.word	0x08008008
 8000418:	0800802c 	.word	0x0800802c

0800041c <irTASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_irTASK */
void irTASK(void *argument)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
//		{
//			TxData_ir[1] = 0;
//			printf("Right_OFF\n");
//		}

		memset(packet.data, 0, sizeof(packet.data));
 8000424:	f107 0308 	add.w	r3, r7, #8
 8000428:	3301      	adds	r3, #1
 800042a:	2208      	movs	r2, #8
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f006 ffac 	bl	800738c <memset>

		packet.type = SENSOR_IR;
 8000434:	2301      	movs	r3, #1
 8000436:	723b      	strb	r3, [r7, #8]
		// 검은색 - 1, 이외 - 0
		packet.data[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) ? 1 : 0;
 8000438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800043c:	4818      	ldr	r0, [pc, #96]	@ (80004a0 <irTASK+0x84>)
 800043e:	f001 ffed 	bl	800241c <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf14      	ite	ne
 8000448:	2301      	movne	r3, #1
 800044a:	2300      	moveq	r3, #0
 800044c:	b2db      	uxtb	r3, r3
 800044e:	727b      	strb	r3, [r7, #9]
		packet.data[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) ? 1 : 0;
 8000450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000454:	4812      	ldr	r0, [pc, #72]	@ (80004a0 <irTASK+0x84>)
 8000456:	f001 ffe1 	bl	800241c <HAL_GPIO_ReadPin>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	bf14      	ite	ne
 8000460:	2301      	movne	r3, #1
 8000462:	2300      	moveq	r3, #0
 8000464:	b2db      	uxtb	r3, r3
 8000466:	72bb      	strb	r3, [r7, #10]

		osStatus_t status;
		if((status = osMessageQueuePut(sensorQueueHandle, &packet, 0, 0)) != osOK)
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <irTASK+0x88>)
 800046a:	6818      	ldr	r0, [r3, #0]
 800046c:	f107 0108 	add.w	r1, r7, #8
 8000470:	2300      	movs	r3, #0
 8000472:	2200      	movs	r2, #0
 8000474:	f003 ffbc 	bl	80043f0 <osMessageQueuePut>
 8000478:	6178      	str	r0, [r7, #20]
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d00b      	beq.n	8000498 <irTASK+0x7c>
		{
			if(status == osErrorResource)
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	f113 0f03 	cmn.w	r3, #3
 8000486:	d103      	bne.n	8000490 <irTASK+0x74>
				printf("Queue Full: sensorQueue is full!\n");
 8000488:	4807      	ldr	r0, [pc, #28]	@ (80004a8 <irTASK+0x8c>)
 800048a:	f006 fe9f 	bl	80071cc <puts>
 800048e:	e003      	b.n	8000498 <irTASK+0x7c>
			else
				printf("Queue Error: osMessageQueuePut failed with code %d\n", status);
 8000490:	6979      	ldr	r1, [r7, #20]
 8000492:	4806      	ldr	r0, [pc, #24]	@ (80004ac <irTASK+0x90>)
 8000494:	f006 fe32 	bl	80070fc <iprintf>
		}


		osDelay(200);
 8000498:	20c8      	movs	r0, #200	@ 0xc8
 800049a:	f003 ff1b 	bl	80042d4 <osDelay>
	{
 800049e:	e7c1      	b.n	8000424 <irTASK+0x8>
 80004a0:	40011000 	.word	0x40011000
 80004a4:	20000154 	.word	0x20000154
 80004a8:	08008008 	.word	0x08008008
 80004ac:	0800802c 	.word	0x0800802c

080004b0 <transTASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_transTASK */
void transTASK(void *argument)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	SensorPacket packet;

	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(sensorQueueHandle, &packet, NULL, osWaitForever) == osOK)
 80004b8:	4b14      	ldr	r3, [pc, #80]	@ (800050c <transTASK+0x5c>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	f107 010c 	add.w	r1, r7, #12
 80004c0:	f04f 33ff 	mov.w	r3, #4294967295
 80004c4:	2200      	movs	r2, #0
 80004c6:	f003 fff3 	bl	80044b0 <osMessageQueueGet>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1f3      	bne.n	80004b8 <transTASK+0x8>
		{
			if(packet.type == SENSOR_ULTRA)
 80004d0:	7b3b      	ldrb	r3, [r7, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d109      	bne.n	80004ea <transTASK+0x3a>
				Can_SEND(0x102, 4, packet.data);  // 초음파
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	3301      	adds	r3, #1
 80004dc:	461a      	mov	r2, r3
 80004de:	2104      	movs	r1, #4
 80004e0:	f44f 7081 	mov.w	r0, #258	@ 0x102
 80004e4:	f000 f954 	bl	8000790 <Can_SEND>
 80004e8:	e00b      	b.n	8000502 <transTASK+0x52>
			else if(packet.type == SENSOR_IR)
 80004ea:	7b3b      	ldrb	r3, [r7, #12]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d108      	bne.n	8000502 <transTASK+0x52>
				Can_SEND(0x106, 2, packet.data);  // IR
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	3301      	adds	r3, #1
 80004f6:	461a      	mov	r2, r3
 80004f8:	2102      	movs	r1, #2
 80004fa:	f44f 7083 	mov.w	r0, #262	@ 0x106
 80004fe:	f000 f947 	bl	8000790 <Can_SEND>
			printf("Packet Send!\n");
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <transTASK+0x60>)
 8000504:	f006 fe62 	bl	80071cc <puts>
		if(osMessageQueueGet(sensorQueueHandle, &packet, NULL, osWaitForever) == osOK)
 8000508:	e7d6      	b.n	80004b8 <transTASK+0x8>
 800050a:	bf00      	nop
 800050c:	20000154 	.word	0x20000154
 8000510:	08008060 	.word	0x08008060

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000528:	4b3a      	ldr	r3, [pc, #232]	@ (8000614 <MX_GPIO_Init+0x100>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a39      	ldr	r2, [pc, #228]	@ (8000614 <MX_GPIO_Init+0x100>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b37      	ldr	r3, [pc, #220]	@ (8000614 <MX_GPIO_Init+0x100>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0310 	and.w	r3, r3, #16
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000540:	4b34      	ldr	r3, [pc, #208]	@ (8000614 <MX_GPIO_Init+0x100>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a33      	ldr	r2, [pc, #204]	@ (8000614 <MX_GPIO_Init+0x100>)
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b31      	ldr	r3, [pc, #196]	@ (8000614 <MX_GPIO_Init+0x100>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0320 	and.w	r3, r3, #32
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <MX_GPIO_Init+0x100>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a2d      	ldr	r2, [pc, #180]	@ (8000614 <MX_GPIO_Init+0x100>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <MX_GPIO_Init+0x100>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <MX_GPIO_Init+0x100>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a27      	ldr	r2, [pc, #156]	@ (8000614 <MX_GPIO_Init+0x100>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <MX_GPIO_Init+0x100>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2120      	movs	r1, #32
 800058c:	4822      	ldr	r0, [pc, #136]	@ (8000618 <MX_GPIO_Init+0x104>)
 800058e:	f001 ff5c 	bl	800244a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000598:	4820      	ldr	r0, [pc, #128]	@ (800061c <MX_GPIO_Init+0x108>)
 800059a:	f001 ff56 	bl	800244a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800059e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	481b      	ldr	r0, [pc, #108]	@ (8000620 <MX_GPIO_Init+0x10c>)
 80005b4:	f001 fdae 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005b8:	2320      	movs	r3, #32
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4812      	ldr	r0, [pc, #72]	@ (8000618 <MX_GPIO_Init+0x104>)
 80005d0:	f001 fda0 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <MX_GPIO_Init+0x108>)
 80005ee:	f001 fd91 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	@ (8000620 <MX_GPIO_Init+0x10c>)
 8000608:	f001 fd84 	bl	8002114 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	40010800 	.word	0x40010800
 800061c:	40010c00 	.word	0x40010c00
 8000620:	40011000 	.word	0x40011000

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 ff2a 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f812 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f7ff ff70 	bl	8000514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 fe8a 	bl	800134c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000638:	f7ff fd8a 	bl	8000150 <MX_CAN_Init>
  MX_TIM2_Init();
 800063c:	f000 fa4a 	bl	8000ad4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000640:	f000 fa94 	bl	8000b6c <MX_TIM3_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f003 fd6c 	bl	8004120 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000648:	f7ff fe40 	bl	80002cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800064c:	f003 fd8a 	bl	8004164 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <main+0x2c>

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	@ 0x40
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2228      	movs	r2, #40	@ 0x28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fe92 	bl	800738c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000692:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4618      	mov	r0, r3
 800069e:	f001 feed 	bl	800247c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006a8:	f000 f82c 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 f95a 	bl	8002980 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006d2:	f000 f817 	bl	8000704 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3740      	adds	r7, #64	@ 0x40
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80006f2:	f000 fedb 	bl	80014ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40000800 	.word	0x40000800

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <filter_INIT>:
#include "mycan.h"


// 필터 설정
void filter_INIT(uint32_t f_maskid, uint32_t f_id)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	// 수신필터 설정은 normal 모드에 들어가기전 초기화 모드에서 설정해줘야 하기 때문에
	// HAL_CAN_Start() 함수 호출 전에 완료해야 함
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <filter_INIT+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <filter_INIT+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
	canFilter.FilterMaskIdHigh = f_maskid;
 8000726:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <filter_INIT+0x4c>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6093      	str	r3, [r2, #8]
	canFilter.FilterIdHigh = f_id;
 800072c:	4a0b      	ldr	r2, [pc, #44]	@ (800075c <filter_INIT+0x4c>)
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	6013      	str	r3, [r2, #0]
	canFilter.FilterMaskIdLow = f_maskid;
 8000732:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <filter_INIT+0x4c>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	60d3      	str	r3, [r2, #12]
	canFilter.FilterIdLow = f_id;
 8000738:	4a08      	ldr	r2, [pc, #32]	@ (800075c <filter_INIT+0x4c>)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	6053      	str	r3, [r2, #4]
	canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800073e:	4b07      	ldr	r3, [pc, #28]	@ (800075c <filter_INIT+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
	canFilter.FilterBank = 0;
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <filter_INIT+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
	canFilter.FilterActivation = ENABLE;
 800074a:	4b04      	ldr	r3, [pc, #16]	@ (800075c <filter_INIT+0x4c>)
 800074c:	2201      	movs	r2, #1
 800074e:	621a      	str	r2, [r3, #32]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000f8 	.word	0x200000f8

08000760 <Txheader_SET>:

// 송신 헤더 설정
// Txheader_SET(0x102, 8);
void Txheader_SET(uint32_t StandId, uint32_t len)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	TxHeader.StdId = StandId;       // Standard Identifier, 0 ~ 0x7FF
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <Txheader_SET+0x2c>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;    // 전송하는 메세지의 프레임 타입, DATA or REMOTE
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <Txheader_SET+0x2c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;      // 전송하는 메세지의 식별자 타입, STD or EXT
 8000776:	4b05      	ldr	r3, [pc, #20]	@ (800078c <Txheader_SET+0x2c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = len;             // 송신 프레임 길이, 0 ~ 8 byte
 800077c:	4a03      	ldr	r2, [pc, #12]	@ (800078c <Txheader_SET+0x2c>)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	6113      	str	r3, [r2, #16]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	200000dc 	.word	0x200000dc

08000790 <Can_SEND>:

void Can_SEND(uint32_t StandId, uint32_t len, uint8_t *TxData)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	Txheader_SET(StandId, len);
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff ffde 	bl	8000760 <Txheader_SET>

	TxMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80007a4:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <Can_SEND+0x34>)
 80007a6:	f001 f974 	bl	8001a92 <HAL_CAN_GetTxMailboxesFreeLevel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <Can_SEND+0x38>)
 80007ae:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <Can_SEND+0x38>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4905      	ldr	r1, [pc, #20]	@ (80007cc <Can_SEND+0x3c>)
 80007b6:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <Can_SEND+0x34>)
 80007b8:	f001 f89c 	bl	80018f4 <HAL_CAN_AddTxMessage>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000120 	.word	0x20000120
 80007c8:	200000f4 	.word	0x200000f4
 80007cc:	200000dc 	.word	0x200000dc

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <HAL_MspInit+0x68>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <HAL_MspInit+0x68>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_MspInit+0x68>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_MspInit+0x68>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a11      	ldr	r2, [pc, #68]	@ (8000838 <HAL_MspInit+0x68>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <HAL_MspInit+0x68>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	f06f 0001 	mvn.w	r0, #1
 800080e:	f001 fc56 	bl	80020be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_MspInit+0x6c>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4a04      	ldr	r2, [pc, #16]	@ (800083c <HAL_MspInit+0x6c>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	40010000 	.word	0x40010000

08000840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <HAL_InitTick+0xe8>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a33      	ldr	r2, [pc, #204]	@ (8000928 <HAL_InitTick+0xe8>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <HAL_InitTick+0xe8>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086e:	f107 0210 	add.w	r2, r7, #16
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f9f1 	bl	8002c60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000884:	2b00      	cmp	r3, #0
 8000886:	d103      	bne.n	8000890 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000888:	f002 f9c2 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 800088c:	6378      	str	r0, [r7, #52]	@ 0x34
 800088e:	e004      	b.n	800089a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000890:	f002 f9be 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8000894:	4603      	mov	r3, r0
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800089c:	4a23      	ldr	r2, [pc, #140]	@ (800092c <HAL_InitTick+0xec>)
 800089e:	fba2 2303 	umull	r2, r3, r2, r3
 80008a2:	0c9b      	lsrs	r3, r3, #18
 80008a4:	3b01      	subs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008a8:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <HAL_InitTick+0xf0>)
 80008aa:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <HAL_InitTick+0xf4>)
 80008ac:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008ae:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <HAL_InitTick+0xf0>)
 80008b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000930 <HAL_InitTick+0xf0>)
 80008b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <HAL_InitTick+0xf0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <HAL_InitTick+0xf0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_InitTick+0xf0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008ce:	4818      	ldr	r0, [pc, #96]	@ (8000930 <HAL_InitTick+0xf0>)
 80008d0:	f002 fa14 	bl	8002cfc <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d11b      	bne.n	800091a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008e2:	4813      	ldr	r0, [pc, #76]	@ (8000930 <HAL_InitTick+0xf0>)
 80008e4:	f002 faa4 	bl	8002e30 <HAL_TIM_Base_Start_IT>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d111      	bne.n	800091a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008f6:	201e      	movs	r0, #30
 80008f8:	f001 fbfd 	bl	80020f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d808      	bhi.n	8000914 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000902:	2200      	movs	r2, #0
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	201e      	movs	r0, #30
 8000908:	f001 fbd9 	bl	80020be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_InitTick+0xf8>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	e002      	b.n	800091a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800091a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800091e:	4618      	mov	r0, r3
 8000920:	3738      	adds	r7, #56	@ 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	431bde83 	.word	0x431bde83
 8000930:	20000158 	.word	0x20000158
 8000934:	40000800 	.word	0x40000800
 8000938:	20000058 	.word	0x20000058

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000976:	f001 f8c0 	bl	8001afa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000120 	.word	0x20000120

08000984 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800098a:	f001 f8b6 	bl	8001afa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000120 	.word	0x20000120

08000998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <TIM3_IRQHandler+0x10>)
 800099e:	f002 fbfd 	bl	800319c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001ec 	.word	0x200001ec

080009ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM4_IRQHandler+0x10>)
 80009b2:	f002 fbf3 	bl	800319c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000158 	.word	0x20000158

080009c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d2:	f3af 8000 	nop.w
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
  }

  return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a20:	605a      	str	r2, [r3, #4]
  return 0;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <_isatty>:

int _isatty(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
	...

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f006 fd2a 	bl	80074e4 <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20005000 	.word	0x20005000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	200001a0 	.word	0x200001a0
 8000ac4:	20001db8 	.word	0x20001db8

08000ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000afa:	223f      	movs	r2, #63	@ 0x3f
 8000afc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b18:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b1a:	f002 f8ef 	bl	8002cfc <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b24:	f7ff fdee 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b36:	f002 fcbd 	bl	80034b4 <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b40:	f7ff fde0 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b52:	f003 f80d 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f7ff fdd2 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001a4 	.word	0x200001a4

08000b6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b96:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000b98:	4a3c      	ldr	r2, [pc, #240]	@ (8000c8c <MX_TIM3_Init+0x120>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000b9e:	223f      	movs	r2, #63	@ 0x3f
 8000ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ba8:	4b37      	ldr	r3, [pc, #220]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b35      	ldr	r3, [pc, #212]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bbc:	4832      	ldr	r0, [pc, #200]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000bbe:	f002 f89d 	bl	8002cfc <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000bc8:	f7ff fd9c 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000bda:	f002 fc6b 	bl	80034b4 <HAL_TIM_ConfigClockSource>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f7ff fd8e 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000be8:	4827      	ldr	r0, [pc, #156]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000bea:	f002 f973 	bl	8002ed4 <HAL_TIM_IC_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f7ff fd86 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4820      	ldr	r0, [pc, #128]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000c08:	f002 ffb2 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000c12:	f7ff fd77 	bl	8000704 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4816      	ldr	r0, [pc, #88]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000c2e:	f002 fba5 	bl	800337c <HAL_TIM_IC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000c38:	f7ff fd64 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2204      	movs	r2, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4811      	ldr	r0, [pc, #68]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000c44:	f002 fb9a 	bl	800337c <HAL_TIM_IC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000c4e:	f7ff fd59 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	2208      	movs	r2, #8
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000c5a:	f002 fb8f 	bl	800337c <HAL_TIM_IC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000c64:	f7ff fd4e 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <MX_TIM3_Init+0x11c>)
 8000c70:	f002 fb84 	bl	800337c <HAL_TIM_IC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8000c7a:	f7ff fd43 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	@ 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001ec 	.word	0x200001ec
 8000c8c:	40000400 	.word	0x40000400

08000c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cae:	d10c      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	61d3      	str	r3, [r2, #28]
 8000cbc:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cc8:	e048      	b.n	8000d5c <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a26      	ldr	r2, [pc, #152]	@ (8000d68 <HAL_TIM_Base_MspInit+0xd8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d143      	bne.n	8000d5c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	4a22      	ldr	r2, [pc, #136]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	61d3      	str	r3, [r2, #28]
 8000ce0:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a16      	ldr	r2, [pc, #88]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <HAL_TIM_Base_MspInit+0xd4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1c:	23c0      	movs	r3, #192	@ 0xc0
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480f      	ldr	r0, [pc, #60]	@ (8000d6c <HAL_TIM_Base_MspInit+0xdc>)
 8000d30:	f001 f9f0 	bl	8002114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d34:	2303      	movs	r3, #3
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4619      	mov	r1, r3
 8000d46:	480a      	ldr	r0, [pc, #40]	@ (8000d70 <HAL_TIM_Base_MspInit+0xe0>)
 8000d48:	f001 f9e4 	bl	8002114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	201d      	movs	r0, #29
 8000d52:	f001 f9b4 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d56:	201d      	movs	r0, #29
 8000d58:	f001 f9cd 	bl	80020f6 <HAL_NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	@ 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <ultra_init>:
		{&htim3, TIM_CHANNEL_4, 0, 0, 0, 0, 0, 0}
};


void ultra_init()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2); // timer start 해야함 -> delay us 사용을 위함
 8000d78:	480a      	ldr	r0, [pc, #40]	@ (8000da4 <ultra_init+0x30>)
 8000d7a:	f002 f80f 	bl	8002d9c <HAL_TIM_Base_Start>

	// input capture가 생기면 인터럽트를 걸어야지
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4809      	ldr	r0, [pc, #36]	@ (8000da8 <ultra_init+0x34>)
 8000d82:	f002 f8ff 	bl	8002f84 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000d86:	2104      	movs	r1, #4
 8000d88:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <ultra_init+0x34>)
 8000d8a:	f002 f8fb 	bl	8002f84 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <ultra_init+0x34>)
 8000d92:	f002 f8f7 	bl	8002f84 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000d96:	210c      	movs	r1, #12
 8000d98:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <ultra_init+0x34>)
 8000d9a:	f002 f8f3 	bl	8002f84 <HAL_TIM_IC_Start_IT>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001a4 	.word	0x200001a4
 8000da8:	200001ec 	.word	0x200001ec

08000dac <HCSR04_Trigger>:

// 초음파 동작 방식 - 트리거를 발생시키면 에코의 길이를 출력해서 초음파의 길이를 측정함

void HCSR04_Trigger()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	// 안넣어도 동작하지만 확실하게 처음에 low로 설정
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db6:	481f      	ldr	r0, [pc, #124]	@ (8000e34 <HCSR04_Trigger+0x88>)
 8000db8:	f001 fb47 	bl	800244a <HAL_GPIO_WritePin>
	delay_us(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fa59 	bl	8000274 <delay_us>

	// trigger에 10us 동안 High를 주고 Low로 떨어뜨림
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc8:	481a      	ldr	r0, [pc, #104]	@ (8000e34 <HCSR04_Trigger+0x88>)
 8000dca:	f001 fb3e 	bl	800244a <HAL_GPIO_WritePin>
	delay_us(10);
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f7ff fa50 	bl	8000274 <delay_us>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dda:	4816      	ldr	r0, [pc, #88]	@ (8000e34 <HCSR04_Trigger+0x88>)
 8000ddc:	f001 fb35 	bl	800244a <HAL_GPIO_WritePin>

	// timer 3번의 각 채널을 enable 시켜줌
	__HAL_TIM_ENABLE_IT(ultra[0].htim, TIM_IT_CC1);
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0202 	orr.w	r2, r2, #2
 8000df2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(ultra[1].htim, TIM_IT_CC2);
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0204 	orr.w	r2, r2, #4
 8000e06:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(ultra[2].htim, TIM_IT_CC3);
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0208 	orr.w	r2, r2, #8
 8000e1a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(ultra[3].htim, TIM_IT_CC4);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <HCSR04_Trigger+0x8c>)
 8000e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0210 	orr.w	r2, r2, #16
 8000e2e:	60da      	str	r2, [r3, #12]
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_TIM_IC_CaptureCallback>:


// echo pulse output을 수행하는 함수
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	switch(htim->Channel)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7f1b      	ldrb	r3, [r3, #28]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	2b07      	cmp	r3, #7
 8000e4c:	d822      	bhi.n	8000e94 <HAL_TIM_IC_CaptureCallback+0x58>
 8000e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <HAL_TIM_IC_CaptureCallback+0x18>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000e75 	.word	0x08000e75
 8000e58:	08000e7d 	.word	0x08000e7d
 8000e5c:	08000e95 	.word	0x08000e95
 8000e60:	08000e85 	.word	0x08000e85
 8000e64:	08000e95 	.word	0x08000e95
 8000e68:	08000e95 	.word	0x08000e95
 8000e6c:	08000e95 	.word	0x08000e95
 8000e70:	08000e8d 	.word	0x08000e8d
	{
	case HAL_TIM_ACTIVE_CHANNEL_1:
		ultra_idx = 0;
 8000e74:	4b9a      	ldr	r3, [pc, #616]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
		break;
 8000e7a:	e00b      	b.n	8000e94 <HAL_TIM_IC_CaptureCallback+0x58>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		ultra_idx = 1;
 8000e7c:	4b98      	ldr	r3, [pc, #608]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
		break;
 8000e82:	e007      	b.n	8000e94 <HAL_TIM_IC_CaptureCallback+0x58>
	case HAL_TIM_ACTIVE_CHANNEL_3:
		ultra_idx = 2;
 8000e84:	4b96      	ldr	r3, [pc, #600]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	701a      	strb	r2, [r3, #0]
		break;
 8000e8a:	e003      	b.n	8000e94 <HAL_TIM_IC_CaptureCallback+0x58>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		ultra_idx = 3;
 8000e8c:	4b94      	ldr	r3, [pc, #592]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000e8e:	2203      	movs	r2, #3
 8000e90:	701a      	strb	r2, [r3, #0]
		break;
 8000e92:	bf00      	nop
	}

	if (ultra[ultra_idx].captureFlag == 0)
 8000e94:	4b92      	ldr	r3, [pc, #584]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4a92      	ldr	r2, [pc, #584]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	330e      	adds	r3, #14
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 80be 	bne.w	800102c <HAL_TIM_IC_CaptureCallback+0x1f0>
	{
		// 첫 번째 캡처 (Rising Edge)
		ultra[ultra_idx].IC_Value1 = HAL_TIM_ReadCapturedValue(htim, ultra[ultra_idx].tim_channel);
 8000eb0:	4b8b      	ldr	r3, [pc, #556]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4a8b      	ldr	r2, [pc, #556]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000eb8:	460b      	mov	r3, r1
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f002 fbbb 	bl	8003644 <HAL_TIM_ReadCapturedValue>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b83      	ldr	r3, [pc, #524]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	b290      	uxth	r0, r2
 8000ed8:	4a82      	ldr	r2, [pc, #520]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000eda:	460b      	mov	r3, r1
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3308      	adds	r3, #8
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	801a      	strh	r2, [r3, #0]
		ultra[ultra_idx].captureFlag = 1;
 8000eea:	4b7d      	ldr	r3, [pc, #500]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4a7c      	ldr	r2, [pc, #496]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	330e      	adds	r3, #14
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]

		// Falling Edge로 변경
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultra[ultra_idx].tim_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f02:	4b77      	ldr	r3, [pc, #476]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4a76      	ldr	r2, [pc, #472]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	3304      	adds	r3, #4
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d108      	bne.n	8000f2e <HAL_TIM_IC_CaptureCallback+0xf2>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 020a 	bic.w	r2, r2, #10
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	e033      	b.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x15a>
 8000f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	4a6b      	ldr	r2, [pc, #428]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000f36:	460b      	mov	r3, r1
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	3304      	adds	r3, #4
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d108      	bne.n	8000f5a <HAL_TIM_IC_CaptureCallback+0x11e>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000f56:	6213      	str	r3, [r2, #32]
 8000f58:	e01d      	b.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x15a>
 8000f5a:	4b61      	ldr	r3, [pc, #388]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4a60      	ldr	r2, [pc, #384]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000f62:	460b      	mov	r3, r1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d108      	bne.n	8000f86 <HAL_TIM_IC_CaptureCallback+0x14a>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	e007      	b.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x15a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f94:	6213      	str	r3, [r2, #32]
 8000f96:	4b52      	ldr	r3, [pc, #328]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4a51      	ldr	r2, [pc, #324]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3304      	adds	r3, #4
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d108      	bne.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0x186>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a1a      	ldr	r2, [r3, #32]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0202 	orr.w	r2, r2, #2
 8000fbe:	621a      	str	r2, [r3, #32]
		case TIM_CHANNEL_4:
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
			break;
		}
	}
}
 8000fc0:	e1ba      	b.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultra[ultra_idx].tim_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fc2:	4b47      	ldr	r3, [pc, #284]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4a46      	ldr	r2, [pc, #280]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000fca:	460b      	mov	r3, r1
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d108      	bne.n	8000fee <HAL_TIM_IC_CaptureCallback+0x1b2>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	6213      	str	r3, [r2, #32]
 8000fec:	e1a4      	b.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
 8000fee:	4b3c      	ldr	r3, [pc, #240]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	3304      	adds	r3, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d108      	bne.n	800101a <HAL_TIM_IC_CaptureCallback+0x1de>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e18e      	b.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001028:	6213      	str	r3, [r2, #32]
}
 800102a:	e185      	b.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
		ultra[ultra_idx].IC_Value2 = HAL_TIM_ReadCapturedValue(htim, ultra[ultra_idx].tim_channel);
 800102c:	4b2c      	ldr	r3, [pc, #176]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	4a2c      	ldr	r2, [pc, #176]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001034:	460b      	mov	r3, r1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	3304      	adds	r3, #4
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f002 fafd 	bl	8003644 <HAL_TIM_ReadCapturedValue>
 800104a:	4602      	mov	r2, r0
 800104c:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	b290      	uxth	r0, r2
 8001054:	4a23      	ldr	r2, [pc, #140]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001056:	460b      	mov	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	330a      	adds	r3, #10
 8001062:	4602      	mov	r2, r0
 8001064:	801a      	strh	r2, [r3, #0]
		if (ultra[ultra_idx].IC_Value2 > ultra[ultra_idx].IC_Value1)
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800106e:	460b      	mov	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	330a      	adds	r3, #10
 800107a:	881a      	ldrh	r2, [r3, #0]
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	4918      	ldr	r1, [pc, #96]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001084:	4603      	mov	r3, r0
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4403      	add	r3, r0
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	3308      	adds	r3, #8
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d928      	bls.n	80010e8 <HAL_TIM_IC_CaptureCallback+0x2ac>
			ultra[ultra_idx].echoTime = ultra[ultra_idx].IC_Value2 - ultra[ultra_idx].IC_Value1;
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800109e:	460b      	mov	r3, r1
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	330a      	adds	r3, #10
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80010b4:	4603      	mov	r3, r0
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4403      	add	r3, r0
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	3308      	adds	r3, #8
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80010c4:	7809      	ldrb	r1, [r1, #0]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b298      	uxth	r0, r3
 80010ca:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80010cc:	460b      	mov	r3, r1
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	330c      	adds	r3, #12
 80010d8:	4602      	mov	r2, r0
 80010da:	801a      	strh	r2, [r3, #0]
 80010dc:	e02a      	b.n	8001134 <HAL_TIM_IC_CaptureCallback+0x2f8>
 80010de:	bf00      	nop
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20000008 	.word	0x20000008
			ultra[ultra_idx].echoTime = (0xFFFF - ultra[ultra_idx].IC_Value1) + ultra[ultra_idx].IC_Value2;
 80010e8:	4b95      	ldr	r3, [pc, #596]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4a95      	ldr	r2, [pc, #596]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 80010f0:	460b      	mov	r3, r1
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	330a      	adds	r3, #10
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	4b90      	ldr	r3, [pc, #576]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	498f      	ldr	r1, [pc, #572]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 8001106:	4603      	mov	r3, r0
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4403      	add	r3, r0
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	4a89      	ldr	r2, [pc, #548]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	4611      	mov	r1, r2
 800111e:	3b01      	subs	r3, #1
 8001120:	b298      	uxth	r0, r3
 8001122:	4a88      	ldr	r2, [pc, #544]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 8001124:	460b      	mov	r3, r1
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	330c      	adds	r3, #12
 8001130:	4602      	mov	r2, r0
 8001132:	801a      	strh	r2, [r3, #0]
		ultra[ultra_idx].distance = ultra[ultra_idx].echoTime / 58;
 8001134:	4b82      	ldr	r3, [pc, #520]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	4a82      	ldr	r2, [pc, #520]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	330c      	adds	r3, #12
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4a7d      	ldr	r2, [pc, #500]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	4a7d      	ldr	r2, [pc, #500]	@ (8001348 <HAL_TIM_IC_CaptureCallback+0x50c>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	b298      	uxth	r0, r3
 800115a:	4a7a      	ldr	r2, [pc, #488]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 800115c:	460b      	mov	r3, r1
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3310      	adds	r3, #16
 8001168:	4602      	mov	r2, r0
 800116a:	801a      	strh	r2, [r3, #0]
		ultra[ultra_idx].captureFlag = 0;
 800116c:	4b74      	ldr	r3, [pc, #464]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4a74      	ldr	r2, [pc, #464]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 8001174:	460b      	mov	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	330e      	adds	r3, #14
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultra[ultra_idx].tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001184:	4b6e      	ldr	r3, [pc, #440]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	4a6e      	ldr	r2, [pc, #440]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 800118c:	460b      	mov	r3, r1
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	3304      	adds	r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d108      	bne.n	80011b0 <HAL_TIM_IC_CaptureCallback+0x374>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a1a      	ldr	r2, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 020a 	bic.w	r2, r2, #10
 80011ac:	621a      	str	r2, [r3, #32]
 80011ae:	e033      	b.n	8001218 <HAL_TIM_IC_CaptureCallback+0x3dc>
 80011b0:	4b63      	ldr	r3, [pc, #396]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4a63      	ldr	r2, [pc, #396]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 80011b8:	460b      	mov	r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3304      	adds	r3, #4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d108      	bne.n	80011dc <HAL_TIM_IC_CaptureCallback+0x3a0>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	e01d      	b.n	8001218 <HAL_TIM_IC_CaptureCallback+0x3dc>
 80011dc:	4b58      	ldr	r3, [pc, #352]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4a58      	ldr	r2, [pc, #352]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 80011e4:	460b      	mov	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	3304      	adds	r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d108      	bne.n	8001208 <HAL_TIM_IC_CaptureCallback+0x3cc>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001204:	6213      	str	r3, [r2, #32]
 8001206:	e007      	b.n	8001218 <HAL_TIM_IC_CaptureCallback+0x3dc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001216:	6213      	str	r3, [r2, #32]
 8001218:	4b49      	ldr	r3, [pc, #292]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4a49      	ldr	r2, [pc, #292]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 8001220:	460b      	mov	r3, r1
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d106      	bne.n	8001240 <HAL_TIM_IC_CaptureCallback+0x404>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6a12      	ldr	r2, [r2, #32]
 800123c:	621a      	str	r2, [r3, #32]
 800123e:	e02d      	b.n	800129c <HAL_TIM_IC_CaptureCallback+0x460>
 8001240:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	4a3f      	ldr	r2, [pc, #252]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 8001248:	460b      	mov	r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3304      	adds	r3, #4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d106      	bne.n	8001268 <HAL_TIM_IC_CaptureCallback+0x42c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	6213      	str	r3, [r2, #32]
 8001266:	e019      	b.n	800129c <HAL_TIM_IC_CaptureCallback+0x460>
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	4a35      	ldr	r2, [pc, #212]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 8001270:	460b      	mov	r3, r1
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d106      	bne.n	8001290 <HAL_TIM_IC_CaptureCallback+0x454>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	6213      	str	r3, [r2, #32]
 800128e:	e005      	b.n	800129c <HAL_TIM_IC_CaptureCallback+0x460>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	6213      	str	r3, [r2, #32]
		switch (ultra[ultra_idx].tim_channel)
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <HAL_TIM_IC_CaptureCallback+0x504>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4a28      	ldr	r2, [pc, #160]	@ (8001344 <HAL_TIM_IC_CaptureCallback+0x508>)
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	3304      	adds	r3, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	d840      	bhi.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <HAL_TIM_IC_CaptureCallback+0x480>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012f1 	.word	0x080012f1
 80012c0:	08001339 	.word	0x08001339
 80012c4:	08001339 	.word	0x08001339
 80012c8:	08001339 	.word	0x08001339
 80012cc:	08001303 	.word	0x08001303
 80012d0:	08001339 	.word	0x08001339
 80012d4:	08001339 	.word	0x08001339
 80012d8:	08001339 	.word	0x08001339
 80012dc:	08001315 	.word	0x08001315
 80012e0:	08001339 	.word	0x08001339
 80012e4:	08001339 	.word	0x08001339
 80012e8:	08001339 	.word	0x08001339
 80012ec:	08001327 	.word	0x08001327
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0202 	bic.w	r2, r2, #2
 80012fe:	60da      	str	r2, [r3, #12]
			break;
 8001300:	e01a      	b.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0204 	bic.w	r2, r2, #4
 8001310:	60da      	str	r2, [r3, #12]
			break;
 8001312:	e011      	b.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0208 	bic.w	r2, r2, #8
 8001322:	60da      	str	r2, [r3, #12]
			break;
 8001324:	e008      	b.n	8001338 <HAL_TIM_IC_CaptureCallback+0x4fc>
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0210 	bic.w	r2, r2, #16
 8001334:	60da      	str	r2, [r3, #12]
			break;
 8001336:	bf00      	nop
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000004 	.word	0x20000004
 8001344:	20000008 	.word	0x20000008
 8001348:	8d3dcb09 	.word	0x8d3dcb09

0800134c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <MX_USART2_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USART2_UART_Init+0x4c>)
 8001384:	f002 fc64 	bl	8003c50 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f7ff f9b9 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000234 	.word	0x20000234
 800139c:	40004400 	.word	0x40004400

080013a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <HAL_UART_MspInit+0x88>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d12f      	bne.n	8001420 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <HAL_UART_MspInit+0x8c>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	4a19      	ldr	r2, [pc, #100]	@ (800142c <HAL_UART_MspInit+0x8c>)
 80013c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ca:	61d3      	str	r3, [r2, #28]
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_UART_MspInit+0x8c>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_UART_MspInit+0x8c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a13      	ldr	r2, [pc, #76]	@ (800142c <HAL_UART_MspInit+0x8c>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_UART_MspInit+0x8c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013f0:	2304      	movs	r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	480b      	ldr	r0, [pc, #44]	@ (8001430 <HAL_UART_MspInit+0x90>)
 8001404:	f000 fe86 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001408:	2308      	movs	r3, #8
 800140a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <HAL_UART_MspInit+0x90>)
 800141c:	f000 fe7a 	bl	8002114 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40004400 	.word	0x40004400
 800142c:	40021000 	.word	0x40021000
 8001430:	40010800 	.word	0x40010800

08001434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff fb48 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480b      	ldr	r0, [pc, #44]	@ (8001468 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800143a:	490c      	ldr	r1, [pc, #48]	@ (800146c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800143c:	4a0c      	ldr	r2, [pc, #48]	@ (8001470 <LoopFillZerobss+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a09      	ldr	r2, [pc, #36]	@ (8001474 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001450:	4c09      	ldr	r4, [pc, #36]	@ (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f006 f847 	bl	80074f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7ff f8df 	bl	8000624 <main>
  bx lr
 8001466:	4770      	bx	lr
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001470:	08008174 	.word	0x08008174
  ldr r2, =_sbss
 8001474:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001478:	20001db4 	.word	0x20001db4

0800147c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fe09 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f7ff f9d2 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff f998 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	@ (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	2000005c 	.word	0x2000005c
 80014cc:	2000027c 	.word	0x2000027c

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	2000027c 	.word	0x2000027c

080014e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0ed      	b.n	80016d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe fe5a 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff ffda 	bl	80014d0 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800151e:	e012      	b.n	8001546 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001520:	f7ff ffd6 	bl	80014d0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d90b      	bls.n	8001546 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2205      	movs	r2, #5
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0c5      	b.n	80016d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0e5      	beq.n	8001520 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0202 	bic.w	r2, r2, #2
 8001562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001564:	f7ff ffb4 	bl	80014d0 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800156a:	e012      	b.n	8001592 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800156c:	f7ff ffb0 	bl	80014d0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b0a      	cmp	r3, #10
 8001578:	d90b      	bls.n	8001592 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2205      	movs	r2, #5
 800158a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e09f      	b.n	80016d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e5      	bne.n	800156c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e1b      	ldrb	r3, [r3, #24]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e007      	b.n	80015ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e5b      	ldrb	r3, [r3, #25]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e9b      	ldrb	r3, [r3, #26]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0220 	orr.w	r2, r2, #32
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0220 	bic.w	r2, r2, #32
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7edb      	ldrb	r3, [r3, #27]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0210 	bic.w	r2, r2, #16
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e007      	b.n	8001648 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0210 	orr.w	r2, r2, #16
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7f1b      	ldrb	r3, [r3, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0208 	orr.w	r2, r2, #8
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e007      	b.n	8001672 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0208 	bic.w	r2, r2, #8
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7f5b      	ldrb	r3, [r3, #29]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0204 	orr.w	r2, r2, #4
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e007      	b.n	800169c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	ea42 0103 	orr.w	r1, r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016f2:	7cfb      	ldrb	r3, [r7, #19]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d003      	beq.n	8001700 <HAL_CAN_ConfigFilter+0x26>
 80016f8:	7cfb      	ldrb	r3, [r7, #19]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	f040 80aa 	bne.w	8001854 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	2201      	movs	r2, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d123      	bne.n	8001782 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43db      	mvns	r3, r3
 8001744:	401a      	ands	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800175c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3248      	adds	r2, #72	@ 0x48
 8001762:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001776:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001778:	6979      	ldr	r1, [r7, #20]
 800177a:	3348      	adds	r3, #72	@ 0x48
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d122      	bne.n	80017d0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	431a      	orrs	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3248      	adds	r2, #72	@ 0x48
 80017b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017c6:	6979      	ldr	r1, [r7, #20]
 80017c8:	3348      	adds	r3, #72	@ 0x48
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80017ea:	e007      	b.n	80017fc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001816:	e007      	b.n	8001828 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	431a      	orrs	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001846:	f023 0201 	bic.w	r2, r3, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e006      	b.n	8001862 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
  }
}
 8001862:	4618      	mov	r0, r3
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d12e      	bne.n	80018de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff fe1a 	bl	80014d0 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800189e:	e012      	b.n	80018c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018a0:	f7ff fe16 	bl	80014d0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b0a      	cmp	r3, #10
 80018ac:	d90b      	bls.n	80018c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2205      	movs	r2, #5
 80018be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e012      	b.n	80018ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e5      	bne.n	80018a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e006      	b.n	80018ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001908:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d003      	beq.n	8001920 <HAL_CAN_AddTxMessage+0x2c>
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	2b02      	cmp	r3, #2
 800191c:	f040 80ad 	bne.w	8001a7a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8095 	beq.w	8001a6a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	0e1b      	lsrs	r3, r3, #24
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800194a:	2201      	movs	r2, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10d      	bne.n	8001978 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001966:	68f9      	ldr	r1, [r7, #12]
 8001968:	6809      	ldr	r1, [r1, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3318      	adds	r3, #24
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	440b      	add	r3, r1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e00f      	b.n	8001998 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001982:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800198c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3318      	adds	r3, #24
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	440b      	add	r3, r1
 8001996:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6819      	ldr	r1, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3318      	adds	r3, #24
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	440b      	add	r3, r1
 80019a8:	3304      	adds	r3, #4
 80019aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	7d1b      	ldrb	r3, [r3, #20]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d111      	bne.n	80019d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3318      	adds	r3, #24
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	6811      	ldr	r1, [r2, #0]
 80019c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3318      	adds	r3, #24
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	440b      	add	r3, r1
 80019d4:	3304      	adds	r3, #4
 80019d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3307      	adds	r3, #7
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	061a      	lsls	r2, r3, #24
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3306      	adds	r3, #6
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	041b      	lsls	r3, r3, #16
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3305      	adds	r3, #5
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	4313      	orrs	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	3204      	adds	r2, #4
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	4610      	mov	r0, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	6811      	ldr	r1, [r2, #0]
 8001a00:	ea43 0200 	orr.w	r2, r3, r0
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	440b      	add	r3, r1
 8001a0a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001a0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3303      	adds	r3, #3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	061a      	lsls	r2, r3, #24
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3301      	adds	r3, #1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	4610      	mov	r0, r2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	6811      	ldr	r1, [r2, #0]
 8001a36:	ea43 0200 	orr.w	r2, r3, r0
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	440b      	add	r3, r1
 8001a40:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001a44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3318      	adds	r3, #24
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3318      	adds	r3, #24
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	440b      	add	r3, r1
 8001a64:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e00e      	b.n	8001a88 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e006      	b.n	8001a88 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
  }
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3724      	adds	r7, #36	@ 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa6:	7afb      	ldrb	r3, [r7, #11]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001aac:	7afb      	ldrb	r3, [r7, #11]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d11d      	bne.n	8001aee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3301      	adds	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b08a      	sub	sp, #40	@ 0x28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d07c      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d023      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f983 	bl	8001e68 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b62:	e016      	b.n	8001b92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b76:	e00c      	b.n	8001b92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8a:	e002      	b.n	8001b92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f986 	bl	8001e9e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d024      	beq.n	8001be6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f962 	bl	8001e7a <HAL_CAN_TxMailbox1CompleteCallback>
 8001bb6:	e016      	b.n	8001be6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bca:	e00c      	b.n	8001be6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bde:	e002      	b.n	8001be6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f965 	bl	8001eb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d024      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f941 	bl	8001e8c <HAL_CAN_TxMailbox2CompleteCallback>
 8001c0a:	e016      	b.n	8001c3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1e:	e00c      	b.n	8001c3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c32:	e002      	b.n	8001c3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f944 	bl	8001ec2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00b      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2208      	movs	r2, #8
 8001c78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f933 	bl	8001ee6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f91b 	bl	8001ed4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2208      	movs	r2, #8
 8001cdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f913 	bl	8001f0a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8fb 	bl	8001ef8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8fc 	bl	8001f1c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8f4 	bl	8001f2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d07b      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d072      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d043      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03e      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dc8:	2b60      	cmp	r3, #96	@ 0x60
 8001dca:	d02b      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x32a>
 8001dcc:	2b60      	cmp	r3, #96	@ 0x60
 8001dce:	d82e      	bhi.n	8001e2e <HAL_CAN_IRQHandler+0x334>
 8001dd0:	2b50      	cmp	r3, #80	@ 0x50
 8001dd2:	d022      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x320>
 8001dd4:	2b50      	cmp	r3, #80	@ 0x50
 8001dd6:	d82a      	bhi.n	8001e2e <HAL_CAN_IRQHandler+0x334>
 8001dd8:	2b40      	cmp	r3, #64	@ 0x40
 8001dda:	d019      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x316>
 8001ddc:	2b40      	cmp	r3, #64	@ 0x40
 8001dde:	d826      	bhi.n	8001e2e <HAL_CAN_IRQHandler+0x334>
 8001de0:	2b30      	cmp	r3, #48	@ 0x30
 8001de2:	d010      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x30c>
 8001de4:	2b30      	cmp	r3, #48	@ 0x30
 8001de6:	d822      	bhi.n	8001e2e <HAL_CAN_IRQHandler+0x334>
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d002      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x2f8>
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d005      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001df0:	e01d      	b.n	8001e2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dfa:	e019      	b.n	8001e30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e04:	e014      	b.n	8001e30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	f043 0320 	orr.w	r3, r3, #32
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e0e:	e00f      	b.n	8001e30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e18:	e00a      	b.n	8001e30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e22:	e005      	b.n	8001e30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e2c:	e000      	b.n	8001e30 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2204      	movs	r2, #4
 8001e46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f870 	bl	8001f40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	@ 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
	...

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4906      	ldr	r1, [pc, #24]	@ (8001fec <__NVIC_EnableIRQ+0x34>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	@ (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	@ (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	@ 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff4f 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff64 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ffb2 	bl	8002044 <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff81 	bl	8001ff0 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff57 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b08b      	sub	sp, #44	@ 0x2c
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002126:	e169      	b.n	80023fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002128:	2201      	movs	r2, #1
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	429a      	cmp	r2, r3
 8002142:	f040 8158 	bne.w	80023f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4a9a      	ldr	r2, [pc, #616]	@ (80023b4 <HAL_GPIO_Init+0x2a0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d05e      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002150:	4a98      	ldr	r2, [pc, #608]	@ (80023b4 <HAL_GPIO_Init+0x2a0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d875      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 8002156:	4a98      	ldr	r2, [pc, #608]	@ (80023b8 <HAL_GPIO_Init+0x2a4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d058      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 800215c:	4a96      	ldr	r2, [pc, #600]	@ (80023b8 <HAL_GPIO_Init+0x2a4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d86f      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 8002162:	4a96      	ldr	r2, [pc, #600]	@ (80023bc <HAL_GPIO_Init+0x2a8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d052      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002168:	4a94      	ldr	r2, [pc, #592]	@ (80023bc <HAL_GPIO_Init+0x2a8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d869      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 800216e:	4a94      	ldr	r2, [pc, #592]	@ (80023c0 <HAL_GPIO_Init+0x2ac>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d04c      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002174:	4a92      	ldr	r2, [pc, #584]	@ (80023c0 <HAL_GPIO_Init+0x2ac>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d863      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 800217a:	4a92      	ldr	r2, [pc, #584]	@ (80023c4 <HAL_GPIO_Init+0x2b0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d046      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002180:	4a90      	ldr	r2, [pc, #576]	@ (80023c4 <HAL_GPIO_Init+0x2b0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d85d      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 8002186:	2b12      	cmp	r3, #18
 8002188:	d82a      	bhi.n	80021e0 <HAL_GPIO_Init+0xcc>
 800218a:	2b12      	cmp	r3, #18
 800218c:	d859      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 800218e:	a201      	add	r2, pc, #4	@ (adr r2, 8002194 <HAL_GPIO_Init+0x80>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	0800220f 	.word	0x0800220f
 8002198:	080021e9 	.word	0x080021e9
 800219c:	080021fb 	.word	0x080021fb
 80021a0:	0800223d 	.word	0x0800223d
 80021a4:	08002243 	.word	0x08002243
 80021a8:	08002243 	.word	0x08002243
 80021ac:	08002243 	.word	0x08002243
 80021b0:	08002243 	.word	0x08002243
 80021b4:	08002243 	.word	0x08002243
 80021b8:	08002243 	.word	0x08002243
 80021bc:	08002243 	.word	0x08002243
 80021c0:	08002243 	.word	0x08002243
 80021c4:	08002243 	.word	0x08002243
 80021c8:	08002243 	.word	0x08002243
 80021cc:	08002243 	.word	0x08002243
 80021d0:	08002243 	.word	0x08002243
 80021d4:	08002243 	.word	0x08002243
 80021d8:	080021f1 	.word	0x080021f1
 80021dc:	08002205 	.word	0x08002205
 80021e0:	4a79      	ldr	r2, [pc, #484]	@ (80023c8 <HAL_GPIO_Init+0x2b4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021e6:	e02c      	b.n	8002242 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	623b      	str	r3, [r7, #32]
          break;
 80021ee:	e029      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	3304      	adds	r3, #4
 80021f6:	623b      	str	r3, [r7, #32]
          break;
 80021f8:	e024      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	3308      	adds	r3, #8
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e01f      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	330c      	adds	r3, #12
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e01a      	b.n	8002244 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002216:	2304      	movs	r3, #4
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e013      	b.n	8002244 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002224:	2308      	movs	r3, #8
 8002226:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	611a      	str	r2, [r3, #16]
          break;
 800222e:	e009      	b.n	8002244 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002230:	2308      	movs	r3, #8
 8002232:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	615a      	str	r2, [r3, #20]
          break;
 800223a:	e003      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x130>
          break;
 8002242:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2bff      	cmp	r3, #255	@ 0xff
 8002248:	d801      	bhi.n	800224e <HAL_GPIO_Init+0x13a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_Init+0x13e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2bff      	cmp	r3, #255	@ 0xff
 8002258:	d802      	bhi.n	8002260 <HAL_GPIO_Init+0x14c>
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	e002      	b.n	8002266 <HAL_GPIO_Init+0x152>
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	3b08      	subs	r3, #8
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	210f      	movs	r1, #15
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	6a39      	ldr	r1, [r7, #32]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80b1 	beq.w	80023f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002294:	4b4d      	ldr	r3, [pc, #308]	@ (80023cc <HAL_GPIO_Init+0x2b8>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4a4c      	ldr	r2, [pc, #304]	@ (80023cc <HAL_GPIO_Init+0x2b8>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6193      	str	r3, [r2, #24]
 80022a0:	4b4a      	ldr	r3, [pc, #296]	@ (80023cc <HAL_GPIO_Init+0x2b8>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022ac:	4a48      	ldr	r2, [pc, #288]	@ (80023d0 <HAL_GPIO_Init+0x2bc>)
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a40      	ldr	r2, [pc, #256]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_GPIO_Init+0x1ec>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a3f      	ldr	r2, [pc, #252]	@ (80023d8 <HAL_GPIO_Init+0x2c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00d      	beq.n	80022fc <HAL_GPIO_Init+0x1e8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a3e      	ldr	r2, [pc, #248]	@ (80023dc <HAL_GPIO_Init+0x2c8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <HAL_GPIO_Init+0x1e4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a3d      	ldr	r2, [pc, #244]	@ (80023e0 <HAL_GPIO_Init+0x2cc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_GPIO_Init+0x1e0>
 80022f0:	2303      	movs	r3, #3
 80022f2:	e006      	b.n	8002302 <HAL_GPIO_Init+0x1ee>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e004      	b.n	8002302 <HAL_GPIO_Init+0x1ee>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_Init+0x1ee>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_GPIO_Init+0x1ee>
 8002300:	2300      	movs	r3, #0
 8002302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002304:	f002 0203 	and.w	r2, r2, #3
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	4093      	lsls	r3, r2
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002312:	492f      	ldr	r1, [pc, #188]	@ (80023d0 <HAL_GPIO_Init+0x2bc>)
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800232c:	4b2d      	ldr	r3, [pc, #180]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	492c      	ldr	r1, [pc, #176]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800233a:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	43db      	mvns	r3, r3
 8002342:	4928      	ldr	r1, [pc, #160]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 8002344:	4013      	ands	r3, r2
 8002346:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002354:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4922      	ldr	r1, [pc, #136]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	60cb      	str	r3, [r1, #12]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	491e      	ldr	r1, [pc, #120]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 800236c:	4013      	ands	r3, r2
 800236e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4918      	ldr	r1, [pc, #96]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800238a:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	43db      	mvns	r3, r3
 8002392:	4914      	ldr	r1, [pc, #80]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 8002394:	4013      	ands	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d021      	beq.n	80023e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	490e      	ldr	r1, [pc, #56]	@ (80023e4 <HAL_GPIO_Init+0x2d0>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e021      	b.n	80023f6 <HAL_GPIO_Init+0x2e2>
 80023b2:	bf00      	nop
 80023b4:	10320000 	.word	0x10320000
 80023b8:	10310000 	.word	0x10310000
 80023bc:	10220000 	.word	0x10220000
 80023c0:	10210000 	.word	0x10210000
 80023c4:	10120000 	.word	0x10120000
 80023c8:	10110000 	.word	0x10110000
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40010800 	.word	0x40010800
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	40011000 	.word	0x40011000
 80023e0:	40011400 	.word	0x40011400
 80023e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	4909      	ldr	r1, [pc, #36]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	3301      	adds	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	f47f ae8e 	bne.w	8002128 <HAL_GPIO_Init+0x14>
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	372c      	adds	r7, #44	@ 0x2c
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40010400 	.word	0x40010400

0800241c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e001      	b.n	800243e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	807b      	strh	r3, [r7, #2]
 8002456:	4613      	mov	r3, r2
 8002458:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800245a:	787b      	ldrb	r3, [r7, #1]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002466:	e003      	b.n	8002470 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	041a      	lsls	r2, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	611a      	str	r2, [r3, #16]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
	...

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e272      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8087 	beq.w	80025aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249c:	4b92      	ldr	r3, [pc, #584]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a8:	4b8f      	ldr	r3, [pc, #572]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d112      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
 80024b4:	4b8c      	ldr	r3, [pc, #560]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b89      	ldr	r3, [pc, #548]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x12c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d168      	bne.n	80025a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e24c      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x76>
 80024e4:	4b80      	ldr	r3, [pc, #512]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a7f      	ldr	r2, [pc, #508]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e02e      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b7b      	ldr	r3, [pc, #492]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7a      	ldr	r2, [pc, #488]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b78      	ldr	r3, [pc, #480]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a77      	ldr	r2, [pc, #476]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0xbc>
 800251e:	4b72      	ldr	r3, [pc, #456]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a71      	ldr	r2, [pc, #452]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6f      	ldr	r3, [pc, #444]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6e      	ldr	r2, [pc, #440]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002538:	4b6b      	ldr	r3, [pc, #428]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6a      	ldr	r2, [pc, #424]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b68      	ldr	r3, [pc, #416]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a67      	ldr	r2, [pc, #412]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe ffba 	bl	80014d0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe ffb6 	bl	80014d0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	@ 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e200      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b5d      	ldr	r3, [pc, #372]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xe4>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe ffa6 	bl	80014d0 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe ffa2 	bl	80014d0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1ec      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x10c>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b6:	4b4c      	ldr	r3, [pc, #304]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c2:	4b49      	ldr	r3, [pc, #292]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
 80025ce:	4b46      	ldr	r3, [pc, #280]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b43      	ldr	r3, [pc, #268]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1c0      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4939      	ldr	r1, [pc, #228]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fe ff5b 	bl	80014d0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe ff57 	bl	80014d0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1a1      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4927      	ldr	r1, [pc, #156]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe ff3a 	bl	80014d0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe ff36 	bl	80014d0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e180      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03a      	beq.n	8002700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7fe ff1a 	bl	80014d0 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe ff16 	bl	80014d0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e160      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f000 fafe 	bl	8002cc0 <RCC_Delay>
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7fe ff00 	bl	80014d0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe fefc 	bl	80014d0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d908      	bls.n	80026f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e146      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	42420000 	.word	0x42420000
 80026f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b92      	ldr	r3, [pc, #584]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e9      	bne.n	80026d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a6 	beq.w	800285a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b8b      	ldr	r3, [pc, #556]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b88      	ldr	r3, [pc, #544]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a87      	ldr	r2, [pc, #540]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]
 800272a:	4b85      	ldr	r3, [pc, #532]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b82      	ldr	r3, [pc, #520]	@ (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b7f      	ldr	r3, [pc, #508]	@ (8002944 <HAL_RCC_OscConfig+0x4c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7e      	ldr	r2, [pc, #504]	@ (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7fe febd 	bl	80014d0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7fe feb9 	bl	80014d0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	@ 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e103      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b75      	ldr	r3, [pc, #468]	@ (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x312>
 8002780:	4b6f      	ldr	r3, [pc, #444]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a6e      	ldr	r2, [pc, #440]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	e02d      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x334>
 8002796:	4b6a      	ldr	r3, [pc, #424]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a69      	ldr	r2, [pc, #420]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b67      	ldr	r3, [pc, #412]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a66      	ldr	r2, [pc, #408]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	e01c      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x356>
 80027b8:	4b61      	ldr	r3, [pc, #388]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a60      	ldr	r2, [pc, #384]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	4b58      	ldr	r3, [pc, #352]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a57      	ldr	r2, [pc, #348]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fe6d 	bl	80014d0 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fe69 	bl	80014d0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0b1      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	4b4b      	ldr	r3, [pc, #300]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RCC_OscConfig+0x37e>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe fe57 	bl	80014d0 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fe53 	bl	80014d0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e09b      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	4b40      	ldr	r3, [pc, #256]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ee      	bne.n	8002826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b3c      	ldr	r3, [pc, #240]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a3b      	ldr	r2, [pc, #236]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	4b36      	ldr	r3, [pc, #216]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d061      	beq.n	8002934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d146      	bne.n	8002906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002878:	4b33      	ldr	r3, [pc, #204]	@ (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fe27 	bl	80014d0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fe23 	bl	80014d0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e06d      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ae:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4921      	ldr	r1, [pc, #132]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a19      	ldr	r1, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	430b      	orrs	r3, r1
 80028d2:	491b      	ldr	r1, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fdf7 	bl	80014d0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fdf3 	bl	80014d0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e03d      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46a>
 8002904:	e035      	b.n	8002972 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fde0 	bl	80014d0 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fddc 	bl	80014d0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e026      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x498>
 8002932:	e01e      	b.n	8002972 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e019      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_RCC_OscConfig+0x500>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	429a      	cmp	r2, r3
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0d0      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b6a      	ldr	r3, [pc, #424]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d910      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b67      	ldr	r3, [pc, #412]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4965      	ldr	r1, [pc, #404]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a52      	ldr	r2, [pc, #328]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d040      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d115      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b41      	ldr	r3, [pc, #260]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e073      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06b      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b39      	ldr	r3, [pc, #228]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4936      	ldr	r1, [pc, #216]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7fe fd2e 	bl	80014d0 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7fe fd2a 	bl	80014d0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e053      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d210      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	4922      	ldr	r1, [pc, #136]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	@ (8002b4c <HAL_RCC_ClockConfig+0x1cc>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_ClockConfig+0x1d0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fe86 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	0800810c 	.word	0x0800810c
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000058 	.word	0x20000058

08002b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x30>
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x36>
 8002b82:	e027      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002b86:	613b      	str	r3, [r7, #16]
      break;
 8002b88:	e027      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0c9b      	lsrs	r3, r3, #18
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba2:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0c5b      	lsrs	r3, r3, #17
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002bb6:	fb03 f202 	mul.w	r2, r3, r2
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e004      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	613b      	str	r3, [r7, #16]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd6:	613b      	str	r3, [r7, #16]
      break;
 8002bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bda:	693b      	ldr	r3, [r7, #16]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	007a1200 	.word	0x007a1200
 8002bf0:	08008124 	.word	0x08008124
 8002bf4:	08008134 	.word	0x08008134
 8002bf8:	003d0900 	.word	0x003d0900

08002bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b02      	ldr	r3, [pc, #8]	@ (8002c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff2 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	@ (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	0800811c 	.word	0x0800811c

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c3c:	f7ff ffde 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0adb      	lsrs	r3, r3, #11
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	0800811c 	.word	0x0800811c

08002c60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x58>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x58>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x58>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c94:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x58>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_RCC_GetClockConfig+0x5c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0207 	and.w	r2, r3, #7
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <RCC_Delay+0x34>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <RCC_Delay+0x38>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cdc:	bf00      	nop
  }
  while (Delay --);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <RCC_Delay+0x1c>
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd ffb4 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fce2 	bl	8003704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_TIM_Base_Start+0x88>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <HAL_TIM_Base_Start+0x48>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dce:	d009      	beq.n	8002de4 <HAL_TIM_Base_Start+0x48>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a14      	ldr	r2, [pc, #80]	@ (8002e28 <HAL_TIM_Base_Start+0x8c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_TIM_Base_Start+0x48>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a13      	ldr	r2, [pc, #76]	@ (8002e2c <HAL_TIM_Base_Start+0x90>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d111      	bne.n	8002e08 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d010      	beq.n	8002e18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	e007      	b.n	8002e18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800

08002e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d001      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e03a      	b.n	8002ebe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a18      	ldr	r2, [pc, #96]	@ (8002ec8 <HAL_TIM_Base_Start_IT+0x98>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x58>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e72:	d009      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x58>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <HAL_TIM_Base_Start_IT+0x9c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x58>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a13      	ldr	r2, [pc, #76]	@ (8002ed0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d010      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	e007      	b.n	8002ebc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800

08002ed4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e041      	b.n	8002f6a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f839 	bl	8002f72 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 fbf6 	bl	8003704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d104      	bne.n	8002fa2 <HAL_TIM_IC_Start_IT+0x1e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e013      	b.n	8002fca <HAL_TIM_IC_Start_IT+0x46>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_IC_Start_IT+0x2e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e00b      	b.n	8002fca <HAL_TIM_IC_Start_IT+0x46>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d104      	bne.n	8002fc2 <HAL_TIM_IC_Start_IT+0x3e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e003      	b.n	8002fca <HAL_TIM_IC_Start_IT+0x46>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <HAL_TIM_IC_Start_IT+0x58>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e013      	b.n	8003004 <HAL_TIM_IC_Start_IT+0x80>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d104      	bne.n	8002fec <HAL_TIM_IC_Start_IT+0x68>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e00b      	b.n	8003004 <HAL_TIM_IC_Start_IT+0x80>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d104      	bne.n	8002ffc <HAL_TIM_IC_Start_IT+0x78>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e003      	b.n	8003004 <HAL_TIM_IC_Start_IT+0x80>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003002:	b2db      	uxtb	r3, r3
 8003004:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003006:	7bbb      	ldrb	r3, [r7, #14]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800300c:	7b7b      	ldrb	r3, [r7, #13]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0b8      	b.n	8003188 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <HAL_TIM_IC_Start_IT+0xa2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003024:	e013      	b.n	800304e <HAL_TIM_IC_Start_IT+0xca>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d104      	bne.n	8003036 <HAL_TIM_IC_Start_IT+0xb2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003034:	e00b      	b.n	800304e <HAL_TIM_IC_Start_IT+0xca>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d104      	bne.n	8003046 <HAL_TIM_IC_Start_IT+0xc2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003044:	e003      	b.n	800304e <HAL_TIM_IC_Start_IT+0xca>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_TIM_IC_Start_IT+0xda>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800305c:	e013      	b.n	8003086 <HAL_TIM_IC_Start_IT+0x102>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d104      	bne.n	800306e <HAL_TIM_IC_Start_IT+0xea>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800306c:	e00b      	b.n	8003086 <HAL_TIM_IC_Start_IT+0x102>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d104      	bne.n	800307e <HAL_TIM_IC_Start_IT+0xfa>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307c:	e003      	b.n	8003086 <HAL_TIM_IC_Start_IT+0x102>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d841      	bhi.n	8003110 <HAL_TIM_IC_Start_IT+0x18c>
 800308c:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <HAL_TIM_IC_Start_IT+0x110>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030c9 	.word	0x080030c9
 8003098:	08003111 	.word	0x08003111
 800309c:	08003111 	.word	0x08003111
 80030a0:	08003111 	.word	0x08003111
 80030a4:	080030db 	.word	0x080030db
 80030a8:	08003111 	.word	0x08003111
 80030ac:	08003111 	.word	0x08003111
 80030b0:	08003111 	.word	0x08003111
 80030b4:	080030ed 	.word	0x080030ed
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003111 	.word	0x08003111
 80030c0:	08003111 	.word	0x08003111
 80030c4:	080030ff 	.word	0x080030ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0202 	orr.w	r2, r2, #2
 80030d6:	60da      	str	r2, [r3, #12]
      break;
 80030d8:	e01d      	b.n	8003116 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0204 	orr.w	r2, r2, #4
 80030e8:	60da      	str	r2, [r3, #12]
      break;
 80030ea:	e014      	b.n	8003116 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	60da      	str	r2, [r3, #12]
      break;
 80030fc:	e00b      	b.n	8003116 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0210 	orr.w	r2, r2, #16
 800310c:	60da      	str	r2, [r3, #12]
      break;
 800310e:	e002      	b.n	8003116 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	bf00      	nop
  }

  if (status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d134      	bne.n	8003186 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2201      	movs	r2, #1
 8003122:	6839      	ldr	r1, [r7, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fcfe 	bl	8003b26 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a18      	ldr	r2, [pc, #96]	@ (8003190 <HAL_TIM_IC_Start_IT+0x20c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_TIM_IC_Start_IT+0x1ce>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313c:	d009      	beq.n	8003152 <HAL_TIM_IC_Start_IT+0x1ce>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a14      	ldr	r2, [pc, #80]	@ (8003194 <HAL_TIM_IC_Start_IT+0x210>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_TIM_IC_Start_IT+0x1ce>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_TIM_IC_Start_IT+0x214>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d111      	bne.n	8003176 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b06      	cmp	r3, #6
 8003162:	d010      	beq.n	8003186 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	e007      	b.n	8003186 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800

0800319c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d020      	beq.n	8003200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01b      	beq.n	8003200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0202 	mvn.w	r2, #2
 80031d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fe28 	bl	8000e3c <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa6c 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fa72 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d020      	beq.n	800324c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0204 	mvn.w	r2, #4
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd fe02 	bl	8000e3c <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa46 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fa4c 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d020      	beq.n	8003298 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0208 	mvn.w	r2, #8
 8003268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fddc 	bl	8000e3c <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa20 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fa26 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d020      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01b      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0210 	mvn.w	r2, #16
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2208      	movs	r2, #8
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fdb6 	bl	8000e3c <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9fa 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa00 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0201 	mvn.w	r2, #1
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd f9ec 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fc89 	bl	8003c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00c      	beq.n	8003350 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9d0 	bl	80036f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00c      	beq.n	8003374 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0220 	mvn.w	r2, #32
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fc5c 	bl	8003c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003396:	2302      	movs	r3, #2
 8003398:	e088      	b.n	80034ac <HAL_TIM_IC_ConfigChannel+0x130>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80033b8:	f000 fa12 	bl	80037e0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020c 	bic.w	r2, r2, #12
 80033ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
 80033de:	e060      	b.n	80034a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d11c      	bne.n	8003420 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80033f6:	f000 fa7b 	bl	80038f0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003408:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6999      	ldr	r1, [r3, #24]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	619a      	str	r2, [r3, #24]
 800341e:	e040      	b.n	80034a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d11b      	bne.n	800345e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003436:	f000 fac6 	bl	80039c6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 020c 	bic.w	r2, r2, #12
 8003448:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69d9      	ldr	r1, [r3, #28]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	61da      	str	r2, [r3, #28]
 800345c:	e021      	b.n	80034a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d11c      	bne.n	800349e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003474:	f000 fae2 	bl	8003a3c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003486:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69d9      	ldr	r1, [r3, #28]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	021a      	lsls	r2, r3, #8
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	61da      	str	r2, [r3, #28]
 800349c:	e001      	b.n	80034a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIM_ConfigClockSource+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0b4      	b.n	800363a <HAL_TIM_ConfigClockSource+0x186>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003508:	d03e      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0xd4>
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350e:	f200 8087 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003516:	f000 8086 	beq.w	8003626 <HAL_TIM_ConfigClockSource+0x172>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351e:	d87f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b70      	cmp	r3, #112	@ 0x70
 8003522:	d01a      	beq.n	800355a <HAL_TIM_ConfigClockSource+0xa6>
 8003524:	2b70      	cmp	r3, #112	@ 0x70
 8003526:	d87b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b60      	cmp	r3, #96	@ 0x60
 800352a:	d050      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x11a>
 800352c:	2b60      	cmp	r3, #96	@ 0x60
 800352e:	d877      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b50      	cmp	r3, #80	@ 0x50
 8003532:	d03c      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xfa>
 8003534:	2b50      	cmp	r3, #80	@ 0x50
 8003536:	d873      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d058      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x13a>
 800353c:	2b40      	cmp	r3, #64	@ 0x40
 800353e:	d86f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b30      	cmp	r3, #48	@ 0x30
 8003542:	d064      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b30      	cmp	r3, #48	@ 0x30
 8003546:	d86b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d060      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b20      	cmp	r3, #32
 800354e:	d867      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05c      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d05a      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003558:	e062      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356a:	f000 fabd 	bl	8003ae8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800357c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e04f      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	f000 faa6 	bl	8003ae8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035aa:	609a      	str	r2, [r3, #8]
      break;
 80035ac:	e03c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	461a      	mov	r2, r3
 80035bc:	f000 f96a 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2150      	movs	r1, #80	@ 0x50
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fa74 	bl	8003ab4 <TIM_ITRx_SetConfig>
      break;
 80035cc:	e02c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 f9c4 	bl	8003968 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2160      	movs	r1, #96	@ 0x60
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fa64 	bl	8003ab4 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e01c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 f94a 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2140      	movs	r1, #64	@ 0x40
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fa54 	bl	8003ab4 <TIM_ITRx_SetConfig>
      break;
 800360c:	e00c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f000 fa4b 	bl	8003ab4 <TIM_ITRx_SetConfig>
      break;
 800361e:	e003      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e000      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d831      	bhi.n	80036bc <HAL_TIM_ReadCapturedValue+0x78>
 8003658:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <HAL_TIM_ReadCapturedValue+0x1c>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003695 	.word	0x08003695
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036bd 	.word	0x080036bd
 800366c:	080036bd 	.word	0x080036bd
 8003670:	0800369f 	.word	0x0800369f
 8003674:	080036bd 	.word	0x080036bd
 8003678:	080036bd 	.word	0x080036bd
 800367c:	080036bd 	.word	0x080036bd
 8003680:	080036a9 	.word	0x080036a9
 8003684:	080036bd 	.word	0x080036bd
 8003688:	080036bd 	.word	0x080036bd
 800368c:	080036bd 	.word	0x080036bd
 8003690:	080036b3 	.word	0x080036b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369a:	60fb      	str	r3, [r7, #12]

      break;
 800369c:	e00f      	b.n	80036be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	60fb      	str	r3, [r7, #12]

      break;
 80036a6:	e00a      	b.n	80036be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	60fb      	str	r3, [r7, #12]

      break;
 80036b0:	e005      	b.n	80036be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	60fb      	str	r3, [r7, #12]

      break;
 80036ba:	e000      	b.n	80036be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80036bc:	bf00      	nop
  }

  return tmpreg;
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop

080036cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
	...

08003704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a2f      	ldr	r2, [pc, #188]	@ (80037d4 <TIM_Base_SetConfig+0xd0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0x30>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a2c      	ldr	r2, [pc, #176]	@ (80037d8 <TIM_Base_SetConfig+0xd4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a2b      	ldr	r2, [pc, #172]	@ (80037dc <TIM_Base_SetConfig+0xd8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800373a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a22      	ldr	r2, [pc, #136]	@ (80037d4 <TIM_Base_SetConfig+0xd0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00b      	beq.n	8003766 <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003754:	d007      	beq.n	8003766 <TIM_Base_SetConfig+0x62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1f      	ldr	r2, [pc, #124]	@ (80037d8 <TIM_Base_SetConfig+0xd4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1e      	ldr	r2, [pc, #120]	@ (80037dc <TIM_Base_SetConfig+0xd8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d108      	bne.n	8003778 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800376c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <TIM_Base_SetConfig+0xd0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d103      	bne.n	80037ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f023 0201 	bic.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]
  }
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800

080037e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f023 0201 	bic.w	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <TIM_TI1_SetConfig+0xa8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <TIM_TI1_SetConfig+0x46>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003814:	d007      	beq.n	8003826 <TIM_TI1_SetConfig+0x46>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a1c      	ldr	r2, [pc, #112]	@ (800388c <TIM_TI1_SetConfig+0xac>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_TI1_SetConfig+0x46>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a1b      	ldr	r2, [pc, #108]	@ (8003890 <TIM_TI1_SetConfig+0xb0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <TIM_TI1_SetConfig+0x4a>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <TIM_TI1_SetConfig+0x4c>
 800382a:	2300      	movs	r3, #0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e003      	b.n	800384a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	b2db      	uxtb	r3, r3
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f003 030a 	and.w	r3, r3, #10
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f023 0210 	bic.w	r2, r3, #16
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800391c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800392e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	031b      	lsls	r3, r3, #12
 8003934:	b29b      	uxth	r3, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003942:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0210 	bic.w	r2, r3, #16
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	031b      	lsls	r3, r3, #12
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b087      	sub	sp, #28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	031b      	lsls	r3, r3, #12
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	031b      	lsls	r3, r3, #12
 8003a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f043 0307 	orr.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2201      	movs	r2, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	401a      	ands	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1a      	ldr	r2, [r3, #32]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	621a      	str	r2, [r3, #32]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e046      	b.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	@ (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd4:	d009      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a12      	ldr	r2, [pc, #72]	@ (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a10      	ldr	r2, [pc, #64]	@ (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10c      	bne.n	8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800

08003c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e042      	b.n	8003ce8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fb92 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	@ 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f971 	bl	8003f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d175      	bne.n	8003dfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Transmit+0x2c>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e06e      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	@ 0x21
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2e:	f7fd fbcf 	bl	80014d0 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d48:	d108      	bne.n	8003d5c <HAL_UART_Transmit+0x6c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d64:	e02e      	b.n	8003dc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	@ 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f848 	bl	8003e06 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e03a      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3302      	adds	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e007      	b.n	8003db6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cb      	bne.n	8003d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	@ 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f814 	bl	8003e06 <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e006      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e16:	e03b      	b.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d037      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7fd fb56 	bl	80014d0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	6a3a      	ldr	r2, [r7, #32]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e03a      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d023      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d020      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b40      	cmp	r3, #64	@ 0x40
 8003e52:	d01d      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d116      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f81d 	bl	8003eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2208      	movs	r2, #8
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e00f      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d0b4      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b095      	sub	sp, #84	@ 0x54
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e5      	bne.n	8003ec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d119      	bne.n	8003f64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f50:	61ba      	str	r2, [r7, #24]
 8003f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f72:	bf00      	nop
 8003f74:	3754      	adds	r7, #84	@ 0x54
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003fb6:	f023 030c 	bic.w	r3, r3, #12
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2c      	ldr	r2, [pc, #176]	@ (8004090 <UART_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d103      	bne.n	8003fec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7fe fe28 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	e002      	b.n	8003ff2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fec:	f7fe fe10 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003ff0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009a      	lsls	r2, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	4a22      	ldr	r2, [pc, #136]	@ (8004094 <UART_SetConfig+0x118>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	0119      	lsls	r1, r3, #4
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009a      	lsls	r2, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	fbb2 f2f3 	udiv	r2, r2, r3
 8004028:	4b1a      	ldr	r3, [pc, #104]	@ (8004094 <UART_SetConfig+0x118>)
 800402a:	fba3 0302 	umull	r0, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2064      	movs	r0, #100	@ 0x64
 8004032:	fb00 f303 	mul.w	r3, r0, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	3332      	adds	r3, #50	@ 0x32
 800403c:	4a15      	ldr	r2, [pc, #84]	@ (8004094 <UART_SetConfig+0x118>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004048:	4419      	add	r1, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009a      	lsls	r2, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <UART_SetConfig+0x118>)
 8004062:	fba3 0302 	umull	r0, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2064      	movs	r0, #100	@ 0x64
 800406a:	fb00 f303 	mul.w	r3, r0, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	@ 0x32
 8004074:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <UART_SetConfig+0x118>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	440a      	add	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40013800 	.word	0x40013800
 8004094:	51eb851f 	.word	0x51eb851f

08004098 <__NVIC_SetPriority>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db0a      	blt.n	80040c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	490c      	ldr	r1, [pc, #48]	@ (80040e4 <__NVIC_SetPriority+0x4c>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	440b      	add	r3, r1
 80040bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040c0:	e00a      	b.n	80040d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4908      	ldr	r1, [pc, #32]	@ (80040e8 <__NVIC_SetPriority+0x50>)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3b04      	subs	r3, #4
 80040d0:	0112      	lsls	r2, r2, #4
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	761a      	strb	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80040f0:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <SysTick_Handler+0x1c>)
 80040f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040f4:	f001 ff26 	bl	8005f44 <xTaskGetSchedulerState>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040fe:	f002 fccb 	bl	8006a98 <xPortSysTickHandler>
  }
}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	e000e010 	.word	0xe000e010

0800410c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004110:	2100      	movs	r1, #0
 8004112:	f06f 0004 	mvn.w	r0, #4
 8004116:	f7ff ffbf 	bl	8004098 <__NVIC_SetPriority>
#endif
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004126:	f3ef 8305 	mrs	r3, IPSR
 800412a:	603b      	str	r3, [r7, #0]
  return(result);
 800412c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004132:	f06f 0305 	mvn.w	r3, #5
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e00c      	b.n	8004154 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800413a:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <osKernelInitialize+0x40>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d105      	bne.n	800414e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004142:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <osKernelInitialize+0x40>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004148:	2300      	movs	r3, #0
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	e002      	b.n	8004154 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004154:	687b      	ldr	r3, [r7, #4]
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	20000280 	.word	0x20000280

08004164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800416a:	f3ef 8305 	mrs	r3, IPSR
 800416e:	603b      	str	r3, [r7, #0]
  return(result);
 8004170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004176:	f06f 0305 	mvn.w	r3, #5
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	e010      	b.n	80041a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <osKernelStart+0x48>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d109      	bne.n	800419a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004186:	f7ff ffc1 	bl	800410c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <osKernelStart+0x48>)
 800418c:	2202      	movs	r2, #2
 800418e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004190:	f001 fa78 	bl	8005684 <vTaskStartScheduler>
      stat = osOK;
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	e002      	b.n	80041a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041a0:	687b      	ldr	r3, [r7, #4]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000280 	.word	0x20000280

080041b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	@ 0x38
 80041b4:	af04      	add	r7, sp, #16
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041c0:	f3ef 8305 	mrs	r3, IPSR
 80041c4:	617b      	str	r3, [r7, #20]
  return(result);
 80041c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d17e      	bne.n	80042ca <osThreadNew+0x11a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d07b      	beq.n	80042ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041d6:	2318      	movs	r3, #24
 80041d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d045      	beq.n	8004276 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <osThreadNew+0x48>
        name = attr->name;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <osThreadNew+0x6e>
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b38      	cmp	r3, #56	@ 0x38
 8004210:	d805      	bhi.n	800421e <osThreadNew+0x6e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <osThreadNew+0x72>
        return (NULL);
 800421e:	2300      	movs	r3, #0
 8004220:	e054      	b.n	80042cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <osThreadNew+0xa8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004240:	d90a      	bls.n	8004258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <osThreadNew+0xa8>
        mem = 1;
 8004252:	2301      	movs	r3, #1
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e010      	b.n	800427a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10c      	bne.n	800427a <osThreadNew+0xca>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <osThreadNew+0xca>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <osThreadNew+0xca>
          mem = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	e001      	b.n	800427a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d110      	bne.n	80042a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004288:	9202      	str	r2, [sp, #8]
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f001 f800 	bl	800529c <xTaskCreateStatic>
 800429c:	4603      	mov	r3, r0
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e013      	b.n	80042ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d110      	bne.n	80042ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 f84e 	bl	800535c <xTaskCreate>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <osThreadNew+0x11a>
            hTask = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ca:	693b      	ldr	r3, [r7, #16]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	@ 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042dc:	f3ef 8305 	mrs	r3, IPSR
 80042e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <osDelay+0x1c>
    stat = osErrorISR;
 80042e8:	f06f 0305 	mvn.w	r3, #5
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e007      	b.n	8004300 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <osDelay+0x2c>
      vTaskDelay(ticks);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 f98c 	bl	8005618 <vTaskDelay>
    }
  }

  return (stat);
 8004300:	68fb      	ldr	r3, [r7, #12]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800430a:	b580      	push	{r7, lr}
 800430c:	b08a      	sub	sp, #40	@ 0x28
 800430e:	af02      	add	r7, sp, #8
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800431a:	f3ef 8305 	mrs	r3, IPSR
 800431e:	613b      	str	r3, [r7, #16]
  return(result);
 8004320:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004322:	2b00      	cmp	r3, #0
 8004324:	d15f      	bne.n	80043e6 <osMessageQueueNew+0xdc>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05c      	beq.n	80043e6 <osMessageQueueNew+0xdc>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d059      	beq.n	80043e6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d029      	beq.n	8004392 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <osMessageQueueNew+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b4f      	cmp	r3, #79	@ 0x4f
 800434c:	d90e      	bls.n	800436c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <osMessageQueueNew+0x62>
        mem = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e014      	b.n	8004396 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d110      	bne.n	8004396 <osMessageQueueNew+0x8c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10c      	bne.n	8004396 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d104      	bne.n	8004396 <osMessageQueueNew+0x8c>
          mem = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	e001      	b.n	8004396 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10b      	bne.n	80043b4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2100      	movs	r1, #0
 80043a6:	9100      	str	r1, [sp, #0]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fa2a 	bl	8004804 <xQueueGenericCreateStatic>
 80043b0:	61f8      	str	r0, [r7, #28]
 80043b2:	e008      	b.n	80043c6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80043ba:	2200      	movs	r2, #0
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fa9d 	bl	80048fe <xQueueGenericCreate>
 80043c4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00c      	beq.n	80043e6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <osMessageQueueNew+0xd0>
        name = attr->name;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e001      	b.n	80043de <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	69f8      	ldr	r0, [r7, #28]
 80043e2:	f000 feff 	bl	80051e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80043e6:	69fb      	ldr	r3, [r7, #28]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004408:	f3ef 8305 	mrs	r3, IPSR
 800440c:	617b      	str	r3, [r7, #20]
  return(result);
 800440e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004410:	2b00      	cmp	r3, #0
 8004412:	d028      	beq.n	8004466 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <osMessageQueuePut+0x36>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <osMessageQueuePut+0x36>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004426:	f06f 0303 	mvn.w	r3, #3
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e038      	b.n	80044a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004432:	f107 0210 	add.w	r2, r7, #16
 8004436:	2300      	movs	r3, #0
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	69b8      	ldr	r0, [r7, #24]
 800443c:	f000 fbc0 	bl	8004bc0 <xQueueGenericSendFromISR>
 8004440:	4603      	mov	r3, r0
 8004442:	2b01      	cmp	r3, #1
 8004444:	d003      	beq.n	800444e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004446:	f06f 0302 	mvn.w	r3, #2
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e028      	b.n	80044a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d025      	beq.n	80044a0 <osMessageQueuePut+0xb0>
 8004454:	4b15      	ldr	r3, [pc, #84]	@ (80044ac <osMessageQueuePut+0xbc>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	e01c      	b.n	80044a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <osMessageQueuePut+0x82>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004472:	f06f 0303 	mvn.w	r3, #3
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e012      	b.n	80044a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800447a:	2300      	movs	r3, #0
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	69b8      	ldr	r0, [r7, #24]
 8004482:	f000 fa9b 	bl	80049bc <xQueueGenericSend>
 8004486:	4603      	mov	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d009      	beq.n	80044a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004492:	f06f 0301 	mvn.w	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e002      	b.n	80044a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800449a:	f06f 0302 	mvn.w	r3, #2
 800449e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80044a0:	69fb      	ldr	r3, [r7, #28]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c6:	f3ef 8305 	mrs	r3, IPSR
 80044ca:	617b      	str	r3, [r7, #20]
  return(result);
 80044cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <osMessageQueueGet+0x34>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <osMessageQueueGet+0x34>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80044e4:	f06f 0303 	mvn.w	r3, #3
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e037      	b.n	800455c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80044f0:	f107 0310 	add.w	r3, r7, #16
 80044f4:	461a      	mov	r2, r3
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	69b8      	ldr	r0, [r7, #24]
 80044fa:	f000 fce1 	bl	8004ec0 <xQueueReceiveFromISR>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b01      	cmp	r3, #1
 8004502:	d003      	beq.n	800450c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004504:	f06f 0302 	mvn.w	r3, #2
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e027      	b.n	800455c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d024      	beq.n	800455c <osMessageQueueGet+0xac>
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <osMessageQueueGet+0xb8>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	e01b      	b.n	800455c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <osMessageQueueGet+0x80>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004530:	f06f 0303 	mvn.w	r3, #3
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e011      	b.n	800455c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	69b8      	ldr	r0, [r7, #24]
 800453e:	f000 fbdd 	bl	8004cfc <xQueueReceive>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	d009      	beq.n	800455c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800454e:	f06f 0301 	mvn.w	r3, #1
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e002      	b.n	800455c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004556:	f06f 0302 	mvn.w	r3, #2
 800455a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800455c:	69fb      	ldr	r3, [r7, #28]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a06      	ldr	r2, [pc, #24]	@ (8004594 <vApplicationGetIdleTaskMemory+0x28>)
 800457c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a05      	ldr	r2, [pc, #20]	@ (8004598 <vApplicationGetIdleTaskMemory+0x2c>)
 8004582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2280      	movs	r2, #128	@ 0x80
 8004588:	601a      	str	r2, [r3, #0]
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	20000284 	.word	0x20000284
 8004598:	2000032c 	.word	0x2000032c

0800459c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a07      	ldr	r2, [pc, #28]	@ (80045c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80045ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4a06      	ldr	r2, [pc, #24]	@ (80045cc <vApplicationGetTimerTaskMemory+0x30>)
 80045b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	2000052c 	.word	0x2000052c
 80045cc:	200005d4 	.word	0x200005d4

080045d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f103 0208 	add.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f103 0208 	add.w	r2, r3, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f103 0208 	add.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d103      	bne.n	800468c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e00c      	b.n	80046a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3308      	adds	r3, #8
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e002      	b.n	800469a <vListInsert+0x2e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d2f6      	bcs.n	8004694 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6892      	ldr	r2, [r2, #8]
 80046f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d103      	bne.n	8004710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
	...

08004730 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800475c:	f002 f91e 	bl	800699c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	68f9      	ldr	r1, [r7, #12]
 800476a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	441a      	add	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	3b01      	subs	r3, #1
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	441a      	add	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	22ff      	movs	r2, #255	@ 0xff
 80047a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	22ff      	movs	r2, #255	@ 0xff
 80047a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d114      	bne.n	80047dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01a      	beq.n	80047f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3310      	adds	r3, #16
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 f9fa 	bl	8005bb8 <xTaskRemoveFromEventList>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d012      	beq.n	80047f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <xQueueGenericReset+0xd0>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	e009      	b.n	80047f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3310      	adds	r3, #16
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fef5 	bl	80045d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3324      	adds	r3, #36	@ 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fef0 	bl	80045d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047f0:	f002 f904 	bl	80069fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047f4:	2301      	movs	r3, #1
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	@ 0x38
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800482a:	bf00      	nop
 800482c:	bf00      	nop
 800482e:	e7fd      	b.n	800482c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	e7fd      	b.n	800484a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <xQueueGenericCreateStatic+0x56>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <xQueueGenericCreateStatic+0x5a>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <xQueueGenericCreateStatic+0x5c>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	623b      	str	r3, [r7, #32]
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <xQueueGenericCreateStatic+0x84>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <xQueueGenericCreateStatic+0x88>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <xQueueGenericCreateStatic+0x8a>
 800488c:	2300      	movs	r3, #0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61fb      	str	r3, [r7, #28]
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	e7fd      	b.n	80048a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048aa:	2350      	movs	r3, #80	@ 0x50
 80048ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b50      	cmp	r3, #80	@ 0x50
 80048b2:	d00b      	beq.n	80048cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	61bb      	str	r3, [r7, #24]
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80048d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f840 	bl	8004974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3730      	adds	r7, #48	@ 0x30
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b08a      	sub	sp, #40	@ 0x28
 8004902:	af02      	add	r7, sp, #8
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	4613      	mov	r3, r2
 800490a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	613b      	str	r3, [r7, #16]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3350      	adds	r3, #80	@ 0x50
 8004938:	4618      	mov	r0, r3
 800493a:	f002 f931 	bl	8006ba0 <pvPortMalloc>
 800493e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	3350      	adds	r3, #80	@ 0x50
 800494e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004958:	79fa      	ldrb	r2, [r7, #7]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4613      	mov	r3, r2
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f805 	bl	8004974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800496a:	69bb      	ldr	r3, [r7, #24]
	}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e002      	b.n	8004996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049a2:	2101      	movs	r1, #1
 80049a4:	69b8      	ldr	r0, [r7, #24]
 80049a6:	f7ff fec3 	bl	8004730 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08e      	sub	sp, #56	@ 0x38
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <xQueueGenericSend+0x34>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSend+0x42>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <xQueueGenericSend+0x46>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <xQueueGenericSend+0x48>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xQueueGenericSend+0x64>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <xQueueGenericSend+0x72>
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <xQueueGenericSend+0x76>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueGenericSend+0x78>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xQueueGenericSend+0x94>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	623b      	str	r3, [r7, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a50:	f001 fa78 	bl	8005f44 <xTaskGetSchedulerState>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <xQueueGenericSend+0xa4>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <xQueueGenericSend+0xa8>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <xQueueGenericSend+0xaa>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <xQueueGenericSend+0xc6>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61fb      	str	r3, [r7, #28]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a82:	f001 ff8b 	bl	800699c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <xQueueGenericSend+0xdc>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d129      	bne.n	8004aec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a9e:	f000 fa91 	bl	8004fc4 <prvCopyDataToQueue>
 8004aa2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d010      	beq.n	8004ace <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	3324      	adds	r3, #36	@ 0x24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f881 	bl	8005bb8 <xTaskRemoveFromEventList>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004abc:	4b3f      	ldr	r3, [pc, #252]	@ (8004bbc <xQueueGenericSend+0x200>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	e00a      	b.n	8004ae4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ad4:	4b39      	ldr	r3, [pc, #228]	@ (8004bbc <xQueueGenericSend+0x200>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ae4:	f001 ff8a 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e063      	b.n	8004bb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004af2:	f001 ff83 	bl	80069fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e05c      	b.n	8004bb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 f8bb 	bl	8005c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b0e:	f001 ff75 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b12:	f000 fe27 	bl	8005764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b16:	f001 ff41 	bl	800699c <vPortEnterCritical>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d103      	bne.n	8004b30 <xQueueGenericSend+0x174>
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d103      	bne.n	8004b46 <xQueueGenericSend+0x18a>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b46:	f001 ff59 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b4a:	1d3a      	adds	r2, r7, #4
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f8aa 	bl	8005cac <xTaskCheckForTimeOut>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d124      	bne.n	8004ba8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b60:	f000 fb28 	bl	80051b4 <prvIsQueueFull>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d018      	beq.n	8004b9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 ffce 	bl	8005b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b7a:	f000 fab3 	bl	80050e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b7e:	f000 fdff 	bl	8005780 <xTaskResumeAll>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f af7c 	bne.w	8004a82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <xQueueGenericSend+0x200>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	e772      	b.n	8004a82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b9e:	f000 faa1 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ba2:	f000 fded 	bl	8005780 <xTaskResumeAll>
 8004ba6:	e76c      	b.n	8004a82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004baa:	f000 fa9b 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bae:	f000 fde7 	bl	8005780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3738      	adds	r7, #56	@ 0x38
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b090      	sub	sp, #64	@ 0x40
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <xQueueGenericSendFromISR+0x3e>
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <xQueueGenericSendFromISR+0x42>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <xQueueGenericSendFromISR+0x44>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	e7fd      	b.n	8004c1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d103      	bne.n	8004c2e <xQueueGenericSendFromISR+0x6e>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <xQueueGenericSendFromISR+0x72>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <xQueueGenericSendFromISR+0x74>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c50:	f001 ff66 	bl	8006b20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c54:	f3ef 8211 	mrs	r2, BASEPRI
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	61fa      	str	r2, [r7, #28]
 8004c6a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <xQueueGenericSendFromISR+0xc2>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d12f      	bne.n	8004ce2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c98:	f000 f994 	bl	8004fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d112      	bne.n	8004ccc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb0:	3324      	adds	r3, #36	@ 0x24
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 ff80 	bl	8005bb8 <xTaskRemoveFromEventList>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e007      	b.n	8004cdc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	b25a      	sxtb	r2, r3
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ce0:	e001      	b.n	8004ce6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3740      	adds	r7, #64	@ 0x40
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08c      	sub	sp, #48	@ 0x30
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <xQueueReceive+0x32>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	623b      	str	r3, [r7, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <xQueueReceive+0x40>
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <xQueueReceive+0x44>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <xQueueReceive+0x46>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <xQueueReceive+0x62>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	61fb      	str	r3, [r7, #28]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d5e:	f001 f8f1 	bl	8005f44 <xTaskGetSchedulerState>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <xQueueReceive+0x72>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <xQueueReceive+0x76>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueReceive+0x78>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <xQueueReceive+0x94>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	61bb      	str	r3, [r7, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d90:	f001 fe04 	bl	800699c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01f      	beq.n	8004de0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da4:	f000 f978 	bl	8005098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	1e5a      	subs	r2, r3, #1
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00f      	beq.n	8004dd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	3310      	adds	r3, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fefb 	bl	8005bb8 <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dc8:	4b3c      	ldr	r3, [pc, #240]	@ (8004ebc <xQueueReceive+0x1c0>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dd8:	f001 fe10 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e069      	b.n	8004eb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004de6:	f001 fe09 	bl	80069fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e062      	b.n	8004eb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004df4:	f107 0310 	add.w	r3, r7, #16
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 ff41 	bl	8005c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e02:	f001 fdfb 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e06:	f000 fcad 	bl	8005764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e0a:	f001 fdc7 	bl	800699c <vPortEnterCritical>
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e14:	b25b      	sxtb	r3, r3
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d103      	bne.n	8004e24 <xQueueReceive+0x128>
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e2a:	b25b      	sxtb	r3, r3
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d103      	bne.n	8004e3a <xQueueReceive+0x13e>
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e3a:	f001 fddf 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e3e:	1d3a      	adds	r2, r7, #4
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 ff30 	bl	8005cac <xTaskCheckForTimeOut>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d123      	bne.n	8004e9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e54:	f000 f998 	bl	8005188 <prvIsQueueEmpty>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	3324      	adds	r3, #36	@ 0x24
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fe54 	bl	8005b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6e:	f000 f939 	bl	80050e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e72:	f000 fc85 	bl	8005780 <xTaskResumeAll>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d189      	bne.n	8004d90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <xQueueReceive+0x1c0>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	e780      	b.n	8004d90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e90:	f000 f928 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e94:	f000 fc74 	bl	8005780 <xTaskResumeAll>
 8004e98:	e77a      	b.n	8004d90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e9c:	f000 f922 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ea0:	f000 fc6e 	bl	8005780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea6:	f000 f96f 	bl	8005188 <prvIsQueueEmpty>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f43f af6f 	beq.w	8004d90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3730      	adds	r7, #48	@ 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08e      	sub	sp, #56	@ 0x38
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	623b      	str	r3, [r7, #32]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d103      	bne.n	8004efc <xQueueReceiveFromISR+0x3c>
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <xQueueReceiveFromISR+0x40>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <xQueueReceiveFromISR+0x42>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	61fb      	str	r3, [r7, #28]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f1e:	f001 fdff 	bl	8006b20 <vPortValidateInterruptPriority>
	__asm volatile
 8004f22:	f3ef 8211 	mrs	r2, BASEPRI
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61ba      	str	r2, [r7, #24]
 8004f38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02f      	beq.n	8004faa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f58:	f000 f89e 	bl	8005098 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	1e5a      	subs	r2, r3, #1
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d112      	bne.n	8004f94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	3310      	adds	r3, #16
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fe1c 	bl	8005bb8 <xTaskRemoveFromEventList>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00e      	beq.n	8004fa4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e007      	b.n	8004fa4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f98:	3301      	adds	r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	b25a      	sxtb	r2, r3
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa8:	e001      	b.n	8004fae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f383 8811 	msr	BASEPRI, r3
}
 8004fb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3738      	adds	r7, #56	@ 0x38
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d14d      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 ffc6 	bl	8005f80 <xTaskPriorityDisinherit>
 8004ff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	e043      	b.n	8005086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d119      	bne.n	8005038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6858      	ldr	r0, [r3, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	f002 fa95 	bl	800753e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	429a      	cmp	r2, r3
 800502c:	d32b      	bcc.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e026      	b.n	8005086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68d8      	ldr	r0, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	461a      	mov	r2, r3
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	f002 fa7b 	bl	800753e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	425b      	negs	r3, r3
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d207      	bcs.n	8005074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	425b      	negs	r3, r3
 800506e:	441a      	add	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d105      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3b01      	subs	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d303      	bcc.n	80050cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	461a      	mov	r2, r3
 80050d6:	6838      	ldr	r0, [r7, #0]
 80050d8:	f002 fa31 	bl	800753e <memcpy>
	}
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050ec:	f001 fc56 	bl	800699c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f8:	e011      	b.n	800511e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3324      	adds	r3, #36	@ 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fd56 	bl	8005bb8 <xTaskRemoveFromEventList>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005112:	f000 fe2f 	bl	8005d74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3b01      	subs	r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	dce9      	bgt.n	80050fa <prvUnlockQueue+0x16>
 8005126:	e000      	b.n	800512a <prvUnlockQueue+0x46>
					break;
 8005128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	22ff      	movs	r2, #255	@ 0xff
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005132:	f001 fc63 	bl	80069fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005136:	f001 fc31 	bl	800699c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005142:	e011      	b.n	8005168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d012      	beq.n	8005172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3310      	adds	r3, #16
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fd31 	bl	8005bb8 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800515c:	f000 fe0a 	bl	8005d74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	3b01      	subs	r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800516c:	2b00      	cmp	r3, #0
 800516e:	dce9      	bgt.n	8005144 <prvUnlockQueue+0x60>
 8005170:	e000      	b.n	8005174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	22ff      	movs	r2, #255	@ 0xff
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800517c:	f001 fc3e 	bl	80069fc <vPortExitCritical>
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005190:	f001 fc04 	bl	800699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e001      	b.n	80051a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f001 fc29 	bl	80069fc <vPortExitCritical>

	return xReturn;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051bc:	f001 fbee 	bl	800699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d102      	bne.n	80051d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e001      	b.n	80051d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f001 fc11 	bl	80069fc <vPortExitCritical>

	return xReturn;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e014      	b.n	800521e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005230 <vQueueAddToRegistry+0x4c>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005200:	490b      	ldr	r1, [pc, #44]	@ (8005230 <vQueueAddToRegistry+0x4c>)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800520a:	4a09      	ldr	r2, [pc, #36]	@ (8005230 <vQueueAddToRegistry+0x4c>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005216:	e006      	b.n	8005226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b07      	cmp	r3, #7
 8005222:	d9e7      	bls.n	80051f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr
 8005230:	200009d4 	.word	0x200009d4

08005234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005244:	f001 fbaa 	bl	800699c <vPortEnterCritical>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800524e:	b25b      	sxtb	r3, r3
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d103      	bne.n	800525e <vQueueWaitForMessageRestricted+0x2a>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005264:	b25b      	sxtb	r3, r3
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d103      	bne.n	8005274 <vQueueWaitForMessageRestricted+0x40>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005274:	f001 fbc2 	bl	80069fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	3324      	adds	r3, #36	@ 0x24
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fc69 	bl	8005b60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f7ff ff28 	bl	80050e4 <prvUnlockQueue>
	}
 8005294:	bf00      	nop
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	@ 0x38
 80052a0:	af04      	add	r7, sp, #16
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	623b      	str	r3, [r7, #32]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	61fb      	str	r3, [r7, #28]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052e6:	23a8      	movs	r3, #168	@ 0xa8
 80052e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2ba8      	cmp	r3, #168	@ 0xa8
 80052ee:	d00b      	beq.n	8005308 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61bb      	str	r3, [r7, #24]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005308:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01e      	beq.n	800534e <xTaskCreateStatic+0xb2>
 8005310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01b      	beq.n	800534e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	2202      	movs	r2, #2
 8005324:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005328:	2300      	movs	r3, #0
 800532a:	9303      	str	r3, [sp, #12]
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	9302      	str	r3, [sp, #8]
 8005330:	f107 0314 	add.w	r3, r7, #20
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f851 	bl	80053e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005348:	f000 f8f6 	bl	8005538 <prvAddNewTaskToReadyList>
 800534c:	e001      	b.n	8005352 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005352:	697b      	ldr	r3, [r7, #20]
	}
 8005354:	4618      	mov	r0, r3
 8005356:	3728      	adds	r7, #40	@ 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4618      	mov	r0, r3
 8005372:	f001 fc15 	bl	8006ba0 <pvPortMalloc>
 8005376:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00e      	beq.n	800539c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800537e:	20a8      	movs	r0, #168	@ 0xa8
 8005380:	f001 fc0e 	bl	8006ba0 <pvPortMalloc>
 8005384:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	631a      	str	r2, [r3, #48]	@ 0x30
 8005392:	e005      	b.n	80053a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005394:	6978      	ldr	r0, [r7, #20]
 8005396:	f001 fcd1 	bl	8006d3c <vPortFree>
 800539a:	e001      	b.n	80053a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d017      	beq.n	80053d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	2300      	movs	r3, #0
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f80f 	bl	80053e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ca:	69f8      	ldr	r0, [r7, #28]
 80053cc:	f000 f8b4 	bl	8005538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053d0:	2301      	movs	r3, #1
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e002      	b.n	80053dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053dc:	69bb      	ldr	r3, [r7, #24]
	}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	461a      	mov	r2, r3
 8005400:	21a5      	movs	r1, #165	@ 0xa5
 8005402:	f001 ffc3 	bl	800738c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005410:	3b01      	subs	r3, #1
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	617b      	str	r3, [r7, #20]
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	e7fd      	b.n	800543e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01f      	beq.n	8005488 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	e012      	b.n	8005474 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	7819      	ldrb	r1, [r3, #0]
 8005456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	3334      	adds	r3, #52	@ 0x34
 800545e:	460a      	mov	r2, r1
 8005460:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d9e9      	bls.n	800544e <prvInitialiseNewTask+0x66>
 800547a:	e000      	b.n	800547e <prvInitialiseNewTask+0x96>
			{
				break;
 800547c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005486:	e003      	b.n	8005490 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	2b37      	cmp	r3, #55	@ 0x37
 8005494:	d901      	bls.n	800549a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005496:	2337      	movs	r3, #55	@ 0x37
 8005498:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800549e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	2200      	movs	r2, #0
 80054aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	3304      	adds	r3, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f8ac 	bl	800460e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	3318      	adds	r3, #24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff f8a7 	bl	800460e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	3354      	adds	r3, #84	@ 0x54
 80054ea:	224c      	movs	r2, #76	@ 0x4c
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 ff4c 	bl	800738c <memset>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	4a0d      	ldr	r2, [pc, #52]	@ (800552c <prvInitialiseNewTask+0x144>)
 80054f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005530 <prvInitialiseNewTask+0x148>)
 80054fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	4a0c      	ldr	r2, [pc, #48]	@ (8005534 <prvInitialiseNewTask+0x14c>)
 8005504:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	69b8      	ldr	r0, [r7, #24]
 800550c:	f001 f954 	bl	80067b8 <pxPortInitialiseStack>
 8005510:	4602      	mov	r2, r0
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005522:	bf00      	nop
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20001c68 	.word	0x20001c68
 8005530:	20001cd0 	.word	0x20001cd0
 8005534:	20001d38 	.word	0x20001d38

08005538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005540:	f001 fa2c 	bl	800699c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005544:	4b2d      	ldr	r3, [pc, #180]	@ (80055fc <prvAddNewTaskToReadyList+0xc4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <prvAddNewTaskToReadyList+0xc4>)
 800554c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800554e:	4b2c      	ldr	r3, [pc, #176]	@ (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005556:	4a2a      	ldr	r2, [pc, #168]	@ (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800555c:	4b27      	ldr	r3, [pc, #156]	@ (80055fc <prvAddNewTaskToReadyList+0xc4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d110      	bne.n	8005586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005564:	f000 fc2a 	bl	8005dbc <prvInitialiseTaskLists>
 8005568:	e00d      	b.n	8005586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800556a:	4b26      	ldr	r3, [pc, #152]	@ (8005604 <prvAddNewTaskToReadyList+0xcc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005572:	4b23      	ldr	r3, [pc, #140]	@ (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d802      	bhi.n	8005586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005580:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005586:	4b20      	ldr	r3, [pc, #128]	@ (8005608 <prvAddNewTaskToReadyList+0xd0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a1e      	ldr	r2, [pc, #120]	@ (8005608 <prvAddNewTaskToReadyList+0xd0>)
 800558e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005590:	4b1d      	ldr	r3, [pc, #116]	@ (8005608 <prvAddNewTaskToReadyList+0xd0>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559c:	4b1b      	ldr	r3, [pc, #108]	@ (800560c <prvAddNewTaskToReadyList+0xd4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d903      	bls.n	80055ac <prvAddNewTaskToReadyList+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	4a18      	ldr	r2, [pc, #96]	@ (800560c <prvAddNewTaskToReadyList+0xd4>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <prvAddNewTaskToReadyList+0xd8>)
 80055ba:	441a      	add	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7ff f82f 	bl	8004626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055c8:	f001 fa18 	bl	80069fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <prvAddNewTaskToReadyList+0xcc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <prvAddNewTaskToReadyList+0xc8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d207      	bcs.n	80055f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <prvAddNewTaskToReadyList+0xdc>)
 80055e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000ee8 	.word	0x20000ee8
 8005600:	20000a14 	.word	0x20000a14
 8005604:	20000ef4 	.word	0x20000ef4
 8005608:	20000f04 	.word	0x20000f04
 800560c:	20000ef0 	.word	0x20000ef0
 8005610:	20000a18 	.word	0x20000a18
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800562a:	4b14      	ldr	r3, [pc, #80]	@ (800567c <vTaskDelay+0x64>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <vTaskDelay+0x32>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	60bb      	str	r3, [r7, #8]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800564a:	f000 f88b 	bl	8005764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800564e:	2100      	movs	r1, #0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fd05 	bl	8006060 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005656:	f000 f893 	bl	8005780 <xTaskResumeAll>
 800565a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005662:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <vTaskDelay+0x68>)
 8005664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000f10 	.word	0x20000f10
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	@ 0x28
 8005688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005692:	463a      	mov	r2, r7
 8005694:	1d39      	adds	r1, r7, #4
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe ff66 	bl	800456c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	9202      	str	r2, [sp, #8]
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	460a      	mov	r2, r1
 80056b2:	4924      	ldr	r1, [pc, #144]	@ (8005744 <vTaskStartScheduler+0xc0>)
 80056b4:	4824      	ldr	r0, [pc, #144]	@ (8005748 <vTaskStartScheduler+0xc4>)
 80056b6:	f7ff fdf1 	bl	800529c <xTaskCreateStatic>
 80056ba:	4603      	mov	r3, r0
 80056bc:	4a23      	ldr	r2, [pc, #140]	@ (800574c <vTaskStartScheduler+0xc8>)
 80056be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056c0:	4b22      	ldr	r3, [pc, #136]	@ (800574c <vTaskStartScheduler+0xc8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e001      	b.n	80056d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d102      	bne.n	80056de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056d8:	f000 fd16 	bl	8006108 <xTimerCreateTimerTask>
 80056dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d11b      	bne.n	800571c <vTaskStartScheduler+0x98>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	613b      	str	r3, [r7, #16]
}
 80056f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056f8:	4b15      	ldr	r3, [pc, #84]	@ (8005750 <vTaskStartScheduler+0xcc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3354      	adds	r3, #84	@ 0x54
 80056fe:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <vTaskStartScheduler+0xd0>)
 8005700:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005702:	4b15      	ldr	r3, [pc, #84]	@ (8005758 <vTaskStartScheduler+0xd4>)
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800570a:	4b14      	ldr	r3, [pc, #80]	@ (800575c <vTaskStartScheduler+0xd8>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005710:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <vTaskStartScheduler+0xdc>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005716:	f001 f8cf 	bl	80068b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800571a:	e00f      	b.n	800573c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d10b      	bne.n	800573c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	60fb      	str	r3, [r7, #12]
}
 8005736:	bf00      	nop
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <vTaskStartScheduler+0xb4>
}
 800573c:	bf00      	nop
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08008070 	.word	0x08008070
 8005748:	08005d8d 	.word	0x08005d8d
 800574c:	20000f0c 	.word	0x20000f0c
 8005750:	20000a14 	.word	0x20000a14
 8005754:	20000070 	.word	0x20000070
 8005758:	20000f08 	.word	0x20000f08
 800575c:	20000ef4 	.word	0x20000ef4
 8005760:	20000eec 	.word	0x20000eec

08005764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <vTaskSuspendAll+0x18>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	4a03      	ldr	r2, [pc, #12]	@ (800577c <vTaskSuspendAll+0x18>)
 8005770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000f10 	.word	0x20000f10

08005780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800578e:	4b42      	ldr	r3, [pc, #264]	@ (8005898 <xTaskResumeAll+0x118>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <xTaskResumeAll+0x2e>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	603b      	str	r3, [r7, #0]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057ae:	f001 f8f5 	bl	800699c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057b2:	4b39      	ldr	r3, [pc, #228]	@ (8005898 <xTaskResumeAll+0x118>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a37      	ldr	r2, [pc, #220]	@ (8005898 <xTaskResumeAll+0x118>)
 80057ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057bc:	4b36      	ldr	r3, [pc, #216]	@ (8005898 <xTaskResumeAll+0x118>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d162      	bne.n	800588a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057c4:	4b35      	ldr	r3, [pc, #212]	@ (800589c <xTaskResumeAll+0x11c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d05e      	beq.n	800588a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057cc:	e02f      	b.n	800582e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ce:	4b34      	ldr	r3, [pc, #208]	@ (80058a0 <xTaskResumeAll+0x120>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3318      	adds	r3, #24
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe ff7e 	bl	80046dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe ff79 	bl	80046dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ee:	4b2d      	ldr	r3, [pc, #180]	@ (80058a4 <xTaskResumeAll+0x124>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d903      	bls.n	80057fe <xTaskResumeAll+0x7e>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	4a2a      	ldr	r2, [pc, #168]	@ (80058a4 <xTaskResumeAll+0x124>)
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4a27      	ldr	r2, [pc, #156]	@ (80058a8 <xTaskResumeAll+0x128>)
 800580c:	441a      	add	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fe ff06 	bl	8004626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581e:	4b23      	ldr	r3, [pc, #140]	@ (80058ac <xTaskResumeAll+0x12c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005828:	4b21      	ldr	r3, [pc, #132]	@ (80058b0 <xTaskResumeAll+0x130>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800582e:	4b1c      	ldr	r3, [pc, #112]	@ (80058a0 <xTaskResumeAll+0x120>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1cb      	bne.n	80057ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800583c:	f000 fb62 	bl	8005f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005840:	4b1c      	ldr	r3, [pc, #112]	@ (80058b4 <xTaskResumeAll+0x134>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800584c:	f000 f844 	bl	80058d8 <xTaskIncrementTick>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005856:	4b16      	ldr	r3, [pc, #88]	@ (80058b0 <xTaskResumeAll+0x130>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3b01      	subs	r3, #1
 8005860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f1      	bne.n	800584c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005868:	4b12      	ldr	r3, [pc, #72]	@ (80058b4 <xTaskResumeAll+0x134>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800586e:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <xTaskResumeAll+0x130>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800587a:	4b0f      	ldr	r3, [pc, #60]	@ (80058b8 <xTaskResumeAll+0x138>)
 800587c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800588a:	f001 f8b7 	bl	80069fc <vPortExitCritical>

	return xAlreadyYielded;
 800588e:	68bb      	ldr	r3, [r7, #8]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000f10 	.word	0x20000f10
 800589c:	20000ee8 	.word	0x20000ee8
 80058a0:	20000ea8 	.word	0x20000ea8
 80058a4:	20000ef0 	.word	0x20000ef0
 80058a8:	20000a18 	.word	0x20000a18
 80058ac:	20000a14 	.word	0x20000a14
 80058b0:	20000efc 	.word	0x20000efc
 80058b4:	20000ef8 	.word	0x20000ef8
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058c2:	4b04      	ldr	r3, [pc, #16]	@ (80058d4 <xTaskGetTickCount+0x18>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058c8:	687b      	ldr	r3, [r7, #4]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	20000eec 	.word	0x20000eec

080058d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e2:	4b4f      	ldr	r3, [pc, #316]	@ (8005a20 <xTaskIncrementTick+0x148>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 8090 	bne.w	8005a0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058ec:	4b4d      	ldr	r3, [pc, #308]	@ (8005a24 <xTaskIncrementTick+0x14c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005a24 <xTaskIncrementTick+0x14c>)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d121      	bne.n	8005944 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005900:	4b49      	ldr	r3, [pc, #292]	@ (8005a28 <xTaskIncrementTick+0x150>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <xTaskIncrementTick+0x4a>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <xTaskIncrementTick+0x46>
 8005922:	4b41      	ldr	r3, [pc, #260]	@ (8005a28 <xTaskIncrementTick+0x150>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	4b40      	ldr	r3, [pc, #256]	@ (8005a2c <xTaskIncrementTick+0x154>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a3e      	ldr	r2, [pc, #248]	@ (8005a28 <xTaskIncrementTick+0x150>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	4a3e      	ldr	r2, [pc, #248]	@ (8005a2c <xTaskIncrementTick+0x154>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	4b3e      	ldr	r3, [pc, #248]	@ (8005a30 <xTaskIncrementTick+0x158>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a30 <xTaskIncrementTick+0x158>)
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	f000 fae0 	bl	8005f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005944:	4b3b      	ldr	r3, [pc, #236]	@ (8005a34 <xTaskIncrementTick+0x15c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	429a      	cmp	r2, r3
 800594c:	d349      	bcc.n	80059e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800594e:	4b36      	ldr	r3, [pc, #216]	@ (8005a28 <xTaskIncrementTick+0x150>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005958:	4b36      	ldr	r3, [pc, #216]	@ (8005a34 <xTaskIncrementTick+0x15c>)
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	601a      	str	r2, [r3, #0]
					break;
 8005960:	e03f      	b.n	80059e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005962:	4b31      	ldr	r3, [pc, #196]	@ (8005a28 <xTaskIncrementTick+0x150>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d203      	bcs.n	8005982 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800597a:	4a2e      	ldr	r2, [pc, #184]	@ (8005a34 <xTaskIncrementTick+0x15c>)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005980:	e02f      	b.n	80059e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	3304      	adds	r3, #4
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe fea8 	bl	80046dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	3318      	adds	r3, #24
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fe9f 	bl	80046dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	4b25      	ldr	r3, [pc, #148]	@ (8005a38 <xTaskIncrementTick+0x160>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d903      	bls.n	80059b2 <xTaskIncrementTick+0xda>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	4a22      	ldr	r2, [pc, #136]	@ (8005a38 <xTaskIncrementTick+0x160>)
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4a1f      	ldr	r2, [pc, #124]	@ (8005a3c <xTaskIncrementTick+0x164>)
 80059c0:	441a      	add	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f7fe fe2c 	bl	8004626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <xTaskIncrementTick+0x168>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3b8      	bcc.n	800594e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80059dc:	2301      	movs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e0:	e7b5      	b.n	800594e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059e2:	4b17      	ldr	r3, [pc, #92]	@ (8005a40 <xTaskIncrementTick+0x168>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e8:	4914      	ldr	r1, [pc, #80]	@ (8005a3c <xTaskIncrementTick+0x164>)
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d901      	bls.n	80059fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059fe:	4b11      	ldr	r3, [pc, #68]	@ (8005a44 <xTaskIncrementTick+0x16c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e004      	b.n	8005a16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a48 <xTaskIncrementTick+0x170>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	4a0d      	ldr	r2, [pc, #52]	@ (8005a48 <xTaskIncrementTick+0x170>)
 8005a14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a16:	697b      	ldr	r3, [r7, #20]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000f10 	.word	0x20000f10
 8005a24:	20000eec 	.word	0x20000eec
 8005a28:	20000ea0 	.word	0x20000ea0
 8005a2c:	20000ea4 	.word	0x20000ea4
 8005a30:	20000f00 	.word	0x20000f00
 8005a34:	20000f08 	.word	0x20000f08
 8005a38:	20000ef0 	.word	0x20000ef0
 8005a3c:	20000a18 	.word	0x20000a18
 8005a40:	20000a14 	.word	0x20000a14
 8005a44:	20000efc 	.word	0x20000efc
 8005a48:	20000ef8 	.word	0x20000ef8

08005a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a52:	4b2a      	ldr	r3, [pc, #168]	@ (8005afc <vTaskSwitchContext+0xb0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a5a:	4b29      	ldr	r3, [pc, #164]	@ (8005b00 <vTaskSwitchContext+0xb4>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a60:	e047      	b.n	8005af2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005a62:	4b27      	ldr	r3, [pc, #156]	@ (8005b00 <vTaskSwitchContext+0xb4>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a68:	4b26      	ldr	r3, [pc, #152]	@ (8005b04 <vTaskSwitchContext+0xb8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e011      	b.n	8005a94 <vTaskSwitchContext+0x48>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <vTaskSwitchContext+0x42>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	607b      	str	r3, [r7, #4]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <vTaskSwitchContext+0x3e>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	491c      	ldr	r1, [pc, #112]	@ (8005b08 <vTaskSwitchContext+0xbc>)
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0e3      	beq.n	8005a70 <vTaskSwitchContext+0x24>
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4a15      	ldr	r2, [pc, #84]	@ (8005b08 <vTaskSwitchContext+0xbc>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d104      	bne.n	8005ad8 <vTaskSwitchContext+0x8c>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	605a      	str	r2, [r3, #4]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	4a0b      	ldr	r2, [pc, #44]	@ (8005b0c <vTaskSwitchContext+0xc0>)
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4a08      	ldr	r2, [pc, #32]	@ (8005b04 <vTaskSwitchContext+0xb8>)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ae8:	4b08      	ldr	r3, [pc, #32]	@ (8005b0c <vTaskSwitchContext+0xc0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3354      	adds	r3, #84	@ 0x54
 8005aee:	4a08      	ldr	r2, [pc, #32]	@ (8005b10 <vTaskSwitchContext+0xc4>)
 8005af0:	6013      	str	r3, [r2, #0]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	20000f10 	.word	0x20000f10
 8005b00:	20000efc 	.word	0x20000efc
 8005b04:	20000ef0 	.word	0x20000ef0
 8005b08:	20000a18 	.word	0x20000a18
 8005b0c:	20000a14 	.word	0x20000a14
 8005b10:	20000070 	.word	0x20000070

08005b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	60fb      	str	r3, [r7, #12]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b3c:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <vTaskPlaceOnEventList+0x48>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3318      	adds	r3, #24
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fe fd91 	bl	800466c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	6838      	ldr	r0, [r7, #0]
 8005b4e:	f000 fa87 	bl	8006060 <prvAddCurrentTaskToDelayedList>
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000a14 	.word	0x20000a14

08005b60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	617b      	str	r3, [r7, #20]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4619      	mov	r1, r3
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7fe fd47 	bl	8004626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	68b8      	ldr	r0, [r7, #8]
 8005ba8:	f000 fa5a 	bl	8006060 <prvAddCurrentTaskToDelayedList>
	}
 8005bac:	bf00      	nop
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000a14 	.word	0x20000a14

08005bb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	60fb      	str	r3, [r7, #12]
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	e7fd      	b.n	8005be2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	3318      	adds	r3, #24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fd76 	bl	80046dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c68 <xTaskRemoveFromEventList+0xb0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11d      	bne.n	8005c34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fe fd6d 	bl	80046dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c06:	4b19      	ldr	r3, [pc, #100]	@ (8005c6c <xTaskRemoveFromEventList+0xb4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d903      	bls.n	8005c16 <xTaskRemoveFromEventList+0x5e>
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c12:	4a16      	ldr	r2, [pc, #88]	@ (8005c6c <xTaskRemoveFromEventList+0xb4>)
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4a13      	ldr	r2, [pc, #76]	@ (8005c70 <xTaskRemoveFromEventList+0xb8>)
 8005c24:	441a      	add	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f7fe fcfa 	bl	8004626 <vListInsertEnd>
 8005c32:	e005      	b.n	8005c40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	3318      	adds	r3, #24
 8005c38:	4619      	mov	r1, r3
 8005c3a:	480e      	ldr	r0, [pc, #56]	@ (8005c74 <xTaskRemoveFromEventList+0xbc>)
 8005c3c:	f7fe fcf3 	bl	8004626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c44:	4b0c      	ldr	r3, [pc, #48]	@ (8005c78 <xTaskRemoveFromEventList+0xc0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d905      	bls.n	8005c5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c52:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <xTaskRemoveFromEventList+0xc4>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e001      	b.n	8005c5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c5e:	697b      	ldr	r3, [r7, #20]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000f10 	.word	0x20000f10
 8005c6c:	20000ef0 	.word	0x20000ef0
 8005c70:	20000a18 	.word	0x20000a18
 8005c74:	20000ea8 	.word	0x20000ea8
 8005c78:	20000a14 	.word	0x20000a14
 8005c7c:	20000efc 	.word	0x20000efc

08005c80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c88:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <vTaskInternalSetTimeOutState+0x24>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c90:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <vTaskInternalSetTimeOutState+0x28>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	605a      	str	r2, [r3, #4]
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000f00 	.word	0x20000f00
 8005ca8:	20000eec 	.word	0x20000eec

08005cac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	613b      	str	r3, [r7, #16]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	60fb      	str	r3, [r7, #12]
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005cf2:	f000 fe53 	bl	800699c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <xTaskCheckForTimeOut+0xc0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d102      	bne.n	8005d16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e023      	b.n	8005d5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4b15      	ldr	r3, [pc, #84]	@ (8005d70 <xTaskCheckForTimeOut+0xc4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d007      	beq.n	8005d32 <xTaskCheckForTimeOut+0x86>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d302      	bcc.n	8005d32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e015      	b.n	8005d5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d20b      	bcs.n	8005d54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff ff99 	bl	8005c80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	e004      	b.n	8005d5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d5e:	f000 fe4d 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005d62:	69fb      	ldr	r3, [r7, #28]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20000eec 	.word	0x20000eec
 8005d70:	20000f00 	.word	0x20000f00

08005d74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d78:	4b03      	ldr	r3, [pc, #12]	@ (8005d88 <vTaskMissedYield+0x14>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20000efc 	.word	0x20000efc

08005d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d94:	f000 f852 	bl	8005e3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d98:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <prvIdleTask+0x28>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d9f9      	bls.n	8005d94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005da0:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <prvIdleTask+0x2c>)
 8005da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005db0:	e7f0      	b.n	8005d94 <prvIdleTask+0x8>
 8005db2:	bf00      	nop
 8005db4:	20000a18 	.word	0x20000a18
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	e00c      	b.n	8005de2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4a12      	ldr	r2, [pc, #72]	@ (8005e1c <prvInitialiseTaskLists+0x60>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe fbfa 	bl	80045d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3301      	adds	r3, #1
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b37      	cmp	r3, #55	@ 0x37
 8005de6:	d9ef      	bls.n	8005dc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005de8:	480d      	ldr	r0, [pc, #52]	@ (8005e20 <prvInitialiseTaskLists+0x64>)
 8005dea:	f7fe fbf1 	bl	80045d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dee:	480d      	ldr	r0, [pc, #52]	@ (8005e24 <prvInitialiseTaskLists+0x68>)
 8005df0:	f7fe fbee 	bl	80045d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005df4:	480c      	ldr	r0, [pc, #48]	@ (8005e28 <prvInitialiseTaskLists+0x6c>)
 8005df6:	f7fe fbeb 	bl	80045d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dfa:	480c      	ldr	r0, [pc, #48]	@ (8005e2c <prvInitialiseTaskLists+0x70>)
 8005dfc:	f7fe fbe8 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e00:	480b      	ldr	r0, [pc, #44]	@ (8005e30 <prvInitialiseTaskLists+0x74>)
 8005e02:	f7fe fbe5 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e06:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <prvInitialiseTaskLists+0x78>)
 8005e08:	4a05      	ldr	r2, [pc, #20]	@ (8005e20 <prvInitialiseTaskLists+0x64>)
 8005e0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <prvInitialiseTaskLists+0x7c>)
 8005e0e:	4a05      	ldr	r2, [pc, #20]	@ (8005e24 <prvInitialiseTaskLists+0x68>)
 8005e10:	601a      	str	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000a18 	.word	0x20000a18
 8005e20:	20000e78 	.word	0x20000e78
 8005e24:	20000e8c 	.word	0x20000e8c
 8005e28:	20000ea8 	.word	0x20000ea8
 8005e2c:	20000ebc 	.word	0x20000ebc
 8005e30:	20000ed4 	.word	0x20000ed4
 8005e34:	20000ea0 	.word	0x20000ea0
 8005e38:	20000ea4 	.word	0x20000ea4

08005e3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e42:	e019      	b.n	8005e78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e44:	f000 fdaa 	bl	800699c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e48:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <prvCheckTasksWaitingTermination+0x50>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fc41 	bl	80046dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <prvCheckTasksWaitingTermination+0x54>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4a0b      	ldr	r2, [pc, #44]	@ (8005e90 <prvCheckTasksWaitingTermination+0x54>)
 8005e62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e64:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <prvCheckTasksWaitingTermination+0x58>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <prvCheckTasksWaitingTermination+0x58>)
 8005e6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e6e:	f000 fdc5 	bl	80069fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f810 	bl	8005e98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e78:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <prvCheckTasksWaitingTermination+0x58>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e1      	bne.n	8005e44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000ebc 	.word	0x20000ebc
 8005e90:	20000ee8 	.word	0x20000ee8
 8005e94:	20000ed0 	.word	0x20000ed0

08005e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3354      	adds	r3, #84	@ 0x54
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fa89 	bl	80073bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d108      	bne.n	8005ec6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 ff3f 	bl	8006d3c <vPortFree>
				vPortFree( pxTCB );
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 ff3c 	bl	8006d3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ec4:	e019      	b.n	8005efa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d103      	bne.n	8005ed8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 ff33 	bl	8006d3c <vPortFree>
	}
 8005ed6:	e010      	b.n	8005efa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d00b      	beq.n	8005efa <prvDeleteTCB+0x62>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	60fb      	str	r3, [r7, #12]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <prvDeleteTCB+0x5e>
	}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f14:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f1c:	e008      	b.n	8005f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1e:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	@ (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f2e:	6013      	str	r3, [r2, #0]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000ea0 	.word	0x20000ea0
 8005f40:	20000f08 	.word	0x20000f08

08005f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <xTaskGetSchedulerState+0x34>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f52:	2301      	movs	r3, #1
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	e008      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f58:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <xTaskGetSchedulerState+0x38>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f60:	2302      	movs	r3, #2
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	e001      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f6a:	687b      	ldr	r3, [r7, #4]
	}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20000ef4 	.word	0x20000ef4
 8005f7c:	20000f10 	.word	0x20000f10

08005f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d058      	beq.n	8006048 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f96:	4b2f      	ldr	r3, [pc, #188]	@ (8006054 <xTaskPriorityDisinherit+0xd4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d00b      	beq.n	8005fb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60bb      	str	r3, [r7, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fdc:	1e5a      	subs	r2, r3, #1
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d02c      	beq.n	8006048 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d128      	bne.n	8006048 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fb6e 	bl	80046dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006018:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <xTaskPriorityDisinherit+0xd8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d903      	bls.n	8006028 <xTaskPriorityDisinherit+0xa8>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	4a0c      	ldr	r2, [pc, #48]	@ (8006058 <xTaskPriorityDisinherit+0xd8>)
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4a09      	ldr	r2, [pc, #36]	@ (800605c <xTaskPriorityDisinherit+0xdc>)
 8006036:	441a      	add	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	3304      	adds	r3, #4
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f7fe faf1 	bl	8004626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006048:	697b      	ldr	r3, [r7, #20]
	}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000a14 	.word	0x20000a14
 8006058:	20000ef0 	.word	0x20000ef0
 800605c:	20000a18 	.word	0x20000a18

08006060 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800606a:	4b21      	ldr	r3, [pc, #132]	@ (80060f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006070:	4b20      	ldr	r3, [pc, #128]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3304      	adds	r3, #4
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fb30 	bl	80046dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006082:	d10a      	bne.n	800609a <prvAddCurrentTaskToDelayedList+0x3a>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608a:	4b1a      	ldr	r3, [pc, #104]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4819      	ldr	r0, [pc, #100]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006094:	f7fe fac7 	bl	8004626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006098:	e026      	b.n	80060e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060a2:	4b14      	ldr	r3, [pc, #80]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d209      	bcs.n	80060c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b2:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b0f      	ldr	r3, [pc, #60]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f7fe fad4 	bl	800466c <vListInsert>
}
 80060c4:	e010      	b.n	80060e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006100 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b0a      	ldr	r3, [pc, #40]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe faca 	bl	800466c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d202      	bcs.n	80060e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060e2:	4a08      	ldr	r2, [pc, #32]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6013      	str	r3, [r2, #0]
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20000eec 	.word	0x20000eec
 80060f4:	20000a14 	.word	0x20000a14
 80060f8:	20000ed4 	.word	0x20000ed4
 80060fc:	20000ea4 	.word	0x20000ea4
 8006100:	20000ea0 	.word	0x20000ea0
 8006104:	20000f08 	.word	0x20000f08

08006108 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	@ 0x28
 800610c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006112:	f000 fb11 	bl	8006738 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006116:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <xTimerCreateTimerTask+0x84>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d021      	beq.n	8006162 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006126:	1d3a      	adds	r2, r7, #4
 8006128:	f107 0108 	add.w	r1, r7, #8
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fa33 	bl	800459c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	9202      	str	r2, [sp, #8]
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	2302      	movs	r3, #2
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	460a      	mov	r2, r1
 8006148:	4911      	ldr	r1, [pc, #68]	@ (8006190 <xTimerCreateTimerTask+0x88>)
 800614a:	4812      	ldr	r0, [pc, #72]	@ (8006194 <xTimerCreateTimerTask+0x8c>)
 800614c:	f7ff f8a6 	bl	800529c <xTaskCreateStatic>
 8006150:	4603      	mov	r3, r0
 8006152:	4a11      	ldr	r2, [pc, #68]	@ (8006198 <xTimerCreateTimerTask+0x90>)
 8006154:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006156:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <xTimerCreateTimerTask+0x90>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800615e:	2301      	movs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10b      	bne.n	8006180 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	613b      	str	r3, [r7, #16]
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	e7fd      	b.n	800617c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006180:	697b      	ldr	r3, [r7, #20]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000f44 	.word	0x20000f44
 8006190:	08008078 	.word	0x08008078
 8006194:	080062d5 	.word	0x080062d5
 8006198:	20000f48 	.word	0x20000f48

0800619c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	@ 0x28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <xTimerGenericCommand+0x30>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	623b      	str	r3, [r7, #32]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061cc:	4b19      	ldr	r3, [pc, #100]	@ (8006234 <xTimerGenericCommand+0x98>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02a      	beq.n	800622a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	dc18      	bgt.n	8006218 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061e6:	f7ff fead 	bl	8005f44 <xTaskGetSchedulerState>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d109      	bne.n	8006204 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061f0:	4b10      	ldr	r3, [pc, #64]	@ (8006234 <xTimerGenericCommand+0x98>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	f107 0110 	add.w	r1, r7, #16
 80061f8:	2300      	movs	r3, #0
 80061fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fc:	f7fe fbde 	bl	80049bc <xQueueGenericSend>
 8006200:	6278      	str	r0, [r7, #36]	@ 0x24
 8006202:	e012      	b.n	800622a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006204:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <xTimerGenericCommand+0x98>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	f107 0110 	add.w	r1, r7, #16
 800620c:	2300      	movs	r3, #0
 800620e:	2200      	movs	r2, #0
 8006210:	f7fe fbd4 	bl	80049bc <xQueueGenericSend>
 8006214:	6278      	str	r0, [r7, #36]	@ 0x24
 8006216:	e008      	b.n	800622a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006218:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <xTimerGenericCommand+0x98>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	f107 0110 	add.w	r1, r7, #16
 8006220:	2300      	movs	r3, #0
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	f7fe fccc 	bl	8004bc0 <xQueueGenericSendFromISR>
 8006228:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800622c:	4618      	mov	r0, r3
 800622e:	3728      	adds	r7, #40	@ 0x28
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000f44 	.word	0x20000f44

08006238 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006242:	4b23      	ldr	r3, [pc, #140]	@ (80062d0 <prvProcessExpiredTimer+0x98>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	3304      	adds	r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fa43 	bl	80046dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d023      	beq.n	80062ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	18d1      	adds	r1, r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	6978      	ldr	r0, [r7, #20]
 8006272:	f000 f8d3 	bl	800641c <prvInsertTimerInActiveList>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d020      	beq.n	80062be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	6978      	ldr	r0, [r7, #20]
 8006288:	f7ff ff88 	bl	800619c <xTimerGenericCommand>
 800628c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d114      	bne.n	80062be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	60fb      	str	r3, [r7, #12]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	6978      	ldr	r0, [r7, #20]
 80062c4:	4798      	blx	r3
}
 80062c6:	bf00      	nop
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000f3c 	.word	0x20000f3c

080062d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f859 	bl	8006398 <prvGetNextExpireTime>
 80062e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f805 	bl	80062fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062f2:	f000 f8d5 	bl	80064a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062f6:	bf00      	nop
 80062f8:	e7f0      	b.n	80062dc <prvTimerTask+0x8>
	...

080062fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006306:	f7ff fa2d 	bl	8005764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800630a:	f107 0308 	add.w	r3, r7, #8
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f864 	bl	80063dc <prvSampleTimeNow>
 8006314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d130      	bne.n	800637e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <prvProcessTimerOrBlockTask+0x3c>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	429a      	cmp	r2, r3
 8006328:	d806      	bhi.n	8006338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800632a:	f7ff fa29 	bl	8005780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff81 	bl	8006238 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006336:	e024      	b.n	8006382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800633e:	4b13      	ldr	r3, [pc, #76]	@ (800638c <prvProcessTimerOrBlockTask+0x90>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <prvProcessTimerOrBlockTask+0x50>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <prvProcessTimerOrBlockTask+0x52>
 800634c:	2300      	movs	r3, #0
 800634e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006350:	4b0f      	ldr	r3, [pc, #60]	@ (8006390 <prvProcessTimerOrBlockTask+0x94>)
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	4619      	mov	r1, r3
 800635e:	f7fe ff69 	bl	8005234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006362:	f7ff fa0d 	bl	8005780 <xTaskResumeAll>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800636c:	4b09      	ldr	r3, [pc, #36]	@ (8006394 <prvProcessTimerOrBlockTask+0x98>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
}
 800637c:	e001      	b.n	8006382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800637e:	f7ff f9ff 	bl	8005780 <xTaskResumeAll>
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000f40 	.word	0x20000f40
 8006390:	20000f44 	.word	0x20000f44
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063a0:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <prvGetNextExpireTime+0x40>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <prvGetNextExpireTime+0x16>
 80063aa:	2201      	movs	r2, #1
 80063ac:	e000      	b.n	80063b0 <prvGetNextExpireTime+0x18>
 80063ae:	2200      	movs	r2, #0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063bc:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <prvGetNextExpireTime+0x40>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e001      	b.n	80063cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr
 80063d8:	20000f3c 	.word	0x20000f3c

080063dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063e4:	f7ff fa6a 	bl	80058bc <xTaskGetTickCount>
 80063e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <prvSampleTimeNow+0x3c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d205      	bcs.n	8006400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063f4:	f000 f93a 	bl	800666c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e002      	b.n	8006406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006406:	4a04      	ldr	r2, [pc, #16]	@ (8006418 <prvSampleTimeNow+0x3c>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000f4c 	.word	0x20000f4c

0800641c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	d812      	bhi.n	8006468 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	429a      	cmp	r2, r3
 800644e:	d302      	bcc.n	8006456 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e01b      	b.n	800648e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006456:	4b10      	ldr	r3, [pc, #64]	@ (8006498 <prvInsertTimerInActiveList+0x7c>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3304      	adds	r3, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7fe f903 	bl	800466c <vListInsert>
 8006466:	e012      	b.n	800648e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d206      	bcs.n	800647e <prvInsertTimerInActiveList+0x62>
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d302      	bcc.n	800647e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e007      	b.n	800648e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800647e:	4b07      	ldr	r3, [pc, #28]	@ (800649c <prvInsertTimerInActiveList+0x80>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3304      	adds	r3, #4
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f7fe f8ef 	bl	800466c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800648e:	697b      	ldr	r3, [r7, #20]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000f40 	.word	0x20000f40
 800649c:	20000f3c 	.word	0x20000f3c

080064a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08e      	sub	sp, #56	@ 0x38
 80064a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064a6:	e0ce      	b.n	8006646 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da19      	bge.n	80064e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	3304      	adds	r3, #4
 80064b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	61fb      	str	r3, [r7, #28]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d8:	6850      	ldr	r0, [r2, #4]
 80064da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064dc:	6892      	ldr	r2, [r2, #8]
 80064de:	4611      	mov	r1, r2
 80064e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f2c0 80ae 	blt.w	8006646 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe f8ee 	bl	80046dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006500:	463b      	mov	r3, r7
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff ff6a 	bl	80063dc <prvSampleTimeNow>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b09      	cmp	r3, #9
 800650e:	f200 8097 	bhi.w	8006640 <prvProcessReceivedCommands+0x1a0>
 8006512:	a201      	add	r2, pc, #4	@ (adr r2, 8006518 <prvProcessReceivedCommands+0x78>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006541 	.word	0x08006541
 800651c:	08006541 	.word	0x08006541
 8006520:	08006541 	.word	0x08006541
 8006524:	080065b7 	.word	0x080065b7
 8006528:	080065cb 	.word	0x080065cb
 800652c:	08006617 	.word	0x08006617
 8006530:	08006541 	.word	0x08006541
 8006534:	08006541 	.word	0x08006541
 8006538:	080065b7 	.word	0x080065b7
 800653c:	080065cb 	.word	0x080065cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	b2da      	uxtb	r2, r3
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	18d1      	adds	r1, r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800655e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006560:	f7ff ff5c 	bl	800641c <prvInsertTimerInActiveList>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d06c      	beq.n	8006644 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006570:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d061      	beq.n	8006644 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	441a      	add	r2, r3
 8006588:	2300      	movs	r3, #0
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	2300      	movs	r3, #0
 800658e:	2100      	movs	r1, #0
 8006590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006592:	f7ff fe03 	bl	800619c <xTimerGenericCommand>
 8006596:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d152      	bne.n	8006644 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	61bb      	str	r3, [r7, #24]
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	e7fd      	b.n	80065b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065bc:	f023 0301 	bic.w	r3, r3, #1
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065c8:	e03d      	b.n	8006646 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	617b      	str	r3, [r7, #20]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	18d1      	adds	r1, r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006610:	f7ff ff04 	bl	800641c <prvInsertTimerInActiveList>
					break;
 8006614:	e017      	b.n	8006646 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006626:	f000 fb89 	bl	8006d3c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800662a:	e00c      	b.n	8006646 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800663e:	e002      	b.n	8006646 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006640:	bf00      	nop
 8006642:	e000      	b.n	8006646 <prvProcessReceivedCommands+0x1a6>
					break;
 8006644:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006646:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <prvProcessReceivedCommands+0x1c8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	1d39      	adds	r1, r7, #4
 800664c:	2200      	movs	r2, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fb54 	bl	8004cfc <xQueueReceive>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	f47f af26 	bne.w	80064a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	3730      	adds	r7, #48	@ 0x30
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000f44 	.word	0x20000f44

0800666c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006672:	e049      	b.n	8006708 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006674:	4b2e      	ldr	r3, [pc, #184]	@ (8006730 <prvSwitchTimerLists+0xc4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800667e:	4b2c      	ldr	r3, [pc, #176]	@ (8006730 <prvSwitchTimerLists+0xc4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3304      	adds	r3, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe f825 	bl	80046dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d02f      	beq.n	8006708 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d90e      	bls.n	80066d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006730 <prvSwitchTimerLists+0xc4>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f7fd ffcb 	bl	800466c <vListInsert>
 80066d6:	e017      	b.n	8006708 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066d8:	2300      	movs	r3, #0
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	2300      	movs	r3, #0
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	2100      	movs	r1, #0
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fd5a 	bl	800619c <xTimerGenericCommand>
 80066e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10b      	bne.n	8006708 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	603b      	str	r3, [r7, #0]
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	e7fd      	b.n	8006704 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006708:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <prvSwitchTimerLists+0xc4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1b0      	bne.n	8006674 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006712:	4b07      	ldr	r3, [pc, #28]	@ (8006730 <prvSwitchTimerLists+0xc4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006718:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <prvSwitchTimerLists+0xc8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a04      	ldr	r2, [pc, #16]	@ (8006730 <prvSwitchTimerLists+0xc4>)
 800671e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006720:	4a04      	ldr	r2, [pc, #16]	@ (8006734 <prvSwitchTimerLists+0xc8>)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	6013      	str	r3, [r2, #0]
}
 8006726:	bf00      	nop
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000f3c 	.word	0x20000f3c
 8006734:	20000f40 	.word	0x20000f40

08006738 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800673e:	f000 f92d 	bl	800699c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006742:	4b15      	ldr	r3, [pc, #84]	@ (8006798 <prvCheckForValidListAndQueue+0x60>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d120      	bne.n	800678c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800674a:	4814      	ldr	r0, [pc, #80]	@ (800679c <prvCheckForValidListAndQueue+0x64>)
 800674c:	f7fd ff40 	bl	80045d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006750:	4813      	ldr	r0, [pc, #76]	@ (80067a0 <prvCheckForValidListAndQueue+0x68>)
 8006752:	f7fd ff3d 	bl	80045d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006756:	4b13      	ldr	r3, [pc, #76]	@ (80067a4 <prvCheckForValidListAndQueue+0x6c>)
 8006758:	4a10      	ldr	r2, [pc, #64]	@ (800679c <prvCheckForValidListAndQueue+0x64>)
 800675a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800675c:	4b12      	ldr	r3, [pc, #72]	@ (80067a8 <prvCheckForValidListAndQueue+0x70>)
 800675e:	4a10      	ldr	r2, [pc, #64]	@ (80067a0 <prvCheckForValidListAndQueue+0x68>)
 8006760:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006762:	2300      	movs	r3, #0
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	4b11      	ldr	r3, [pc, #68]	@ (80067ac <prvCheckForValidListAndQueue+0x74>)
 8006768:	4a11      	ldr	r2, [pc, #68]	@ (80067b0 <prvCheckForValidListAndQueue+0x78>)
 800676a:	2110      	movs	r1, #16
 800676c:	200a      	movs	r0, #10
 800676e:	f7fe f849 	bl	8004804 <xQueueGenericCreateStatic>
 8006772:	4603      	mov	r3, r0
 8006774:	4a08      	ldr	r2, [pc, #32]	@ (8006798 <prvCheckForValidListAndQueue+0x60>)
 8006776:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006778:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <prvCheckForValidListAndQueue+0x60>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <prvCheckForValidListAndQueue+0x60>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	490b      	ldr	r1, [pc, #44]	@ (80067b4 <prvCheckForValidListAndQueue+0x7c>)
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fd2c 	bl	80051e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800678c:	f000 f936 	bl	80069fc <vPortExitCritical>
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000f44 	.word	0x20000f44
 800679c:	20000f14 	.word	0x20000f14
 80067a0:	20000f28 	.word	0x20000f28
 80067a4:	20000f3c 	.word	0x20000f3c
 80067a8:	20000f40 	.word	0x20000f40
 80067ac:	20000ff0 	.word	0x20000ff0
 80067b0:	20000f50 	.word	0x20000f50
 80067b4:	08008080 	.word	0x08008080

080067b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3b04      	subs	r3, #4
 80067c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0201 	bic.w	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3b04      	subs	r3, #4
 80067e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067e8:	4a08      	ldr	r2, [pc, #32]	@ (800680c <pxPortInitialiseStack+0x54>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3b14      	subs	r3, #20
 80067f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3b20      	subs	r3, #32
 80067fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006800:	68fb      	ldr	r3, [r7, #12]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr
 800680c:	08006811 	.word	0x08006811

08006810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006816:	2300      	movs	r3, #0
 8006818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800681a:	4b12      	ldr	r3, [pc, #72]	@ (8006864 <prvTaskExitError+0x54>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	d00b      	beq.n	800683c <prvTaskExitError+0x2c>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	60fb      	str	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <prvTaskExitError+0x28>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60bb      	str	r3, [r7, #8]
}
 800684e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006850:	bf00      	nop
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0fc      	beq.n	8006852 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	20000060 	.word	0x20000060
	...

08006870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006870:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <pxCurrentTCBConst2>)
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800687a:	f380 8809 	msr	PSP, r0
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8811 	msr	BASEPRI, r0
 800688a:	f04e 0e0d 	orr.w	lr, lr, #13
 800688e:	4770      	bx	lr

08006890 <pxCurrentTCBConst2>:
 8006890:	20000a14 	.word	0x20000a14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006898:	4806      	ldr	r0, [pc, #24]	@ (80068b4 <prvPortStartFirstTask+0x1c>)
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	6800      	ldr	r0, [r0, #0]
 800689e:	f380 8808 	msr	MSP, r0
 80068a2:	b662      	cpsie	i
 80068a4:	b661      	cpsie	f
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	df00      	svc	0
 80068b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068b2:	bf00      	nop
 80068b4:	e000ed08 	.word	0xe000ed08

080068b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068be:	4b32      	ldr	r3, [pc, #200]	@ (8006988 <xPortStartScheduler+0xd0>)
 80068c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22ff      	movs	r2, #255	@ 0xff
 80068ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b2a      	ldr	r3, [pc, #168]	@ (800698c <xPortStartScheduler+0xd4>)
 80068e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006990 <xPortStartScheduler+0xd8>)
 80068e8:	2207      	movs	r2, #7
 80068ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ec:	e009      	b.n	8006902 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068ee:	4b28      	ldr	r3, [pc, #160]	@ (8006990 <xPortStartScheduler+0xd8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	4a26      	ldr	r2, [pc, #152]	@ (8006990 <xPortStartScheduler+0xd8>)
 80068f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690a:	2b80      	cmp	r3, #128	@ 0x80
 800690c:	d0ef      	beq.n	80068ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800690e:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <xPortStartScheduler+0xd8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1c3 0307 	rsb	r3, r3, #7
 8006916:	2b04      	cmp	r3, #4
 8006918:	d00b      	beq.n	8006932 <xPortStartScheduler+0x7a>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60bb      	str	r3, [r7, #8]
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006932:	4b17      	ldr	r3, [pc, #92]	@ (8006990 <xPortStartScheduler+0xd8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <xPortStartScheduler+0xd8>)
 800693a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800693c:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <xPortStartScheduler+0xd8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006944:	4a12      	ldr	r2, [pc, #72]	@ (8006990 <xPortStartScheduler+0xd8>)
 8006946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006950:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <xPortStartScheduler+0xdc>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <xPortStartScheduler+0xdc>)
 8006956:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800695a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <xPortStartScheduler+0xdc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <xPortStartScheduler+0xdc>)
 8006962:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006968:	f000 f8b8 	bl	8006adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <xPortStartScheduler+0xe0>)
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006972:	f7ff ff91 	bl	8006898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006976:	f7ff f869 	bl	8005a4c <vTaskSwitchContext>
	prvTaskExitError();
 800697a:	f7ff ff49 	bl	8006810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000e400 	.word	0xe000e400
 800698c:	20001040 	.word	0x20001040
 8006990:	20001044 	.word	0x20001044
 8006994:	e000ed20 	.word	0xe000ed20
 8006998:	20000060 	.word	0x20000060

0800699c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	607b      	str	r3, [r7, #4]
}
 80069b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069b6:	4b0f      	ldr	r3, [pc, #60]	@ (80069f4 <vPortEnterCritical+0x58>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a0d      	ldr	r2, [pc, #52]	@ (80069f4 <vPortEnterCritical+0x58>)
 80069be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069c0:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <vPortEnterCritical+0x58>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d110      	bne.n	80069ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c8:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <vPortEnterCritical+0x5c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <vPortEnterCritical+0x4e>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	603b      	str	r3, [r7, #0]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <vPortEnterCritical+0x4a>
	}
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr
 80069f4:	20000060 	.word	0x20000060
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a02:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <vPortExitCritical+0x26>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	607b      	str	r3, [r7, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4a08      	ldr	r2, [pc, #32]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <vPortExitCritical+0x44>
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000060 	.word	0x20000060

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a60:	6010      	str	r0, [r2, #0]
 8006a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006a66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a6a:	f380 8811 	msr	BASEPRI, r0
 8006a6e:	f7fe ffed 	bl	8005a4c <vTaskSwitchContext>
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8811 	msr	BASEPRI, r0
 8006a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a86:	f380 8809 	msr	PSP, r0
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	4770      	bx	lr

08006a90 <pxCurrentTCBConst>:
 8006a90:	20000a14 	.word	0x20000a14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ab2:	f7fe ff11 	bl	80058d8 <xTaskIncrementTick>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006abc:	4b06      	ldr	r3, [pc, #24]	@ (8006ad8 <xPortSysTickHandler+0x40>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	f383 8811 	msr	BASEPRI, r3
}
 8006ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b0c <vPortSetupTimerInterrupt+0x30>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <vPortSetupTimerInterrupt+0x34>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aec:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <vPortSetupTimerInterrupt+0x38>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a09      	ldr	r2, [pc, #36]	@ (8006b18 <vPortSetupTimerInterrupt+0x3c>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	099b      	lsrs	r3, r3, #6
 8006af8:	4a08      	ldr	r2, [pc, #32]	@ (8006b1c <vPortSetupTimerInterrupt+0x40>)
 8006afa:	3b01      	subs	r3, #1
 8006afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006afe:	4b03      	ldr	r3, [pc, #12]	@ (8006b0c <vPortSetupTimerInterrupt+0x30>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	e000e010 	.word	0xe000e010
 8006b10:	e000e018 	.word	0xe000e018
 8006b14:	20000000 	.word	0x20000000
 8006b18:	10624dd3 	.word	0x10624dd3
 8006b1c:	e000e014 	.word	0xe000e014

08006b20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b26:	f3ef 8305 	mrs	r3, IPSR
 8006b2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b0f      	cmp	r3, #15
 8006b30:	d915      	bls.n	8006b5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b32:	4a17      	ldr	r2, [pc, #92]	@ (8006b90 <vPortValidateInterruptPriority+0x70>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b3c:	4b15      	ldr	r3, [pc, #84]	@ (8006b94 <vPortValidateInterruptPriority+0x74>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	7afa      	ldrb	r2, [r7, #11]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d20b      	bcs.n	8006b5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	607b      	str	r3, [r7, #4]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b98 <vPortValidateInterruptPriority+0x78>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b66:	4b0d      	ldr	r3, [pc, #52]	@ (8006b9c <vPortValidateInterruptPriority+0x7c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90b      	bls.n	8006b86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	603b      	str	r3, [r7, #0]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <vPortValidateInterruptPriority+0x62>
	}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr
 8006b90:	e000e3f0 	.word	0xe000e3f0
 8006b94:	20001040 	.word	0x20001040
 8006b98:	e000ed0c 	.word	0xe000ed0c
 8006b9c:	20001044 	.word	0x20001044

08006ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	@ 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bac:	f7fe fdda 	bl	8005764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bb0:	4b5c      	ldr	r3, [pc, #368]	@ (8006d24 <pvPortMalloc+0x184>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bb8:	f000 f924 	bl	8006e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8006d28 <pvPortMalloc+0x188>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 8095 	bne.w	8006cf4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01e      	beq.n	8006c0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f023 0307 	bic.w	r3, r3, #7
 8006be8:	3308      	adds	r3, #8
 8006bea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <pvPortMalloc+0x6e>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	617b      	str	r3, [r7, #20]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d06f      	beq.n	8006cf4 <pvPortMalloc+0x154>
 8006c14:	4b45      	ldr	r3, [pc, #276]	@ (8006d2c <pvPortMalloc+0x18c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d86a      	bhi.n	8006cf4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c1e:	4b44      	ldr	r3, [pc, #272]	@ (8006d30 <pvPortMalloc+0x190>)
 8006c20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c22:	4b43      	ldr	r3, [pc, #268]	@ (8006d30 <pvPortMalloc+0x190>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c28:	e004      	b.n	8006c34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d903      	bls.n	8006c46 <pvPortMalloc+0xa6>
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f1      	bne.n	8006c2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c46:	4b37      	ldr	r3, [pc, #220]	@ (8006d24 <pvPortMalloc+0x184>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d051      	beq.n	8006cf4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2208      	movs	r2, #8
 8006c56:	4413      	add	r3, r2
 8006c58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	1ad2      	subs	r2, r2, r3
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d920      	bls.n	8006cb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <pvPortMalloc+0xfc>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	613b      	str	r3, [r7, #16]
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cae:	69b8      	ldr	r0, [r7, #24]
 8006cb0:	f000 f90a 	bl	8006ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d2c <pvPortMalloc+0x18c>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d2c <pvPortMalloc+0x18c>)
 8006cc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <pvPortMalloc+0x18c>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d34 <pvPortMalloc+0x194>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d203      	bcs.n	8006cd6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cce:	4b17      	ldr	r3, [pc, #92]	@ (8006d2c <pvPortMalloc+0x18c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a18      	ldr	r2, [pc, #96]	@ (8006d34 <pvPortMalloc+0x194>)
 8006cd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	4b13      	ldr	r3, [pc, #76]	@ (8006d28 <pvPortMalloc+0x188>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cea:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <pvPortMalloc+0x198>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	4a11      	ldr	r2, [pc, #68]	@ (8006d38 <pvPortMalloc+0x198>)
 8006cf2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cf4:	f7fe fd44 	bl	8005780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00b      	beq.n	8006d1a <pvPortMalloc+0x17a>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60fb      	str	r3, [r7, #12]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <pvPortMalloc+0x176>
	return pvReturn;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3728      	adds	r7, #40	@ 0x28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20001c50 	.word	0x20001c50
 8006d28:	20001c64 	.word	0x20001c64
 8006d2c:	20001c54 	.word	0x20001c54
 8006d30:	20001c48 	.word	0x20001c48
 8006d34:	20001c58 	.word	0x20001c58
 8006d38:	20001c5c 	.word	0x20001c5c

08006d3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d04f      	beq.n	8006dee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d4e:	2308      	movs	r3, #8
 8006d50:	425b      	negs	r3, r3
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4413      	add	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4b25      	ldr	r3, [pc, #148]	@ (8006df8 <vPortFree+0xbc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4013      	ands	r3, r2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <vPortFree+0x46>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60fb      	str	r3, [r7, #12]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <vPortFree+0x66>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	60bb      	str	r3, [r7, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	4b14      	ldr	r3, [pc, #80]	@ (8006df8 <vPortFree+0xbc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01e      	beq.n	8006dee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11a      	bne.n	8006dee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006df8 <vPortFree+0xbc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dc8:	f7fe fccc 	bl	8005764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <vPortFree+0xc0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <vPortFree+0xc0>)
 8006dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dda:	6938      	ldr	r0, [r7, #16]
 8006ddc:	f000 f874 	bl	8006ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006de0:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <vPortFree+0xc4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3301      	adds	r3, #1
 8006de6:	4a06      	ldr	r2, [pc, #24]	@ (8006e00 <vPortFree+0xc4>)
 8006de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dea:	f7fe fcc9 	bl	8005780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20001c64 	.word	0x20001c64
 8006dfc:	20001c54 	.word	0x20001c54
 8006e00:	20001c60 	.word	0x20001c60

08006e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e0a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e10:	4b27      	ldr	r3, [pc, #156]	@ (8006eb0 <prvHeapInit+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00c      	beq.n	8006e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3307      	adds	r3, #7
 8006e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb0 <prvHeapInit+0xac>)
 8006e34:	4413      	add	r3, r2
 8006e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb4 <prvHeapInit+0xb0>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e42:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb4 <prvHeapInit+0xb0>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e50:	2208      	movs	r2, #8
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0307 	bic.w	r3, r3, #7
 8006e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <prvHeapInit+0xb4>)
 8006e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e66:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <prvHeapInit+0xb4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e6e:	4b12      	ldr	r3, [pc, #72]	@ (8006eb8 <prvHeapInit+0xb4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e84:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb8 <prvHeapInit+0xb4>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	4a0a      	ldr	r2, [pc, #40]	@ (8006ebc <prvHeapInit+0xb8>)
 8006e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a09      	ldr	r2, [pc, #36]	@ (8006ec0 <prvHeapInit+0xbc>)
 8006e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e9c:	4b09      	ldr	r3, [pc, #36]	@ (8006ec4 <prvHeapInit+0xc0>)
 8006e9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20001048 	.word	0x20001048
 8006eb4:	20001c48 	.word	0x20001c48
 8006eb8:	20001c50 	.word	0x20001c50
 8006ebc:	20001c58 	.word	0x20001c58
 8006ec0:	20001c54 	.word	0x20001c54
 8006ec4:	20001c64 	.word	0x20001c64

08006ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ed0:	4b27      	ldr	r3, [pc, #156]	@ (8006f70 <prvInsertBlockIntoFreeList+0xa8>)
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e002      	b.n	8006edc <prvInsertBlockIntoFreeList+0x14>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d8f7      	bhi.n	8006ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d108      	bne.n	8006f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	441a      	add	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d118      	bne.n	8006f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b14      	ldr	r3, [pc, #80]	@ (8006f74 <prvInsertBlockIntoFreeList+0xac>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d00d      	beq.n	8006f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	441a      	add	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e008      	b.n	8006f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <prvInsertBlockIntoFreeList+0xac>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e003      	b.n	8006f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr
 8006f70:	20001c48 	.word	0x20001c48
 8006f74:	20001c50 	.word	0x20001c50

08006f78 <std>:
 8006f78:	2300      	movs	r3, #0
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f86:	6083      	str	r3, [r0, #8]
 8006f88:	8181      	strh	r1, [r0, #12]
 8006f8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f8c:	81c2      	strh	r2, [r0, #14]
 8006f8e:	6183      	str	r3, [r0, #24]
 8006f90:	4619      	mov	r1, r3
 8006f92:	2208      	movs	r2, #8
 8006f94:	305c      	adds	r0, #92	@ 0x5c
 8006f96:	f000 f9f9 	bl	800738c <memset>
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <std+0x58>)
 8006f9c:	6224      	str	r4, [r4, #32]
 8006f9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <std+0x5c>)
 8006fa2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd8 <std+0x60>)
 8006fa6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006fdc <std+0x64>)
 8006faa:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fac:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <std+0x68>)
 8006fae:	429c      	cmp	r4, r3
 8006fb0:	d006      	beq.n	8006fc0 <std+0x48>
 8006fb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fb6:	4294      	cmp	r4, r2
 8006fb8:	d002      	beq.n	8006fc0 <std+0x48>
 8006fba:	33d0      	adds	r3, #208	@ 0xd0
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	d105      	bne.n	8006fcc <std+0x54>
 8006fc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc8:	f000 bab6 	b.w	8007538 <__retarget_lock_init_recursive>
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	bf00      	nop
 8006fd0:	080071dd 	.word	0x080071dd
 8006fd4:	080071ff 	.word	0x080071ff
 8006fd8:	08007237 	.word	0x08007237
 8006fdc:	0800725b 	.word	0x0800725b
 8006fe0:	20001c68 	.word	0x20001c68

08006fe4 <stdio_exit_handler>:
 8006fe4:	4a02      	ldr	r2, [pc, #8]	@ (8006ff0 <stdio_exit_handler+0xc>)
 8006fe6:	4903      	ldr	r1, [pc, #12]	@ (8006ff4 <stdio_exit_handler+0x10>)
 8006fe8:	4803      	ldr	r0, [pc, #12]	@ (8006ff8 <stdio_exit_handler+0x14>)
 8006fea:	f000 b869 	b.w	80070c0 <_fwalk_sglue>
 8006fee:	bf00      	nop
 8006ff0:	20000064 	.word	0x20000064
 8006ff4:	08007de9 	.word	0x08007de9
 8006ff8:	20000074 	.word	0x20000074

08006ffc <cleanup_stdio>:
 8006ffc:	6841      	ldr	r1, [r0, #4]
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8007030 <cleanup_stdio+0x34>)
 8007000:	b510      	push	{r4, lr}
 8007002:	4299      	cmp	r1, r3
 8007004:	4604      	mov	r4, r0
 8007006:	d001      	beq.n	800700c <cleanup_stdio+0x10>
 8007008:	f000 feee 	bl	8007de8 <_fflush_r>
 800700c:	68a1      	ldr	r1, [r4, #8]
 800700e:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <cleanup_stdio+0x38>)
 8007010:	4299      	cmp	r1, r3
 8007012:	d002      	beq.n	800701a <cleanup_stdio+0x1e>
 8007014:	4620      	mov	r0, r4
 8007016:	f000 fee7 	bl	8007de8 <_fflush_r>
 800701a:	68e1      	ldr	r1, [r4, #12]
 800701c:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <cleanup_stdio+0x3c>)
 800701e:	4299      	cmp	r1, r3
 8007020:	d004      	beq.n	800702c <cleanup_stdio+0x30>
 8007022:	4620      	mov	r0, r4
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f000 bede 	b.w	8007de8 <_fflush_r>
 800702c:	bd10      	pop	{r4, pc}
 800702e:	bf00      	nop
 8007030:	20001c68 	.word	0x20001c68
 8007034:	20001cd0 	.word	0x20001cd0
 8007038:	20001d38 	.word	0x20001d38

0800703c <global_stdio_init.part.0>:
 800703c:	b510      	push	{r4, lr}
 800703e:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <global_stdio_init.part.0+0x30>)
 8007040:	4c0b      	ldr	r4, [pc, #44]	@ (8007070 <global_stdio_init.part.0+0x34>)
 8007042:	4a0c      	ldr	r2, [pc, #48]	@ (8007074 <global_stdio_init.part.0+0x38>)
 8007044:	4620      	mov	r0, r4
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	2104      	movs	r1, #4
 800704a:	2200      	movs	r2, #0
 800704c:	f7ff ff94 	bl	8006f78 <std>
 8007050:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007054:	2201      	movs	r2, #1
 8007056:	2109      	movs	r1, #9
 8007058:	f7ff ff8e 	bl	8006f78 <std>
 800705c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007060:	2202      	movs	r2, #2
 8007062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007066:	2112      	movs	r1, #18
 8007068:	f7ff bf86 	b.w	8006f78 <std>
 800706c:	20001da0 	.word	0x20001da0
 8007070:	20001c68 	.word	0x20001c68
 8007074:	08006fe5 	.word	0x08006fe5

08007078 <__sfp_lock_acquire>:
 8007078:	4801      	ldr	r0, [pc, #4]	@ (8007080 <__sfp_lock_acquire+0x8>)
 800707a:	f000 ba5e 	b.w	800753a <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20001da9 	.word	0x20001da9

08007084 <__sfp_lock_release>:
 8007084:	4801      	ldr	r0, [pc, #4]	@ (800708c <__sfp_lock_release+0x8>)
 8007086:	f000 ba59 	b.w	800753c <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20001da9 	.word	0x20001da9

08007090 <__sinit>:
 8007090:	b510      	push	{r4, lr}
 8007092:	4604      	mov	r4, r0
 8007094:	f7ff fff0 	bl	8007078 <__sfp_lock_acquire>
 8007098:	6a23      	ldr	r3, [r4, #32]
 800709a:	b11b      	cbz	r3, 80070a4 <__sinit+0x14>
 800709c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a0:	f7ff bff0 	b.w	8007084 <__sfp_lock_release>
 80070a4:	4b04      	ldr	r3, [pc, #16]	@ (80070b8 <__sinit+0x28>)
 80070a6:	6223      	str	r3, [r4, #32]
 80070a8:	4b04      	ldr	r3, [pc, #16]	@ (80070bc <__sinit+0x2c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f5      	bne.n	800709c <__sinit+0xc>
 80070b0:	f7ff ffc4 	bl	800703c <global_stdio_init.part.0>
 80070b4:	e7f2      	b.n	800709c <__sinit+0xc>
 80070b6:	bf00      	nop
 80070b8:	08006ffd 	.word	0x08006ffd
 80070bc:	20001da0 	.word	0x20001da0

080070c0 <_fwalk_sglue>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	4607      	mov	r7, r0
 80070c6:	4688      	mov	r8, r1
 80070c8:	4614      	mov	r4, r2
 80070ca:	2600      	movs	r6, #0
 80070cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070d0:	f1b9 0901 	subs.w	r9, r9, #1
 80070d4:	d505      	bpl.n	80070e2 <_fwalk_sglue+0x22>
 80070d6:	6824      	ldr	r4, [r4, #0]
 80070d8:	2c00      	cmp	r4, #0
 80070da:	d1f7      	bne.n	80070cc <_fwalk_sglue+0xc>
 80070dc:	4630      	mov	r0, r6
 80070de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d907      	bls.n	80070f8 <_fwalk_sglue+0x38>
 80070e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ec:	3301      	adds	r3, #1
 80070ee:	d003      	beq.n	80070f8 <_fwalk_sglue+0x38>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4638      	mov	r0, r7
 80070f4:	47c0      	blx	r8
 80070f6:	4306      	orrs	r6, r0
 80070f8:	3568      	adds	r5, #104	@ 0x68
 80070fa:	e7e9      	b.n	80070d0 <_fwalk_sglue+0x10>

080070fc <iprintf>:
 80070fc:	b40f      	push	{r0, r1, r2, r3}
 80070fe:	b507      	push	{r0, r1, r2, lr}
 8007100:	4906      	ldr	r1, [pc, #24]	@ (800711c <iprintf+0x20>)
 8007102:	ab04      	add	r3, sp, #16
 8007104:	6808      	ldr	r0, [r1, #0]
 8007106:	f853 2b04 	ldr.w	r2, [r3], #4
 800710a:	6881      	ldr	r1, [r0, #8]
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	f000 fb43 	bl	8007798 <_vfiprintf_r>
 8007112:	b003      	add	sp, #12
 8007114:	f85d eb04 	ldr.w	lr, [sp], #4
 8007118:	b004      	add	sp, #16
 800711a:	4770      	bx	lr
 800711c:	20000070 	.word	0x20000070

08007120 <_puts_r>:
 8007120:	6a03      	ldr	r3, [r0, #32]
 8007122:	b570      	push	{r4, r5, r6, lr}
 8007124:	4605      	mov	r5, r0
 8007126:	460e      	mov	r6, r1
 8007128:	6884      	ldr	r4, [r0, #8]
 800712a:	b90b      	cbnz	r3, 8007130 <_puts_r+0x10>
 800712c:	f7ff ffb0 	bl	8007090 <__sinit>
 8007130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007132:	07db      	lsls	r3, r3, #31
 8007134:	d405      	bmi.n	8007142 <_puts_r+0x22>
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	0598      	lsls	r0, r3, #22
 800713a:	d402      	bmi.n	8007142 <_puts_r+0x22>
 800713c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800713e:	f000 f9fc 	bl	800753a <__retarget_lock_acquire_recursive>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	0719      	lsls	r1, r3, #28
 8007146:	d502      	bpl.n	800714e <_puts_r+0x2e>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d135      	bne.n	80071ba <_puts_r+0x9a>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f8c5 	bl	80072e0 <__swsetup_r>
 8007156:	b380      	cbz	r0, 80071ba <_puts_r+0x9a>
 8007158:	f04f 35ff 	mov.w	r5, #4294967295
 800715c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800715e:	07da      	lsls	r2, r3, #31
 8007160:	d405      	bmi.n	800716e <_puts_r+0x4e>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	059b      	lsls	r3, r3, #22
 8007166:	d402      	bmi.n	800716e <_puts_r+0x4e>
 8007168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716a:	f000 f9e7 	bl	800753c <__retarget_lock_release_recursive>
 800716e:	4628      	mov	r0, r5
 8007170:	bd70      	pop	{r4, r5, r6, pc}
 8007172:	2b00      	cmp	r3, #0
 8007174:	da04      	bge.n	8007180 <_puts_r+0x60>
 8007176:	69a2      	ldr	r2, [r4, #24]
 8007178:	429a      	cmp	r2, r3
 800717a:	dc17      	bgt.n	80071ac <_puts_r+0x8c>
 800717c:	290a      	cmp	r1, #10
 800717e:	d015      	beq.n	80071ac <_puts_r+0x8c>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	6022      	str	r2, [r4, #0]
 8007186:	7019      	strb	r1, [r3, #0]
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800718e:	3b01      	subs	r3, #1
 8007190:	60a3      	str	r3, [r4, #8]
 8007192:	2900      	cmp	r1, #0
 8007194:	d1ed      	bne.n	8007172 <_puts_r+0x52>
 8007196:	2b00      	cmp	r3, #0
 8007198:	da11      	bge.n	80071be <_puts_r+0x9e>
 800719a:	4622      	mov	r2, r4
 800719c:	210a      	movs	r1, #10
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f85f 	bl	8007262 <__swbuf_r>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d0d7      	beq.n	8007158 <_puts_r+0x38>
 80071a8:	250a      	movs	r5, #10
 80071aa:	e7d7      	b.n	800715c <_puts_r+0x3c>
 80071ac:	4622      	mov	r2, r4
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 f857 	bl	8007262 <__swbuf_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d1e7      	bne.n	8007188 <_puts_r+0x68>
 80071b8:	e7ce      	b.n	8007158 <_puts_r+0x38>
 80071ba:	3e01      	subs	r6, #1
 80071bc:	e7e4      	b.n	8007188 <_puts_r+0x68>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	220a      	movs	r2, #10
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e7ee      	b.n	80071a8 <_puts_r+0x88>
	...

080071cc <puts>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	@ (80071d8 <puts+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f7ff bfa5 	b.w	8007120 <_puts_r>
 80071d6:	bf00      	nop
 80071d8:	20000070 	.word	0x20000070

080071dc <__sread>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	460c      	mov	r4, r1
 80071e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e4:	f000 f95a 	bl	800749c <_read_r>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	bfab      	itete	ge
 80071ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ee:	89a3      	ldrhlt	r3, [r4, #12]
 80071f0:	181b      	addge	r3, r3, r0
 80071f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071f6:	bfac      	ite	ge
 80071f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071fa:	81a3      	strhlt	r3, [r4, #12]
 80071fc:	bd10      	pop	{r4, pc}

080071fe <__swrite>:
 80071fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007202:	461f      	mov	r7, r3
 8007204:	898b      	ldrh	r3, [r1, #12]
 8007206:	4605      	mov	r5, r0
 8007208:	05db      	lsls	r3, r3, #23
 800720a:	460c      	mov	r4, r1
 800720c:	4616      	mov	r6, r2
 800720e:	d505      	bpl.n	800721c <__swrite+0x1e>
 8007210:	2302      	movs	r3, #2
 8007212:	2200      	movs	r2, #0
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	f000 f92e 	bl	8007478 <_lseek_r>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	4632      	mov	r2, r6
 8007220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	4628      	mov	r0, r5
 8007228:	463b      	mov	r3, r7
 800722a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	f000 b945 	b.w	80074c0 <_write_r>

08007236 <__sseek>:
 8007236:	b510      	push	{r4, lr}
 8007238:	460c      	mov	r4, r1
 800723a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723e:	f000 f91b 	bl	8007478 <_lseek_r>
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	bf15      	itete	ne
 8007248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800724a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800724e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007252:	81a3      	strheq	r3, [r4, #12]
 8007254:	bf18      	it	ne
 8007256:	81a3      	strhne	r3, [r4, #12]
 8007258:	bd10      	pop	{r4, pc}

0800725a <__sclose>:
 800725a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725e:	f000 b89d 	b.w	800739c <_close_r>

08007262 <__swbuf_r>:
 8007262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007264:	460e      	mov	r6, r1
 8007266:	4614      	mov	r4, r2
 8007268:	4605      	mov	r5, r0
 800726a:	b118      	cbz	r0, 8007274 <__swbuf_r+0x12>
 800726c:	6a03      	ldr	r3, [r0, #32]
 800726e:	b90b      	cbnz	r3, 8007274 <__swbuf_r+0x12>
 8007270:	f7ff ff0e 	bl	8007090 <__sinit>
 8007274:	69a3      	ldr	r3, [r4, #24]
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	071a      	lsls	r2, r3, #28
 800727c:	d501      	bpl.n	8007282 <__swbuf_r+0x20>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	b943      	cbnz	r3, 8007294 <__swbuf_r+0x32>
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	f000 f82b 	bl	80072e0 <__swsetup_r>
 800728a:	b118      	cbz	r0, 8007294 <__swbuf_r+0x32>
 800728c:	f04f 37ff 	mov.w	r7, #4294967295
 8007290:	4638      	mov	r0, r7
 8007292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	6922      	ldr	r2, [r4, #16]
 8007298:	b2f6      	uxtb	r6, r6
 800729a:	1a98      	subs	r0, r3, r2
 800729c:	6963      	ldr	r3, [r4, #20]
 800729e:	4637      	mov	r7, r6
 80072a0:	4283      	cmp	r3, r0
 80072a2:	dc05      	bgt.n	80072b0 <__swbuf_r+0x4e>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fd9e 	bl	8007de8 <_fflush_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1ed      	bne.n	800728c <__swbuf_r+0x2a>
 80072b0:	68a3      	ldr	r3, [r4, #8]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	6022      	str	r2, [r4, #0]
 80072bc:	701e      	strb	r6, [r3, #0]
 80072be:	6962      	ldr	r2, [r4, #20]
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d004      	beq.n	80072d0 <__swbuf_r+0x6e>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	07db      	lsls	r3, r3, #31
 80072ca:	d5e1      	bpl.n	8007290 <__swbuf_r+0x2e>
 80072cc:	2e0a      	cmp	r6, #10
 80072ce:	d1df      	bne.n	8007290 <__swbuf_r+0x2e>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 fd88 	bl	8007de8 <_fflush_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d0d9      	beq.n	8007290 <__swbuf_r+0x2e>
 80072dc:	e7d6      	b.n	800728c <__swbuf_r+0x2a>
	...

080072e0 <__swsetup_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4b29      	ldr	r3, [pc, #164]	@ (8007388 <__swsetup_r+0xa8>)
 80072e4:	4605      	mov	r5, r0
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	460c      	mov	r4, r1
 80072ea:	b118      	cbz	r0, 80072f4 <__swsetup_r+0x14>
 80072ec:	6a03      	ldr	r3, [r0, #32]
 80072ee:	b90b      	cbnz	r3, 80072f4 <__swsetup_r+0x14>
 80072f0:	f7ff fece 	bl	8007090 <__sinit>
 80072f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072f8:	0719      	lsls	r1, r3, #28
 80072fa:	d422      	bmi.n	8007342 <__swsetup_r+0x62>
 80072fc:	06da      	lsls	r2, r3, #27
 80072fe:	d407      	bmi.n	8007310 <__swsetup_r+0x30>
 8007300:	2209      	movs	r2, #9
 8007302:	602a      	str	r2, [r5, #0]
 8007304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	e033      	b.n	8007378 <__swsetup_r+0x98>
 8007310:	0758      	lsls	r0, r3, #29
 8007312:	d512      	bpl.n	800733a <__swsetup_r+0x5a>
 8007314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007316:	b141      	cbz	r1, 800732a <__swsetup_r+0x4a>
 8007318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800731c:	4299      	cmp	r1, r3
 800731e:	d002      	beq.n	8007326 <__swsetup_r+0x46>
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f91b 	bl	800755c <_free_r>
 8007326:	2300      	movs	r3, #0
 8007328:	6363      	str	r3, [r4, #52]	@ 0x34
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	2300      	movs	r3, #0
 8007334:	6063      	str	r3, [r4, #4]
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f043 0308 	orr.w	r3, r3, #8
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	b94b      	cbnz	r3, 800735a <__swsetup_r+0x7a>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800734c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007350:	d003      	beq.n	800735a <__swsetup_r+0x7a>
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f000 fd94 	bl	8007e82 <__smakebuf_r>
 800735a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735e:	f013 0201 	ands.w	r2, r3, #1
 8007362:	d00a      	beq.n	800737a <__swsetup_r+0x9a>
 8007364:	2200      	movs	r2, #0
 8007366:	60a2      	str	r2, [r4, #8]
 8007368:	6962      	ldr	r2, [r4, #20]
 800736a:	4252      	negs	r2, r2
 800736c:	61a2      	str	r2, [r4, #24]
 800736e:	6922      	ldr	r2, [r4, #16]
 8007370:	b942      	cbnz	r2, 8007384 <__swsetup_r+0xa4>
 8007372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007376:	d1c5      	bne.n	8007304 <__swsetup_r+0x24>
 8007378:	bd38      	pop	{r3, r4, r5, pc}
 800737a:	0799      	lsls	r1, r3, #30
 800737c:	bf58      	it	pl
 800737e:	6962      	ldrpl	r2, [r4, #20]
 8007380:	60a2      	str	r2, [r4, #8]
 8007382:	e7f4      	b.n	800736e <__swsetup_r+0x8e>
 8007384:	2000      	movs	r0, #0
 8007386:	e7f7      	b.n	8007378 <__swsetup_r+0x98>
 8007388:	20000070 	.word	0x20000070

0800738c <memset>:
 800738c:	4603      	mov	r3, r0
 800738e:	4402      	add	r2, r0
 8007390:	4293      	cmp	r3, r2
 8007392:	d100      	bne.n	8007396 <memset+0xa>
 8007394:	4770      	bx	lr
 8007396:	f803 1b01 	strb.w	r1, [r3], #1
 800739a:	e7f9      	b.n	8007390 <memset+0x4>

0800739c <_close_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	2300      	movs	r3, #0
 80073a0:	4d05      	ldr	r5, [pc, #20]	@ (80073b8 <_close_r+0x1c>)
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	f7f9 fb27 	bl	80009fa <_close>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_close_r+0x1a>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_close_r+0x1a>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	20001da4 	.word	0x20001da4

080073bc <_reclaim_reent>:
 80073bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007474 <_reclaim_reent+0xb8>)
 80073be:	b570      	push	{r4, r5, r6, lr}
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4604      	mov	r4, r0
 80073c4:	4283      	cmp	r3, r0
 80073c6:	d053      	beq.n	8007470 <_reclaim_reent+0xb4>
 80073c8:	69c3      	ldr	r3, [r0, #28]
 80073ca:	b31b      	cbz	r3, 8007414 <_reclaim_reent+0x58>
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	b163      	cbz	r3, 80073ea <_reclaim_reent+0x2e>
 80073d0:	2500      	movs	r5, #0
 80073d2:	69e3      	ldr	r3, [r4, #28]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	5959      	ldr	r1, [r3, r5]
 80073d8:	b9b1      	cbnz	r1, 8007408 <_reclaim_reent+0x4c>
 80073da:	3504      	adds	r5, #4
 80073dc:	2d80      	cmp	r5, #128	@ 0x80
 80073de:	d1f8      	bne.n	80073d2 <_reclaim_reent+0x16>
 80073e0:	69e3      	ldr	r3, [r4, #28]
 80073e2:	4620      	mov	r0, r4
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	f000 f8b9 	bl	800755c <_free_r>
 80073ea:	69e3      	ldr	r3, [r4, #28]
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	b111      	cbz	r1, 80073f6 <_reclaim_reent+0x3a>
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f8b3 	bl	800755c <_free_r>
 80073f6:	69e3      	ldr	r3, [r4, #28]
 80073f8:	689d      	ldr	r5, [r3, #8]
 80073fa:	b15d      	cbz	r5, 8007414 <_reclaim_reent+0x58>
 80073fc:	4629      	mov	r1, r5
 80073fe:	4620      	mov	r0, r4
 8007400:	682d      	ldr	r5, [r5, #0]
 8007402:	f000 f8ab 	bl	800755c <_free_r>
 8007406:	e7f8      	b.n	80073fa <_reclaim_reent+0x3e>
 8007408:	680e      	ldr	r6, [r1, #0]
 800740a:	4620      	mov	r0, r4
 800740c:	f000 f8a6 	bl	800755c <_free_r>
 8007410:	4631      	mov	r1, r6
 8007412:	e7e1      	b.n	80073d8 <_reclaim_reent+0x1c>
 8007414:	6961      	ldr	r1, [r4, #20]
 8007416:	b111      	cbz	r1, 800741e <_reclaim_reent+0x62>
 8007418:	4620      	mov	r0, r4
 800741a:	f000 f89f 	bl	800755c <_free_r>
 800741e:	69e1      	ldr	r1, [r4, #28]
 8007420:	b111      	cbz	r1, 8007428 <_reclaim_reent+0x6c>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f89a 	bl	800755c <_free_r>
 8007428:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800742a:	b111      	cbz	r1, 8007432 <_reclaim_reent+0x76>
 800742c:	4620      	mov	r0, r4
 800742e:	f000 f895 	bl	800755c <_free_r>
 8007432:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007434:	b111      	cbz	r1, 800743c <_reclaim_reent+0x80>
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f890 	bl	800755c <_free_r>
 800743c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800743e:	b111      	cbz	r1, 8007446 <_reclaim_reent+0x8a>
 8007440:	4620      	mov	r0, r4
 8007442:	f000 f88b 	bl	800755c <_free_r>
 8007446:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007448:	b111      	cbz	r1, 8007450 <_reclaim_reent+0x94>
 800744a:	4620      	mov	r0, r4
 800744c:	f000 f886 	bl	800755c <_free_r>
 8007450:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007452:	b111      	cbz	r1, 800745a <_reclaim_reent+0x9e>
 8007454:	4620      	mov	r0, r4
 8007456:	f000 f881 	bl	800755c <_free_r>
 800745a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800745c:	b111      	cbz	r1, 8007464 <_reclaim_reent+0xa8>
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f87c 	bl	800755c <_free_r>
 8007464:	6a23      	ldr	r3, [r4, #32]
 8007466:	b11b      	cbz	r3, 8007470 <_reclaim_reent+0xb4>
 8007468:	4620      	mov	r0, r4
 800746a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800746e:	4718      	bx	r3
 8007470:	bd70      	pop	{r4, r5, r6, pc}
 8007472:	bf00      	nop
 8007474:	20000070 	.word	0x20000070

08007478 <_lseek_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	2200      	movs	r2, #0
 8007482:	4d05      	ldr	r5, [pc, #20]	@ (8007498 <_lseek_r+0x20>)
 8007484:	602a      	str	r2, [r5, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	f7f9 fadb 	bl	8000a42 <_lseek>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_lseek_r+0x1e>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_lseek_r+0x1e>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20001da4 	.word	0x20001da4

0800749c <_read_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4604      	mov	r4, r0
 80074a0:	4608      	mov	r0, r1
 80074a2:	4611      	mov	r1, r2
 80074a4:	2200      	movs	r2, #0
 80074a6:	4d05      	ldr	r5, [pc, #20]	@ (80074bc <_read_r+0x20>)
 80074a8:	602a      	str	r2, [r5, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f7f9 fa88 	bl	80009c0 <_read>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_read_r+0x1e>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_read_r+0x1e>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20001da4 	.word	0x20001da4

080074c0 <_write_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	2200      	movs	r2, #0
 80074ca:	4d05      	ldr	r5, [pc, #20]	@ (80074e0 <_write_r+0x20>)
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7f8 fee8 	bl	80002a4 <_write>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_write_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_write_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20001da4 	.word	0x20001da4

080074e4 <__errno>:
 80074e4:	4b01      	ldr	r3, [pc, #4]	@ (80074ec <__errno+0x8>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000070 	.word	0x20000070

080074f0 <__libc_init_array>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	2600      	movs	r6, #0
 80074f4:	4d0c      	ldr	r5, [pc, #48]	@ (8007528 <__libc_init_array+0x38>)
 80074f6:	4c0d      	ldr	r4, [pc, #52]	@ (800752c <__libc_init_array+0x3c>)
 80074f8:	1b64      	subs	r4, r4, r5
 80074fa:	10a4      	asrs	r4, r4, #2
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	d109      	bne.n	8007514 <__libc_init_array+0x24>
 8007500:	f000 fd3c 	bl	8007f7c <_init>
 8007504:	2600      	movs	r6, #0
 8007506:	4d0a      	ldr	r5, [pc, #40]	@ (8007530 <__libc_init_array+0x40>)
 8007508:	4c0a      	ldr	r4, [pc, #40]	@ (8007534 <__libc_init_array+0x44>)
 800750a:	1b64      	subs	r4, r4, r5
 800750c:	10a4      	asrs	r4, r4, #2
 800750e:	42a6      	cmp	r6, r4
 8007510:	d105      	bne.n	800751e <__libc_init_array+0x2e>
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	f855 3b04 	ldr.w	r3, [r5], #4
 8007518:	4798      	blx	r3
 800751a:	3601      	adds	r6, #1
 800751c:	e7ee      	b.n	80074fc <__libc_init_array+0xc>
 800751e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007522:	4798      	blx	r3
 8007524:	3601      	adds	r6, #1
 8007526:	e7f2      	b.n	800750e <__libc_init_array+0x1e>
 8007528:	0800816c 	.word	0x0800816c
 800752c:	0800816c 	.word	0x0800816c
 8007530:	0800816c 	.word	0x0800816c
 8007534:	08008170 	.word	0x08008170

08007538 <__retarget_lock_init_recursive>:
 8007538:	4770      	bx	lr

0800753a <__retarget_lock_acquire_recursive>:
 800753a:	4770      	bx	lr

0800753c <__retarget_lock_release_recursive>:
 800753c:	4770      	bx	lr

0800753e <memcpy>:
 800753e:	440a      	add	r2, r1
 8007540:	4291      	cmp	r1, r2
 8007542:	f100 33ff 	add.w	r3, r0, #4294967295
 8007546:	d100      	bne.n	800754a <memcpy+0xc>
 8007548:	4770      	bx	lr
 800754a:	b510      	push	{r4, lr}
 800754c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007550:	4291      	cmp	r1, r2
 8007552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007556:	d1f9      	bne.n	800754c <memcpy+0xe>
 8007558:	bd10      	pop	{r4, pc}
	...

0800755c <_free_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4605      	mov	r5, r0
 8007560:	2900      	cmp	r1, #0
 8007562:	d040      	beq.n	80075e6 <_free_r+0x8a>
 8007564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007568:	1f0c      	subs	r4, r1, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	bfb8      	it	lt
 800756e:	18e4      	addlt	r4, r4, r3
 8007570:	f000 f8de 	bl	8007730 <__malloc_lock>
 8007574:	4a1c      	ldr	r2, [pc, #112]	@ (80075e8 <_free_r+0x8c>)
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	b933      	cbnz	r3, 8007588 <_free_r+0x2c>
 800757a:	6063      	str	r3, [r4, #4]
 800757c:	6014      	str	r4, [r2, #0]
 800757e:	4628      	mov	r0, r5
 8007580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007584:	f000 b8da 	b.w	800773c <__malloc_unlock>
 8007588:	42a3      	cmp	r3, r4
 800758a:	d908      	bls.n	800759e <_free_r+0x42>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428b      	cmp	r3, r1
 8007592:	bf01      	itttt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	1809      	addeq	r1, r1, r0
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	e7ed      	b.n	800757a <_free_r+0x1e>
 800759e:	461a      	mov	r2, r3
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	b10b      	cbz	r3, 80075a8 <_free_r+0x4c>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d9fa      	bls.n	800759e <_free_r+0x42>
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	1850      	adds	r0, r2, r1
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d10b      	bne.n	80075c8 <_free_r+0x6c>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	4401      	add	r1, r0
 80075b4:	1850      	adds	r0, r2, r1
 80075b6:	4283      	cmp	r3, r0
 80075b8:	6011      	str	r1, [r2, #0]
 80075ba:	d1e0      	bne.n	800757e <_free_r+0x22>
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4408      	add	r0, r1
 80075c2:	6010      	str	r0, [r2, #0]
 80075c4:	6053      	str	r3, [r2, #4]
 80075c6:	e7da      	b.n	800757e <_free_r+0x22>
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x74>
 80075ca:	230c      	movs	r3, #12
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	e7d6      	b.n	800757e <_free_r+0x22>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	6054      	str	r4, [r2, #4]
 80075e4:	e7cb      	b.n	800757e <_free_r+0x22>
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20001db0 	.word	0x20001db0

080075ec <sbrk_aligned>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0f      	ldr	r6, [pc, #60]	@ (800762c <sbrk_aligned+0x40>)
 80075f0:	460c      	mov	r4, r1
 80075f2:	6831      	ldr	r1, [r6, #0]
 80075f4:	4605      	mov	r5, r0
 80075f6:	b911      	cbnz	r1, 80075fe <sbrk_aligned+0x12>
 80075f8:	f000 fca2 	bl	8007f40 <_sbrk_r>
 80075fc:	6030      	str	r0, [r6, #0]
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 fc9d 	bl	8007f40 <_sbrk_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d103      	bne.n	8007612 <sbrk_aligned+0x26>
 800760a:	f04f 34ff 	mov.w	r4, #4294967295
 800760e:	4620      	mov	r0, r4
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	1cc4      	adds	r4, r0, #3
 8007614:	f024 0403 	bic.w	r4, r4, #3
 8007618:	42a0      	cmp	r0, r4
 800761a:	d0f8      	beq.n	800760e <sbrk_aligned+0x22>
 800761c:	1a21      	subs	r1, r4, r0
 800761e:	4628      	mov	r0, r5
 8007620:	f000 fc8e 	bl	8007f40 <_sbrk_r>
 8007624:	3001      	adds	r0, #1
 8007626:	d1f2      	bne.n	800760e <sbrk_aligned+0x22>
 8007628:	e7ef      	b.n	800760a <sbrk_aligned+0x1e>
 800762a:	bf00      	nop
 800762c:	20001dac 	.word	0x20001dac

08007630 <_malloc_r>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	1ccd      	adds	r5, r1, #3
 8007636:	f025 0503 	bic.w	r5, r5, #3
 800763a:	3508      	adds	r5, #8
 800763c:	2d0c      	cmp	r5, #12
 800763e:	bf38      	it	cc
 8007640:	250c      	movcc	r5, #12
 8007642:	2d00      	cmp	r5, #0
 8007644:	4606      	mov	r6, r0
 8007646:	db01      	blt.n	800764c <_malloc_r+0x1c>
 8007648:	42a9      	cmp	r1, r5
 800764a:	d904      	bls.n	8007656 <_malloc_r+0x26>
 800764c:	230c      	movs	r3, #12
 800764e:	6033      	str	r3, [r6, #0]
 8007650:	2000      	movs	r0, #0
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800772c <_malloc_r+0xfc>
 800765a:	f000 f869 	bl	8007730 <__malloc_lock>
 800765e:	f8d8 3000 	ldr.w	r3, [r8]
 8007662:	461c      	mov	r4, r3
 8007664:	bb44      	cbnz	r4, 80076b8 <_malloc_r+0x88>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff ffbf 	bl	80075ec <sbrk_aligned>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	4604      	mov	r4, r0
 8007672:	d158      	bne.n	8007726 <_malloc_r+0xf6>
 8007674:	f8d8 4000 	ldr.w	r4, [r8]
 8007678:	4627      	mov	r7, r4
 800767a:	2f00      	cmp	r7, #0
 800767c:	d143      	bne.n	8007706 <_malloc_r+0xd6>
 800767e:	2c00      	cmp	r4, #0
 8007680:	d04b      	beq.n	800771a <_malloc_r+0xea>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	4639      	mov	r1, r7
 8007686:	4630      	mov	r0, r6
 8007688:	eb04 0903 	add.w	r9, r4, r3
 800768c:	f000 fc58 	bl	8007f40 <_sbrk_r>
 8007690:	4581      	cmp	r9, r0
 8007692:	d142      	bne.n	800771a <_malloc_r+0xea>
 8007694:	6821      	ldr	r1, [r4, #0]
 8007696:	4630      	mov	r0, r6
 8007698:	1a6d      	subs	r5, r5, r1
 800769a:	4629      	mov	r1, r5
 800769c:	f7ff ffa6 	bl	80075ec <sbrk_aligned>
 80076a0:	3001      	adds	r0, #1
 80076a2:	d03a      	beq.n	800771a <_malloc_r+0xea>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	442b      	add	r3, r5
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	f8d8 3000 	ldr.w	r3, [r8]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	bb62      	cbnz	r2, 800770c <_malloc_r+0xdc>
 80076b2:	f8c8 7000 	str.w	r7, [r8]
 80076b6:	e00f      	b.n	80076d8 <_malloc_r+0xa8>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	1b52      	subs	r2, r2, r5
 80076bc:	d420      	bmi.n	8007700 <_malloc_r+0xd0>
 80076be:	2a0b      	cmp	r2, #11
 80076c0:	d917      	bls.n	80076f2 <_malloc_r+0xc2>
 80076c2:	1961      	adds	r1, r4, r5
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	6025      	str	r5, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	6059      	strne	r1, [r3, #4]
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	bf08      	it	eq
 80076d0:	f8c8 1000 	streq.w	r1, [r8]
 80076d4:	5162      	str	r2, [r4, r5]
 80076d6:	604b      	str	r3, [r1, #4]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f82f 	bl	800773c <__malloc_unlock>
 80076de:	f104 000b 	add.w	r0, r4, #11
 80076e2:	1d23      	adds	r3, r4, #4
 80076e4:	f020 0007 	bic.w	r0, r0, #7
 80076e8:	1ac2      	subs	r2, r0, r3
 80076ea:	bf1c      	itt	ne
 80076ec:	1a1b      	subne	r3, r3, r0
 80076ee:	50a3      	strne	r3, [r4, r2]
 80076f0:	e7af      	b.n	8007652 <_malloc_r+0x22>
 80076f2:	6862      	ldr	r2, [r4, #4]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	bf0c      	ite	eq
 80076f8:	f8c8 2000 	streq.w	r2, [r8]
 80076fc:	605a      	strne	r2, [r3, #4]
 80076fe:	e7eb      	b.n	80076d8 <_malloc_r+0xa8>
 8007700:	4623      	mov	r3, r4
 8007702:	6864      	ldr	r4, [r4, #4]
 8007704:	e7ae      	b.n	8007664 <_malloc_r+0x34>
 8007706:	463c      	mov	r4, r7
 8007708:	687f      	ldr	r7, [r7, #4]
 800770a:	e7b6      	b.n	800767a <_malloc_r+0x4a>
 800770c:	461a      	mov	r2, r3
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	42a3      	cmp	r3, r4
 8007712:	d1fb      	bne.n	800770c <_malloc_r+0xdc>
 8007714:	2300      	movs	r3, #0
 8007716:	6053      	str	r3, [r2, #4]
 8007718:	e7de      	b.n	80076d8 <_malloc_r+0xa8>
 800771a:	230c      	movs	r3, #12
 800771c:	4630      	mov	r0, r6
 800771e:	6033      	str	r3, [r6, #0]
 8007720:	f000 f80c 	bl	800773c <__malloc_unlock>
 8007724:	e794      	b.n	8007650 <_malloc_r+0x20>
 8007726:	6005      	str	r5, [r0, #0]
 8007728:	e7d6      	b.n	80076d8 <_malloc_r+0xa8>
 800772a:	bf00      	nop
 800772c:	20001db0 	.word	0x20001db0

08007730 <__malloc_lock>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__malloc_lock+0x8>)
 8007732:	f7ff bf02 	b.w	800753a <__retarget_lock_acquire_recursive>
 8007736:	bf00      	nop
 8007738:	20001da8 	.word	0x20001da8

0800773c <__malloc_unlock>:
 800773c:	4801      	ldr	r0, [pc, #4]	@ (8007744 <__malloc_unlock+0x8>)
 800773e:	f7ff befd 	b.w	800753c <__retarget_lock_release_recursive>
 8007742:	bf00      	nop
 8007744:	20001da8 	.word	0x20001da8

08007748 <__sfputc_r>:
 8007748:	6893      	ldr	r3, [r2, #8]
 800774a:	b410      	push	{r4}
 800774c:	3b01      	subs	r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	6093      	str	r3, [r2, #8]
 8007752:	da07      	bge.n	8007764 <__sfputc_r+0x1c>
 8007754:	6994      	ldr	r4, [r2, #24]
 8007756:	42a3      	cmp	r3, r4
 8007758:	db01      	blt.n	800775e <__sfputc_r+0x16>
 800775a:	290a      	cmp	r1, #10
 800775c:	d102      	bne.n	8007764 <__sfputc_r+0x1c>
 800775e:	bc10      	pop	{r4}
 8007760:	f7ff bd7f 	b.w	8007262 <__swbuf_r>
 8007764:	6813      	ldr	r3, [r2, #0]
 8007766:	1c58      	adds	r0, r3, #1
 8007768:	6010      	str	r0, [r2, #0]
 800776a:	7019      	strb	r1, [r3, #0]
 800776c:	4608      	mov	r0, r1
 800776e:	bc10      	pop	{r4}
 8007770:	4770      	bx	lr

08007772 <__sfputs_r>:
 8007772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007774:	4606      	mov	r6, r0
 8007776:	460f      	mov	r7, r1
 8007778:	4614      	mov	r4, r2
 800777a:	18d5      	adds	r5, r2, r3
 800777c:	42ac      	cmp	r4, r5
 800777e:	d101      	bne.n	8007784 <__sfputs_r+0x12>
 8007780:	2000      	movs	r0, #0
 8007782:	e007      	b.n	8007794 <__sfputs_r+0x22>
 8007784:	463a      	mov	r2, r7
 8007786:	4630      	mov	r0, r6
 8007788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778c:	f7ff ffdc 	bl	8007748 <__sfputc_r>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d1f3      	bne.n	800777c <__sfputs_r+0xa>
 8007794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007798 <_vfiprintf_r>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	460d      	mov	r5, r1
 800779e:	4614      	mov	r4, r2
 80077a0:	4698      	mov	r8, r3
 80077a2:	4606      	mov	r6, r0
 80077a4:	b09d      	sub	sp, #116	@ 0x74
 80077a6:	b118      	cbz	r0, 80077b0 <_vfiprintf_r+0x18>
 80077a8:	6a03      	ldr	r3, [r0, #32]
 80077aa:	b90b      	cbnz	r3, 80077b0 <_vfiprintf_r+0x18>
 80077ac:	f7ff fc70 	bl	8007090 <__sinit>
 80077b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077b2:	07d9      	lsls	r1, r3, #31
 80077b4:	d405      	bmi.n	80077c2 <_vfiprintf_r+0x2a>
 80077b6:	89ab      	ldrh	r3, [r5, #12]
 80077b8:	059a      	lsls	r2, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <_vfiprintf_r+0x2a>
 80077bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077be:	f7ff febc 	bl	800753a <__retarget_lock_acquire_recursive>
 80077c2:	89ab      	ldrh	r3, [r5, #12]
 80077c4:	071b      	lsls	r3, r3, #28
 80077c6:	d501      	bpl.n	80077cc <_vfiprintf_r+0x34>
 80077c8:	692b      	ldr	r3, [r5, #16]
 80077ca:	b99b      	cbnz	r3, 80077f4 <_vfiprintf_r+0x5c>
 80077cc:	4629      	mov	r1, r5
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7ff fd86 	bl	80072e0 <__swsetup_r>
 80077d4:	b170      	cbz	r0, 80077f4 <_vfiprintf_r+0x5c>
 80077d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077d8:	07dc      	lsls	r4, r3, #31
 80077da:	d504      	bpl.n	80077e6 <_vfiprintf_r+0x4e>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	b01d      	add	sp, #116	@ 0x74
 80077e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	0598      	lsls	r0, r3, #22
 80077ea:	d4f7      	bmi.n	80077dc <_vfiprintf_r+0x44>
 80077ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077ee:	f7ff fea5 	bl	800753c <__retarget_lock_release_recursive>
 80077f2:	e7f3      	b.n	80077dc <_vfiprintf_r+0x44>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077f8:	2320      	movs	r3, #32
 80077fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077fe:	2330      	movs	r3, #48	@ 0x30
 8007800:	f04f 0901 	mov.w	r9, #1
 8007804:	f8cd 800c 	str.w	r8, [sp, #12]
 8007808:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80079b4 <_vfiprintf_r+0x21c>
 800780c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007810:	4623      	mov	r3, r4
 8007812:	469a      	mov	sl, r3
 8007814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007818:	b10a      	cbz	r2, 800781e <_vfiprintf_r+0x86>
 800781a:	2a25      	cmp	r2, #37	@ 0x25
 800781c:	d1f9      	bne.n	8007812 <_vfiprintf_r+0x7a>
 800781e:	ebba 0b04 	subs.w	fp, sl, r4
 8007822:	d00b      	beq.n	800783c <_vfiprintf_r+0xa4>
 8007824:	465b      	mov	r3, fp
 8007826:	4622      	mov	r2, r4
 8007828:	4629      	mov	r1, r5
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff ffa1 	bl	8007772 <__sfputs_r>
 8007830:	3001      	adds	r0, #1
 8007832:	f000 80a7 	beq.w	8007984 <_vfiprintf_r+0x1ec>
 8007836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007838:	445a      	add	r2, fp
 800783a:	9209      	str	r2, [sp, #36]	@ 0x24
 800783c:	f89a 3000 	ldrb.w	r3, [sl]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 809f 	beq.w	8007984 <_vfiprintf_r+0x1ec>
 8007846:	2300      	movs	r3, #0
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007850:	f10a 0a01 	add.w	sl, sl, #1
 8007854:	9304      	str	r3, [sp, #16]
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800785c:	931a      	str	r3, [sp, #104]	@ 0x68
 800785e:	4654      	mov	r4, sl
 8007860:	2205      	movs	r2, #5
 8007862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007866:	4853      	ldr	r0, [pc, #332]	@ (80079b4 <_vfiprintf_r+0x21c>)
 8007868:	f000 fb7a 	bl	8007f60 <memchr>
 800786c:	9a04      	ldr	r2, [sp, #16]
 800786e:	b9d8      	cbnz	r0, 80078a8 <_vfiprintf_r+0x110>
 8007870:	06d1      	lsls	r1, r2, #27
 8007872:	bf44      	itt	mi
 8007874:	2320      	movmi	r3, #32
 8007876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800787a:	0713      	lsls	r3, r2, #28
 800787c:	bf44      	itt	mi
 800787e:	232b      	movmi	r3, #43	@ 0x2b
 8007880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007884:	f89a 3000 	ldrb.w	r3, [sl]
 8007888:	2b2a      	cmp	r3, #42	@ 0x2a
 800788a:	d015      	beq.n	80078b8 <_vfiprintf_r+0x120>
 800788c:	4654      	mov	r4, sl
 800788e:	2000      	movs	r0, #0
 8007890:	f04f 0c0a 	mov.w	ip, #10
 8007894:	9a07      	ldr	r2, [sp, #28]
 8007896:	4621      	mov	r1, r4
 8007898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800789c:	3b30      	subs	r3, #48	@ 0x30
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d94b      	bls.n	800793a <_vfiprintf_r+0x1a2>
 80078a2:	b1b0      	cbz	r0, 80078d2 <_vfiprintf_r+0x13a>
 80078a4:	9207      	str	r2, [sp, #28]
 80078a6:	e014      	b.n	80078d2 <_vfiprintf_r+0x13a>
 80078a8:	eba0 0308 	sub.w	r3, r0, r8
 80078ac:	fa09 f303 	lsl.w	r3, r9, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	46a2      	mov	sl, r4
 80078b4:	9304      	str	r3, [sp, #16]
 80078b6:	e7d2      	b.n	800785e <_vfiprintf_r+0xc6>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	1d19      	adds	r1, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	9103      	str	r1, [sp, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bfbb      	ittet	lt
 80078c4:	425b      	neglt	r3, r3
 80078c6:	f042 0202 	orrlt.w	r2, r2, #2
 80078ca:	9307      	strge	r3, [sp, #28]
 80078cc:	9307      	strlt	r3, [sp, #28]
 80078ce:	bfb8      	it	lt
 80078d0:	9204      	strlt	r2, [sp, #16]
 80078d2:	7823      	ldrb	r3, [r4, #0]
 80078d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80078d6:	d10a      	bne.n	80078ee <_vfiprintf_r+0x156>
 80078d8:	7863      	ldrb	r3, [r4, #1]
 80078da:	2b2a      	cmp	r3, #42	@ 0x2a
 80078dc:	d132      	bne.n	8007944 <_vfiprintf_r+0x1ac>
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	3402      	adds	r4, #2
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	9203      	str	r2, [sp, #12]
 80078e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078ec:	9305      	str	r3, [sp, #20]
 80078ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80079b8 <_vfiprintf_r+0x220>
 80078f2:	2203      	movs	r2, #3
 80078f4:	4650      	mov	r0, sl
 80078f6:	7821      	ldrb	r1, [r4, #0]
 80078f8:	f000 fb32 	bl	8007f60 <memchr>
 80078fc:	b138      	cbz	r0, 800790e <_vfiprintf_r+0x176>
 80078fe:	2240      	movs	r2, #64	@ 0x40
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	eba0 000a 	sub.w	r0, r0, sl
 8007906:	4082      	lsls	r2, r0
 8007908:	4313      	orrs	r3, r2
 800790a:	3401      	adds	r4, #1
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007912:	2206      	movs	r2, #6
 8007914:	4829      	ldr	r0, [pc, #164]	@ (80079bc <_vfiprintf_r+0x224>)
 8007916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800791a:	f000 fb21 	bl	8007f60 <memchr>
 800791e:	2800      	cmp	r0, #0
 8007920:	d03f      	beq.n	80079a2 <_vfiprintf_r+0x20a>
 8007922:	4b27      	ldr	r3, [pc, #156]	@ (80079c0 <_vfiprintf_r+0x228>)
 8007924:	bb1b      	cbnz	r3, 800796e <_vfiprintf_r+0x1d6>
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	3307      	adds	r3, #7
 800792a:	f023 0307 	bic.w	r3, r3, #7
 800792e:	3308      	adds	r3, #8
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007934:	443b      	add	r3, r7
 8007936:	9309      	str	r3, [sp, #36]	@ 0x24
 8007938:	e76a      	b.n	8007810 <_vfiprintf_r+0x78>
 800793a:	460c      	mov	r4, r1
 800793c:	2001      	movs	r0, #1
 800793e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007942:	e7a8      	b.n	8007896 <_vfiprintf_r+0xfe>
 8007944:	2300      	movs	r3, #0
 8007946:	f04f 0c0a 	mov.w	ip, #10
 800794a:	4619      	mov	r1, r3
 800794c:	3401      	adds	r4, #1
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	4620      	mov	r0, r4
 8007952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007956:	3a30      	subs	r2, #48	@ 0x30
 8007958:	2a09      	cmp	r2, #9
 800795a:	d903      	bls.n	8007964 <_vfiprintf_r+0x1cc>
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0c6      	beq.n	80078ee <_vfiprintf_r+0x156>
 8007960:	9105      	str	r1, [sp, #20]
 8007962:	e7c4      	b.n	80078ee <_vfiprintf_r+0x156>
 8007964:	4604      	mov	r4, r0
 8007966:	2301      	movs	r3, #1
 8007968:	fb0c 2101 	mla	r1, ip, r1, r2
 800796c:	e7f0      	b.n	8007950 <_vfiprintf_r+0x1b8>
 800796e:	ab03      	add	r3, sp, #12
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	462a      	mov	r2, r5
 8007974:	4630      	mov	r0, r6
 8007976:	4b13      	ldr	r3, [pc, #76]	@ (80079c4 <_vfiprintf_r+0x22c>)
 8007978:	a904      	add	r1, sp, #16
 800797a:	f3af 8000 	nop.w
 800797e:	4607      	mov	r7, r0
 8007980:	1c78      	adds	r0, r7, #1
 8007982:	d1d6      	bne.n	8007932 <_vfiprintf_r+0x19a>
 8007984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007986:	07d9      	lsls	r1, r3, #31
 8007988:	d405      	bmi.n	8007996 <_vfiprintf_r+0x1fe>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	059a      	lsls	r2, r3, #22
 800798e:	d402      	bmi.n	8007996 <_vfiprintf_r+0x1fe>
 8007990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007992:	f7ff fdd3 	bl	800753c <__retarget_lock_release_recursive>
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	065b      	lsls	r3, r3, #25
 800799a:	f53f af1f 	bmi.w	80077dc <_vfiprintf_r+0x44>
 800799e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079a0:	e71e      	b.n	80077e0 <_vfiprintf_r+0x48>
 80079a2:	ab03      	add	r3, sp, #12
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	462a      	mov	r2, r5
 80079a8:	4630      	mov	r0, r6
 80079aa:	4b06      	ldr	r3, [pc, #24]	@ (80079c4 <_vfiprintf_r+0x22c>)
 80079ac:	a904      	add	r1, sp, #16
 80079ae:	f000 f87d 	bl	8007aac <_printf_i>
 80079b2:	e7e4      	b.n	800797e <_vfiprintf_r+0x1e6>
 80079b4:	08008136 	.word	0x08008136
 80079b8:	0800813c 	.word	0x0800813c
 80079bc:	08008140 	.word	0x08008140
 80079c0:	00000000 	.word	0x00000000
 80079c4:	08007773 	.word	0x08007773

080079c8 <_printf_common>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	4616      	mov	r6, r2
 80079ce:	4698      	mov	r8, r3
 80079d0:	688a      	ldr	r2, [r1, #8]
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	4607      	mov	r7, r0
 80079d6:	4293      	cmp	r3, r2
 80079d8:	bfb8      	it	lt
 80079da:	4613      	movlt	r3, r2
 80079dc:	6033      	str	r3, [r6, #0]
 80079de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079e2:	460c      	mov	r4, r1
 80079e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079e8:	b10a      	cbz	r2, 80079ee <_printf_common+0x26>
 80079ea:	3301      	adds	r3, #1
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	0699      	lsls	r1, r3, #26
 80079f2:	bf42      	ittt	mi
 80079f4:	6833      	ldrmi	r3, [r6, #0]
 80079f6:	3302      	addmi	r3, #2
 80079f8:	6033      	strmi	r3, [r6, #0]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	f015 0506 	ands.w	r5, r5, #6
 8007a00:	d106      	bne.n	8007a10 <_printf_common+0x48>
 8007a02:	f104 0a19 	add.w	sl, r4, #25
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	6832      	ldr	r2, [r6, #0]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	dc2b      	bgt.n	8007a68 <_printf_common+0xa0>
 8007a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	3b00      	subs	r3, #0
 8007a18:	bf18      	it	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	0692      	lsls	r2, r2, #26
 8007a1e:	d430      	bmi.n	8007a82 <_printf_common+0xba>
 8007a20:	4641      	mov	r1, r8
 8007a22:	4638      	mov	r0, r7
 8007a24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a28:	47c8      	blx	r9
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d023      	beq.n	8007a76 <_printf_common+0xae>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	f003 0306 	and.w	r3, r3, #6
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	bf14      	ite	ne
 8007a3a:	2500      	movne	r5, #0
 8007a3c:	6833      	ldreq	r3, [r6, #0]
 8007a3e:	f04f 0600 	mov.w	r6, #0
 8007a42:	bf08      	it	eq
 8007a44:	68e5      	ldreq	r5, [r4, #12]
 8007a46:	f104 041a 	add.w	r4, r4, #26
 8007a4a:	bf08      	it	eq
 8007a4c:	1aed      	subeq	r5, r5, r3
 8007a4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a52:	bf08      	it	eq
 8007a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	bfc4      	itt	gt
 8007a5c:	1a9b      	subgt	r3, r3, r2
 8007a5e:	18ed      	addgt	r5, r5, r3
 8007a60:	42b5      	cmp	r5, r6
 8007a62:	d11a      	bne.n	8007a9a <_printf_common+0xd2>
 8007a64:	2000      	movs	r0, #0
 8007a66:	e008      	b.n	8007a7a <_printf_common+0xb2>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	4638      	mov	r0, r7
 8007a70:	47c8      	blx	r9
 8007a72:	3001      	adds	r0, #1
 8007a74:	d103      	bne.n	8007a7e <_printf_common+0xb6>
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	3501      	adds	r5, #1
 8007a80:	e7c1      	b.n	8007a06 <_printf_common+0x3e>
 8007a82:	2030      	movs	r0, #48	@ 0x30
 8007a84:	18e1      	adds	r1, r4, r3
 8007a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a90:	4422      	add	r2, r4
 8007a92:	3302      	adds	r3, #2
 8007a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a98:	e7c2      	b.n	8007a20 <_printf_common+0x58>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	47c8      	blx	r9
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d0e6      	beq.n	8007a76 <_printf_common+0xae>
 8007aa8:	3601      	adds	r6, #1
 8007aaa:	e7d9      	b.n	8007a60 <_printf_common+0x98>

08007aac <_printf_i>:
 8007aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab0:	7e0f      	ldrb	r7, [r1, #24]
 8007ab2:	4691      	mov	r9, r2
 8007ab4:	2f78      	cmp	r7, #120	@ 0x78
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	469a      	mov	sl, r3
 8007abc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ac2:	d807      	bhi.n	8007ad4 <_printf_i+0x28>
 8007ac4:	2f62      	cmp	r7, #98	@ 0x62
 8007ac6:	d80a      	bhi.n	8007ade <_printf_i+0x32>
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	f000 80d1 	beq.w	8007c70 <_printf_i+0x1c4>
 8007ace:	2f58      	cmp	r7, #88	@ 0x58
 8007ad0:	f000 80b8 	beq.w	8007c44 <_printf_i+0x198>
 8007ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007adc:	e03a      	b.n	8007b54 <_printf_i+0xa8>
 8007ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ae2:	2b15      	cmp	r3, #21
 8007ae4:	d8f6      	bhi.n	8007ad4 <_printf_i+0x28>
 8007ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8007aec <_printf_i+0x40>)
 8007ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aec:	08007b45 	.word	0x08007b45
 8007af0:	08007b59 	.word	0x08007b59
 8007af4:	08007ad5 	.word	0x08007ad5
 8007af8:	08007ad5 	.word	0x08007ad5
 8007afc:	08007ad5 	.word	0x08007ad5
 8007b00:	08007ad5 	.word	0x08007ad5
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007ad5 	.word	0x08007ad5
 8007b0c:	08007ad5 	.word	0x08007ad5
 8007b10:	08007ad5 	.word	0x08007ad5
 8007b14:	08007ad5 	.word	0x08007ad5
 8007b18:	08007c57 	.word	0x08007c57
 8007b1c:	08007b83 	.word	0x08007b83
 8007b20:	08007c11 	.word	0x08007c11
 8007b24:	08007ad5 	.word	0x08007ad5
 8007b28:	08007ad5 	.word	0x08007ad5
 8007b2c:	08007c79 	.word	0x08007c79
 8007b30:	08007ad5 	.word	0x08007ad5
 8007b34:	08007b83 	.word	0x08007b83
 8007b38:	08007ad5 	.word	0x08007ad5
 8007b3c:	08007ad5 	.word	0x08007ad5
 8007b40:	08007c19 	.word	0x08007c19
 8007b44:	6833      	ldr	r3, [r6, #0]
 8007b46:	1d1a      	adds	r2, r3, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6032      	str	r2, [r6, #0]
 8007b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b54:	2301      	movs	r3, #1
 8007b56:	e09c      	b.n	8007c92 <_printf_i+0x1e6>
 8007b58:	6833      	ldr	r3, [r6, #0]
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	1d19      	adds	r1, r3, #4
 8007b5e:	6031      	str	r1, [r6, #0]
 8007b60:	0606      	lsls	r6, r0, #24
 8007b62:	d501      	bpl.n	8007b68 <_printf_i+0xbc>
 8007b64:	681d      	ldr	r5, [r3, #0]
 8007b66:	e003      	b.n	8007b70 <_printf_i+0xc4>
 8007b68:	0645      	lsls	r5, r0, #25
 8007b6a:	d5fb      	bpl.n	8007b64 <_printf_i+0xb8>
 8007b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	da03      	bge.n	8007b7c <_printf_i+0xd0>
 8007b74:	232d      	movs	r3, #45	@ 0x2d
 8007b76:	426d      	negs	r5, r5
 8007b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b7c:	230a      	movs	r3, #10
 8007b7e:	4858      	ldr	r0, [pc, #352]	@ (8007ce0 <_printf_i+0x234>)
 8007b80:	e011      	b.n	8007ba6 <_printf_i+0xfa>
 8007b82:	6821      	ldr	r1, [r4, #0]
 8007b84:	6833      	ldr	r3, [r6, #0]
 8007b86:	0608      	lsls	r0, r1, #24
 8007b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b8c:	d402      	bmi.n	8007b94 <_printf_i+0xe8>
 8007b8e:	0649      	lsls	r1, r1, #25
 8007b90:	bf48      	it	mi
 8007b92:	b2ad      	uxthmi	r5, r5
 8007b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b96:	6033      	str	r3, [r6, #0]
 8007b98:	bf14      	ite	ne
 8007b9a:	230a      	movne	r3, #10
 8007b9c:	2308      	moveq	r3, #8
 8007b9e:	4850      	ldr	r0, [pc, #320]	@ (8007ce0 <_printf_i+0x234>)
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ba6:	6866      	ldr	r6, [r4, #4]
 8007ba8:	2e00      	cmp	r6, #0
 8007baa:	60a6      	str	r6, [r4, #8]
 8007bac:	db05      	blt.n	8007bba <_printf_i+0x10e>
 8007bae:	6821      	ldr	r1, [r4, #0]
 8007bb0:	432e      	orrs	r6, r5
 8007bb2:	f021 0104 	bic.w	r1, r1, #4
 8007bb6:	6021      	str	r1, [r4, #0]
 8007bb8:	d04b      	beq.n	8007c52 <_printf_i+0x1a6>
 8007bba:	4616      	mov	r6, r2
 8007bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8007bc4:	5dc7      	ldrb	r7, [r0, r7]
 8007bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bca:	462f      	mov	r7, r5
 8007bcc:	42bb      	cmp	r3, r7
 8007bce:	460d      	mov	r5, r1
 8007bd0:	d9f4      	bls.n	8007bbc <_printf_i+0x110>
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d10b      	bne.n	8007bee <_printf_i+0x142>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	07df      	lsls	r7, r3, #31
 8007bda:	d508      	bpl.n	8007bee <_printf_i+0x142>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	6861      	ldr	r1, [r4, #4]
 8007be0:	4299      	cmp	r1, r3
 8007be2:	bfde      	ittt	le
 8007be4:	2330      	movle	r3, #48	@ 0x30
 8007be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bee:	1b92      	subs	r2, r2, r6
 8007bf0:	6122      	str	r2, [r4, #16]
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	f8cd a000 	str.w	sl, [sp]
 8007bfc:	aa03      	add	r2, sp, #12
 8007bfe:	f7ff fee3 	bl	80079c8 <_printf_common>
 8007c02:	3001      	adds	r0, #1
 8007c04:	d14a      	bne.n	8007c9c <_printf_i+0x1f0>
 8007c06:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0a:	b004      	add	sp, #16
 8007c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	f043 0320 	orr.w	r3, r3, #32
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	2778      	movs	r7, #120	@ 0x78
 8007c1a:	4832      	ldr	r0, [pc, #200]	@ (8007ce4 <_printf_i+0x238>)
 8007c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	6831      	ldr	r1, [r6, #0]
 8007c24:	061f      	lsls	r7, r3, #24
 8007c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c2a:	d402      	bmi.n	8007c32 <_printf_i+0x186>
 8007c2c:	065f      	lsls	r7, r3, #25
 8007c2e:	bf48      	it	mi
 8007c30:	b2ad      	uxthmi	r5, r5
 8007c32:	6031      	str	r1, [r6, #0]
 8007c34:	07d9      	lsls	r1, r3, #31
 8007c36:	bf44      	itt	mi
 8007c38:	f043 0320 	orrmi.w	r3, r3, #32
 8007c3c:	6023      	strmi	r3, [r4, #0]
 8007c3e:	b11d      	cbz	r5, 8007c48 <_printf_i+0x19c>
 8007c40:	2310      	movs	r3, #16
 8007c42:	e7ad      	b.n	8007ba0 <_printf_i+0xf4>
 8007c44:	4826      	ldr	r0, [pc, #152]	@ (8007ce0 <_printf_i+0x234>)
 8007c46:	e7e9      	b.n	8007c1c <_printf_i+0x170>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	f023 0320 	bic.w	r3, r3, #32
 8007c4e:	6023      	str	r3, [r4, #0]
 8007c50:	e7f6      	b.n	8007c40 <_printf_i+0x194>
 8007c52:	4616      	mov	r6, r2
 8007c54:	e7bd      	b.n	8007bd2 <_printf_i+0x126>
 8007c56:	6833      	ldr	r3, [r6, #0]
 8007c58:	6825      	ldr	r5, [r4, #0]
 8007c5a:	1d18      	adds	r0, r3, #4
 8007c5c:	6961      	ldr	r1, [r4, #20]
 8007c5e:	6030      	str	r0, [r6, #0]
 8007c60:	062e      	lsls	r6, r5, #24
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	d501      	bpl.n	8007c6a <_printf_i+0x1be>
 8007c66:	6019      	str	r1, [r3, #0]
 8007c68:	e002      	b.n	8007c70 <_printf_i+0x1c4>
 8007c6a:	0668      	lsls	r0, r5, #25
 8007c6c:	d5fb      	bpl.n	8007c66 <_printf_i+0x1ba>
 8007c6e:	8019      	strh	r1, [r3, #0]
 8007c70:	2300      	movs	r3, #0
 8007c72:	4616      	mov	r6, r2
 8007c74:	6123      	str	r3, [r4, #16]
 8007c76:	e7bc      	b.n	8007bf2 <_printf_i+0x146>
 8007c78:	6833      	ldr	r3, [r6, #0]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	1d1a      	adds	r2, r3, #4
 8007c7e:	6032      	str	r2, [r6, #0]
 8007c80:	681e      	ldr	r6, [r3, #0]
 8007c82:	6862      	ldr	r2, [r4, #4]
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 f96b 	bl	8007f60 <memchr>
 8007c8a:	b108      	cbz	r0, 8007c90 <_printf_i+0x1e4>
 8007c8c:	1b80      	subs	r0, r0, r6
 8007c8e:	6060      	str	r0, [r4, #4]
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	6123      	str	r3, [r4, #16]
 8007c94:	2300      	movs	r3, #0
 8007c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c9a:	e7aa      	b.n	8007bf2 <_printf_i+0x146>
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	47d0      	blx	sl
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d0ad      	beq.n	8007c06 <_printf_i+0x15a>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	079b      	lsls	r3, r3, #30
 8007cae:	d413      	bmi.n	8007cd8 <_printf_i+0x22c>
 8007cb0:	68e0      	ldr	r0, [r4, #12]
 8007cb2:	9b03      	ldr	r3, [sp, #12]
 8007cb4:	4298      	cmp	r0, r3
 8007cb6:	bfb8      	it	lt
 8007cb8:	4618      	movlt	r0, r3
 8007cba:	e7a6      	b.n	8007c0a <_printf_i+0x15e>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	47d0      	blx	sl
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d09d      	beq.n	8007c06 <_printf_i+0x15a>
 8007cca:	3501      	adds	r5, #1
 8007ccc:	68e3      	ldr	r3, [r4, #12]
 8007cce:	9903      	ldr	r1, [sp, #12]
 8007cd0:	1a5b      	subs	r3, r3, r1
 8007cd2:	42ab      	cmp	r3, r5
 8007cd4:	dcf2      	bgt.n	8007cbc <_printf_i+0x210>
 8007cd6:	e7eb      	b.n	8007cb0 <_printf_i+0x204>
 8007cd8:	2500      	movs	r5, #0
 8007cda:	f104 0619 	add.w	r6, r4, #25
 8007cde:	e7f5      	b.n	8007ccc <_printf_i+0x220>
 8007ce0:	08008147 	.word	0x08008147
 8007ce4:	08008158 	.word	0x08008158

08007ce8 <__sflush_r>:
 8007ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	0716      	lsls	r6, r2, #28
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	d454      	bmi.n	8007da0 <__sflush_r+0xb8>
 8007cf6:	684b      	ldr	r3, [r1, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc02      	bgt.n	8007d02 <__sflush_r+0x1a>
 8007cfc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	dd48      	ble.n	8007d94 <__sflush_r+0xac>
 8007d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	d045      	beq.n	8007d94 <__sflush_r+0xac>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d0e:	682f      	ldr	r7, [r5, #0]
 8007d10:	6a21      	ldr	r1, [r4, #32]
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	d030      	beq.n	8007d78 <__sflush_r+0x90>
 8007d16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	0759      	lsls	r1, r3, #29
 8007d1c:	d505      	bpl.n	8007d2a <__sflush_r+0x42>
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	1ad2      	subs	r2, r2, r3
 8007d22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d24:	b10b      	cbz	r3, 8007d2a <__sflush_r+0x42>
 8007d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d28:	1ad2      	subs	r2, r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	47b0      	blx	r6
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	d106      	bne.n	8007d48 <__sflush_r+0x60>
 8007d3a:	6829      	ldr	r1, [r5, #0]
 8007d3c:	291d      	cmp	r1, #29
 8007d3e:	d82b      	bhi.n	8007d98 <__sflush_r+0xb0>
 8007d40:	4a28      	ldr	r2, [pc, #160]	@ (8007de4 <__sflush_r+0xfc>)
 8007d42:	40ca      	lsrs	r2, r1
 8007d44:	07d6      	lsls	r6, r2, #31
 8007d46:	d527      	bpl.n	8007d98 <__sflush_r+0xb0>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	6062      	str	r2, [r4, #4]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	04d9      	lsls	r1, r3, #19
 8007d50:	6022      	str	r2, [r4, #0]
 8007d52:	d504      	bpl.n	8007d5e <__sflush_r+0x76>
 8007d54:	1c42      	adds	r2, r0, #1
 8007d56:	d101      	bne.n	8007d5c <__sflush_r+0x74>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b903      	cbnz	r3, 8007d5e <__sflush_r+0x76>
 8007d5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d60:	602f      	str	r7, [r5, #0]
 8007d62:	b1b9      	cbz	r1, 8007d94 <__sflush_r+0xac>
 8007d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	d002      	beq.n	8007d72 <__sflush_r+0x8a>
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f7ff fbf5 	bl	800755c <_free_r>
 8007d72:	2300      	movs	r3, #0
 8007d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d76:	e00d      	b.n	8007d94 <__sflush_r+0xac>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b0      	blx	r6
 8007d7e:	4602      	mov	r2, r0
 8007d80:	1c50      	adds	r0, r2, #1
 8007d82:	d1c9      	bne.n	8007d18 <__sflush_r+0x30>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0c6      	beq.n	8007d18 <__sflush_r+0x30>
 8007d8a:	2b1d      	cmp	r3, #29
 8007d8c:	d001      	beq.n	8007d92 <__sflush_r+0xaa>
 8007d8e:	2b16      	cmp	r3, #22
 8007d90:	d11d      	bne.n	8007dce <__sflush_r+0xe6>
 8007d92:	602f      	str	r7, [r5, #0]
 8007d94:	2000      	movs	r0, #0
 8007d96:	e021      	b.n	8007ddc <__sflush_r+0xf4>
 8007d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9c:	b21b      	sxth	r3, r3
 8007d9e:	e01a      	b.n	8007dd6 <__sflush_r+0xee>
 8007da0:	690f      	ldr	r7, [r1, #16]
 8007da2:	2f00      	cmp	r7, #0
 8007da4:	d0f6      	beq.n	8007d94 <__sflush_r+0xac>
 8007da6:	0793      	lsls	r3, r2, #30
 8007da8:	bf18      	it	ne
 8007daa:	2300      	movne	r3, #0
 8007dac:	680e      	ldr	r6, [r1, #0]
 8007dae:	bf08      	it	eq
 8007db0:	694b      	ldreq	r3, [r1, #20]
 8007db2:	1bf6      	subs	r6, r6, r7
 8007db4:	600f      	str	r7, [r1, #0]
 8007db6:	608b      	str	r3, [r1, #8]
 8007db8:	2e00      	cmp	r6, #0
 8007dba:	ddeb      	ble.n	8007d94 <__sflush_r+0xac>
 8007dbc:	4633      	mov	r3, r6
 8007dbe:	463a      	mov	r2, r7
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	6a21      	ldr	r1, [r4, #32]
 8007dc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007dc8:	47e0      	blx	ip
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	dc07      	bgt.n	8007dde <__sflush_r+0xf6>
 8007dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dda:	81a3      	strh	r3, [r4, #12]
 8007ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dde:	4407      	add	r7, r0
 8007de0:	1a36      	subs	r6, r6, r0
 8007de2:	e7e9      	b.n	8007db8 <__sflush_r+0xd0>
 8007de4:	20400001 	.word	0x20400001

08007de8 <_fflush_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	4605      	mov	r5, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	b913      	cbnz	r3, 8007df8 <_fflush_r+0x10>
 8007df2:	2500      	movs	r5, #0
 8007df4:	4628      	mov	r0, r5
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	b118      	cbz	r0, 8007e02 <_fflush_r+0x1a>
 8007dfa:	6a03      	ldr	r3, [r0, #32]
 8007dfc:	b90b      	cbnz	r3, 8007e02 <_fflush_r+0x1a>
 8007dfe:	f7ff f947 	bl	8007090 <__sinit>
 8007e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f3      	beq.n	8007df2 <_fflush_r+0xa>
 8007e0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e0c:	07d0      	lsls	r0, r2, #31
 8007e0e:	d404      	bmi.n	8007e1a <_fflush_r+0x32>
 8007e10:	0599      	lsls	r1, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_fflush_r+0x32>
 8007e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e16:	f7ff fb90 	bl	800753a <__retarget_lock_acquire_recursive>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f7ff ff63 	bl	8007ce8 <__sflush_r>
 8007e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e24:	4605      	mov	r5, r0
 8007e26:	07da      	lsls	r2, r3, #31
 8007e28:	d4e4      	bmi.n	8007df4 <_fflush_r+0xc>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d4e1      	bmi.n	8007df4 <_fflush_r+0xc>
 8007e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e32:	f7ff fb83 	bl	800753c <__retarget_lock_release_recursive>
 8007e36:	e7dd      	b.n	8007df4 <_fflush_r+0xc>

08007e38 <__swhatbuf_r>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e40:	4615      	mov	r5, r2
 8007e42:	2900      	cmp	r1, #0
 8007e44:	461e      	mov	r6, r3
 8007e46:	b096      	sub	sp, #88	@ 0x58
 8007e48:	da0c      	bge.n	8007e64 <__swhatbuf_r+0x2c>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e52:	bf14      	ite	ne
 8007e54:	2340      	movne	r3, #64	@ 0x40
 8007e56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	6031      	str	r1, [r6, #0]
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	b016      	add	sp, #88	@ 0x58
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	466a      	mov	r2, sp
 8007e66:	f000 f849 	bl	8007efc <_fstat_r>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	dbed      	blt.n	8007e4a <__swhatbuf_r+0x12>
 8007e6e:	9901      	ldr	r1, [sp, #4]
 8007e70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e78:	4259      	negs	r1, r3
 8007e7a:	4159      	adcs	r1, r3
 8007e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e80:	e7eb      	b.n	8007e5a <__swhatbuf_r+0x22>

08007e82 <__smakebuf_r>:
 8007e82:	898b      	ldrh	r3, [r1, #12]
 8007e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e86:	079d      	lsls	r5, r3, #30
 8007e88:	4606      	mov	r6, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	d507      	bpl.n	8007e9e <__smakebuf_r+0x1c>
 8007e8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	2301      	movs	r3, #1
 8007e98:	6163      	str	r3, [r4, #20]
 8007e9a:	b003      	add	sp, #12
 8007e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9e:	466a      	mov	r2, sp
 8007ea0:	ab01      	add	r3, sp, #4
 8007ea2:	f7ff ffc9 	bl	8007e38 <__swhatbuf_r>
 8007ea6:	9f00      	ldr	r7, [sp, #0]
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	4639      	mov	r1, r7
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff fbbf 	bl	8007630 <_malloc_r>
 8007eb2:	b948      	cbnz	r0, 8007ec8 <__smakebuf_r+0x46>
 8007eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb8:	059a      	lsls	r2, r3, #22
 8007eba:	d4ee      	bmi.n	8007e9a <__smakebuf_r+0x18>
 8007ebc:	f023 0303 	bic.w	r3, r3, #3
 8007ec0:	f043 0302 	orr.w	r3, r3, #2
 8007ec4:	81a3      	strh	r3, [r4, #12]
 8007ec6:	e7e2      	b.n	8007e8e <__smakebuf_r+0xc>
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	6020      	str	r0, [r4, #0]
 8007ed8:	b15b      	cbz	r3, 8007ef2 <__smakebuf_r+0x70>
 8007eda:	4630      	mov	r0, r6
 8007edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee0:	f000 f81e 	bl	8007f20 <_isatty_r>
 8007ee4:	b128      	cbz	r0, 8007ef2 <__smakebuf_r+0x70>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	f043 0301 	orr.w	r3, r3, #1
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	431d      	orrs	r5, r3
 8007ef6:	81a5      	strh	r5, [r4, #12]
 8007ef8:	e7cf      	b.n	8007e9a <__smakebuf_r+0x18>
	...

08007efc <_fstat_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	2300      	movs	r3, #0
 8007f00:	4d06      	ldr	r5, [pc, #24]	@ (8007f1c <_fstat_r+0x20>)
 8007f02:	4604      	mov	r4, r0
 8007f04:	4608      	mov	r0, r1
 8007f06:	4611      	mov	r1, r2
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	f7f8 fd81 	bl	8000a10 <_fstat>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d102      	bne.n	8007f18 <_fstat_r+0x1c>
 8007f12:	682b      	ldr	r3, [r5, #0]
 8007f14:	b103      	cbz	r3, 8007f18 <_fstat_r+0x1c>
 8007f16:	6023      	str	r3, [r4, #0]
 8007f18:	bd38      	pop	{r3, r4, r5, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20001da4 	.word	0x20001da4

08007f20 <_isatty_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	2300      	movs	r3, #0
 8007f24:	4d05      	ldr	r5, [pc, #20]	@ (8007f3c <_isatty_r+0x1c>)
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7f8 fd7f 	bl	8000a2e <_isatty>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_isatty_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_isatty_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20001da4 	.word	0x20001da4

08007f40 <_sbrk_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	2300      	movs	r3, #0
 8007f44:	4d05      	ldr	r5, [pc, #20]	@ (8007f5c <_sbrk_r+0x1c>)
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7f8 fd86 	bl	8000a5c <_sbrk>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_sbrk_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_sbrk_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20001da4 	.word	0x20001da4

08007f60 <memchr>:
 8007f60:	4603      	mov	r3, r0
 8007f62:	b510      	push	{r4, lr}
 8007f64:	b2c9      	uxtb	r1, r1
 8007f66:	4402      	add	r2, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	d101      	bne.n	8007f72 <memchr+0x12>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e003      	b.n	8007f7a <memchr+0x1a>
 8007f72:	7804      	ldrb	r4, [r0, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	428c      	cmp	r4, r1
 8007f78:	d1f6      	bne.n	8007f68 <memchr+0x8>
 8007f7a:	bd10      	pop	{r4, pc}

08007f7c <_init>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr

08007f88 <_fini>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr
