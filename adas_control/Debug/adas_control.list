
adas_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007714  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007824  08007824  00008824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800798c  0800798c  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800798c  0800798c  0000906c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800798c  0800798c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0000898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007990  08007990  00008990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007994  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cfc  2000006c  08007a00  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d68  08007a00  00009d68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b304  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d6  00000000  00000000  00024399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00028770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a2  00000000  00000000  00029e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c100  00000000  00000000  0002b012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1c3  00000000  00000000  00047112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009954d  00000000  00000000  000622d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb822  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065fc  00000000  00000000  000fb868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00101e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800780c 	.word	0x0800780c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800780c 	.word	0x0800780c

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	@ (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800015a:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2210      	movs	r2, #16
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f000 ffab 	bl	80010fc <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 facc 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	200000d0 	.word	0x200000d0
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a20      	ldr	r2, [pc, #128]	@ (8000258 <HAL_CAN_MspInit+0x9c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d139      	bne.n	8000250 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b1c      	ldr	r3, [pc, #112]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b19      	ldr	r3, [pc, #100]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480f      	ldr	r0, [pc, #60]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 8000222:	f001 fdc7 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 800023c:	f001 fdba 	bl	8001db4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2105      	movs	r1, #5
 8000244:	2014      	movs	r0, #20
 8000246:	f001 fd8a 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800024a:	2014      	movs	r0, #20
 800024c:	f001 fda3 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40006400 	.word	0x40006400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <speed_SET>:
	car.direction = STRAIGHT;
}

// 모터 속도 설정
void speed_SET()
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
	uint8_t ULTRA_front = car.ultra[0];
 800026a:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <speed_SET+0x58>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	71fb      	strb	r3, [r7, #7]

	if(ULTRA_front >= 12)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	2b0b      	cmp	r3, #11
 8000274:	d903      	bls.n	800027e <speed_SET+0x1a>
	{
		car.motor_speed = 550;
 8000276:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <speed_SET+0x58>)
 8000278:	2226      	movs	r2, #38	@ 0x26
 800027a:	719a      	strb	r2, [r3, #6]
	{
		car.motor_speed = (ULTRA_front - 7) * 50 + 300;
	}
	else
		car.motor_speed = 0;
}
 800027c:	e018      	b.n	80002b0 <speed_SET+0x4c>
	else if(ULTRA_front >= 7 && ULTRA_front < 12)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b06      	cmp	r3, #6
 8000282:	d912      	bls.n	80002aa <speed_SET+0x46>
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	2b0b      	cmp	r3, #11
 8000288:	d80f      	bhi.n	80002aa <speed_SET+0x46>
		car.motor_speed = (ULTRA_front - 7) * 50 + 300;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	461a      	mov	r2, r3
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	4413      	add	r3, r2
 8000292:	461a      	mov	r2, r3
 8000294:	0091      	lsls	r1, r2, #2
 8000296:	461a      	mov	r2, r3
 8000298:	460b      	mov	r3, r1
 800029a:	4413      	add	r3, r2
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	3b32      	subs	r3, #50	@ 0x32
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <speed_SET+0x58>)
 80002a6:	719a      	strb	r2, [r3, #6]
}
 80002a8:	e002      	b.n	80002b0 <speed_SET+0x4c>
		car.motor_speed = 0;
 80002aa:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <speed_SET+0x58>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	719a      	strb	r2, [r3, #6]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	200000f8 	.word	0x200000f8

080002c0 <direction_SET>:

// 차 방향 설정
void direction_SET()
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	// IR 값이 1이면 검은색 라인, 0이면 흰색
	uint8_t IR_l = car.ir[0];
 80002c6:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <direction_SET+0x60>)
 80002c8:	791b      	ldrb	r3, [r3, #4]
 80002ca:	71fb      	strb	r3, [r7, #7]
	uint8_t IR_r = car.ir[1];
 80002cc:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <direction_SET+0x60>)
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	71bb      	strb	r3, [r7, #6]

	if(IR_l == 1 && IR_r == 1)      // 직진
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d106      	bne.n	80002e6 <direction_SET+0x26>
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d103      	bne.n	80002e6 <direction_SET+0x26>
		car.direction = STRAIGHT;
 80002de:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <direction_SET+0x60>)
 80002e0:	2202      	movs	r2, #2
 80002e2:	71da      	strb	r2, [r3, #7]
 80002e4:	e017      	b.n	8000316 <direction_SET+0x56>
	else if(IR_l == 1 && IR_r == 0) // 왼쪽으로 회전
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d106      	bne.n	80002fa <direction_SET+0x3a>
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d103      	bne.n	80002fa <direction_SET+0x3a>
		car.direction = LEFT;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <direction_SET+0x60>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	71da      	strb	r2, [r3, #7]
 80002f8:	e00d      	b.n	8000316 <direction_SET+0x56>
	else if(IR_l == 0 && IR_r == 1) // 오른쪽으로 회전
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d106      	bne.n	800030e <direction_SET+0x4e>
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d103      	bne.n	800030e <direction_SET+0x4e>
		car.direction = RIGHT;
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <direction_SET+0x60>)
 8000308:	2201      	movs	r2, #1
 800030a:	71da      	strb	r2, [r3, #7]
 800030c:	e003      	b.n	8000316 <direction_SET+0x56>
	else							// 후진
		car.direction = BACK;
 800030e:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <direction_SET+0x60>)
 8000310:	2203      	movs	r2, #3
 8000312:	71da      	strb	r2, [r3, #7]
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	200000f8 	.word	0x200000f8

08000324 <_write>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

int _write(int file, char* p, int len)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	b29a      	uxth	r2, r3
 8000334:	230a      	movs	r3, #10
 8000336:	68b9      	ldr	r1, [r7, #8]
 8000338:	4803      	ldr	r0, [pc, #12]	@ (8000348 <_write+0x24>)
 800033a:	f003 fb12 	bl	8003962 <HAL_UART_Transmit>
	return len;
 800033e:	687b      	ldr	r3, [r7, #4]
}
 8000340:	4618      	mov	r0, r3
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200001e8 	.word	0x200001e8

0800034c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	printf("STM32 control Start!!\n");
 8000350:	4816      	ldr	r0, [pc, #88]	@ (80003ac <MX_FREERTOS_Init+0x60>)
 8000352:	f006 fb83 	bl	8006a5c <puts>

	// 핸들 초기화
	handle_INIT();
 8000356:	f000 f97d 	bl	8000654 <handle_INIT>

	// 모터 초기화
	motor_INIT();
 800035a:	f000 f9fb 	bl	8000754 <motor_INIT>
	//led_INIT();


	/* CAN 설정 부분 */
	// 필터 설정
	filter_INIT(0x7F3, 0x106);
 800035e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8000362:	f240 70f3 	movw	r0, #2035	@ 0x7f3
 8000366:	f000 fabb 	bl	80008e0 <filter_INIT>

	// can 채널에 필터 적용
	HAL_CAN_ConfigFilter(&hcan, &canFilter);
 800036a:	4911      	ldr	r1, [pc, #68]	@ (80003b0 <MX_FREERTOS_Init+0x64>)
 800036c:	4811      	ldr	r0, [pc, #68]	@ (80003b4 <MX_FREERTOS_Init+0x68>)
 800036e:	f000 ffc0 	bl	80012f2 <HAL_CAN_ConfigFilter>

	// 수신되면 인터럽트가 발생할 수 있도록
	//HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);

	// 송수신을 하기 위해 Normal 모드 진입
	HAL_CAN_Start(&hcan);
 8000372:	4810      	ldr	r0, [pc, #64]	@ (80003b4 <MX_FREERTOS_Init+0x68>)
 8000374:	f001 f886 	bl	8001484 <HAL_CAN_Start>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of motorTask */
  motorTaskHandle = osThreadNew(motorTASK, NULL, &motorTask_attributes);
 8000378:	4a0f      	ldr	r2, [pc, #60]	@ (80003b8 <MX_FREERTOS_Init+0x6c>)
 800037a:	2100      	movs	r1, #0
 800037c:	480f      	ldr	r0, [pc, #60]	@ (80003bc <MX_FREERTOS_Init+0x70>)
 800037e:	f003 fd51 	bl	8003e24 <osThreadNew>
 8000382:	4603      	mov	r3, r0
 8000384:	4a0e      	ldr	r2, [pc, #56]	@ (80003c0 <MX_FREERTOS_Init+0x74>)
 8000386:	6013      	str	r3, [r2, #0]

  /* creation of buzTask */
  buzTaskHandle = osThreadNew(buzTASK, NULL, &buzTask_attributes);
 8000388:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <MX_FREERTOS_Init+0x78>)
 800038a:	2100      	movs	r1, #0
 800038c:	480e      	ldr	r0, [pc, #56]	@ (80003c8 <MX_FREERTOS_Init+0x7c>)
 800038e:	f003 fd49 	bl	8003e24 <osThreadNew>
 8000392:	4603      	mov	r3, r0
 8000394:	4a0d      	ldr	r2, [pc, #52]	@ (80003cc <MX_FREERTOS_Init+0x80>)
 8000396:	6013      	str	r3, [r2, #0]

  /* creation of recvTask */
  recvTaskHandle = osThreadNew(recvTASK, NULL, &recvTask_attributes);
 8000398:	4a0d      	ldr	r2, [pc, #52]	@ (80003d0 <MX_FREERTOS_Init+0x84>)
 800039a:	2100      	movs	r1, #0
 800039c:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <MX_FREERTOS_Init+0x88>)
 800039e:	f003 fd41 	bl	8003e24 <osThreadNew>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a0c      	ldr	r2, [pc, #48]	@ (80003d8 <MX_FREERTOS_Init+0x8c>)
 80003a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	08007844 	.word	0x08007844
 80003b0:	20000088 	.word	0x20000088
 80003b4:	200000d0 	.word	0x200000d0
 80003b8:	080078c0 	.word	0x080078c0
 80003bc:	080003dd 	.word	0x080003dd
 80003c0:	20000100 	.word	0x20000100
 80003c4:	080078e4 	.word	0x080078e4
 80003c8:	08000459 	.word	0x08000459
 80003cc:	20000104 	.word	0x20000104
 80003d0:	08007908 	.word	0x08007908
 80003d4:	08000469 	.word	0x08000469
 80003d8:	20000108 	.word	0x20000108

080003dc <motorTASK>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_motorTASK */
void motorTASK(void *argument)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		// 라인트레이서

		speed_SET(); 		// 모터 속도 설정
 80003e4:	f7ff ff3e 	bl	8000264 <speed_SET>
		direction_SET();	// 차량 방향 설정
 80003e8:	f7ff ff6a 	bl	80002c0 <direction_SET>

		uint8_t speed = car.motor_speed;
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <motorTASK+0x70>)
 80003ee:	799b      	ldrb	r3, [r3, #6]
 80003f0:	73fb      	strb	r3, [r7, #15]
		uint8_t dir = car.direction;
 80003f2:	4b16      	ldr	r3, [pc, #88]	@ (800044c <motorTASK+0x70>)
 80003f4:	79db      	ldrb	r3, [r3, #7]
 80003f6:	73bb      	strb	r3, [r7, #14]
//		osDelay(50);
//		motor_rear();
//		motor_speed(350);
//		osDelay(50);

		printf("dir : %d\n", dir);
 80003f8:	7bbb      	ldrb	r3, [r7, #14]
 80003fa:	4619      	mov	r1, r3
 80003fc:	4814      	ldr	r0, [pc, #80]	@ (8000450 <motorTASK+0x74>)
 80003fe:	f006 fac5 	bl	800698c <iprintf>
		printf("speed : %d\n", speed);
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	4619      	mov	r1, r3
 8000406:	4813      	ldr	r0, [pc, #76]	@ (8000454 <motorTASK+0x78>)
 8000408:	f006 fac0 	bl	800698c <iprintf>
		if(dir == STRAIGHT)
 800040c:	7bbb      	ldrb	r3, [r7, #14]
 800040e:	2b02      	cmp	r3, #2
 8000410:	d103      	bne.n	800041a <motorTASK+0x3e>
		{
			motor_front(400);
 8000412:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000416:	f000 f9ab 	bl	8000770 <motor_front>
			//motor_speed(speed);
		}
		if(dir == LEFT)
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d103      	bne.n	8000428 <motorTASK+0x4c>
		{
			motor_left(400);
 8000420:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000424:	f000 f9d2 	bl	80007cc <motor_left>
			//motor_speed(speed * 2 / 3);
		}
		if(dir == RIGHT)
 8000428:	7bbb      	ldrb	r3, [r7, #14]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d103      	bne.n	8000436 <motorTASK+0x5a>
		{
			motor_right(400);
 800042e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000432:	f000 f9f9 	bl	8000828 <motor_right>
			//motor_speed(speed * 2 / 3);
		}
		if(dir == BACK)
 8000436:	7bbb      	ldrb	r3, [r7, #14]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d103      	bne.n	8000444 <motorTASK+0x68>
		{
			motor_rear(400);
 800043c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000440:	f000 fa20 	bl	8000884 <motor_rear>
			//motor_speed(speed * 2 / 3);
		}

		osDelay(10);
 8000444:	200a      	movs	r0, #10
 8000446:	f003 fd7f 	bl	8003f48 <osDelay>
	{
 800044a:	e7cb      	b.n	80003e4 <motorTASK+0x8>
 800044c:	200000f8 	.word	0x200000f8
 8000450:	0800785c 	.word	0x0800785c
 8000454:	08007868 	.word	0x08007868

08000458 <buzTASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_buzTASK */
void buzTASK(void *argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buzTASK */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f003 fd71 	bl	8003f48 <osDelay>
 8000466:	e7fb      	b.n	8000460 <buzTASK+0x8>

08000468 <recvTASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_recvTASK */
void recvTASK(void *argument)
{
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	b089      	sub	sp, #36	@ 0x24
 800046c:	af06      	add	r7, sp, #24
 800046e:	6078      	str	r0, [r7, #4]
		//		osDelay(1000);
		//		led_SET(255, 0, 0);     // 빨간색
		//		osDelay(1000);

		// 수신 FIFO0에 데이터가 있는지 확인 (폴링방식 수신)
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0)
 8000470:	2100      	movs	r1, #0
 8000472:	482b      	ldr	r0, [pc, #172]	@ (8000520 <recvTASK+0xb8>)
 8000474:	f001 f96b 	bl	800174e <HAL_CAN_GetRxFifoFillLevel>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f8      	beq.n	8000470 <recvTASK+0x8>
		{
			// 수신 메시지 읽기
			if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800047e:	4b29      	ldr	r3, [pc, #164]	@ (8000524 <recvTASK+0xbc>)
 8000480:	4a29      	ldr	r2, [pc, #164]	@ (8000528 <recvTASK+0xc0>)
 8000482:	2100      	movs	r1, #0
 8000484:	4826      	ldr	r0, [pc, #152]	@ (8000520 <recvTASK+0xb8>)
 8000486:	f001 f841 	bl	800150c <HAL_CAN_GetRxMessage>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1ef      	bne.n	8000470 <recvTASK+0x8>
			{
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 8000490:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <recvTASK+0xc0>)
 8000492:	6819      	ldr	r1, [r3, #0]
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 8000494:	4b23      	ldr	r3, [pc, #140]	@ (8000524 <recvTASK+0xbc>)
 8000496:	781b      	ldrb	r3, [r3, #0]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 8000498:	469c      	mov	ip, r3
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 800049a:	4b22      	ldr	r3, [pc, #136]	@ (8000524 <recvTASK+0xbc>)
 800049c:	785b      	ldrb	r3, [r3, #1]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 800049e:	469e      	mov	lr, r3
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80004a0:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <recvTASK+0xbc>)
 80004a2:	789b      	ldrb	r3, [r3, #2]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 80004a4:	461a      	mov	r2, r3
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80004a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000524 <recvTASK+0xbc>)
 80004a8:	78db      	ldrb	r3, [r3, #3]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 80004aa:	4618      	mov	r0, r3
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80004ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000524 <recvTASK+0xbc>)
 80004ae:	791b      	ldrb	r3, [r3, #4]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 80004b0:	461c      	mov	r4, r3
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80004b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000524 <recvTASK+0xbc>)
 80004b4:	795b      	ldrb	r3, [r3, #5]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 80004b6:	461d      	mov	r5, r3
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80004b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000524 <recvTASK+0xbc>)
 80004ba:	799b      	ldrb	r3, [r3, #6]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 80004bc:	461e      	mov	r6, r3
						RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80004be:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <recvTASK+0xbc>)
 80004c0:	79db      	ldrb	r3, [r3, #7]
				printf("CAN RX: ID=0x%03lX DATA=%d %d %d %d %d %d %d %d\n",
 80004c2:	9305      	str	r3, [sp, #20]
 80004c4:	9604      	str	r6, [sp, #16]
 80004c6:	9503      	str	r5, [sp, #12]
 80004c8:	9402      	str	r4, [sp, #8]
 80004ca:	9001      	str	r0, [sp, #4]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	4673      	mov	r3, lr
 80004d0:	4662      	mov	r2, ip
 80004d2:	4816      	ldr	r0, [pc, #88]	@ (800052c <recvTASK+0xc4>)
 80004d4:	f006 fa5a 	bl	800698c <iprintf>

				if(RxHeader.StdId == 0x102) // 초음파
 80004d8:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <recvTASK+0xc0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80004e0:	d110      	bne.n	8000504 <recvTASK+0x9c>
				{
					car.ultra[0] = RxData[0]; // 전방
 80004e2:	4b10      	ldr	r3, [pc, #64]	@ (8000524 <recvTASK+0xbc>)
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <recvTASK+0xc8>)
 80004e8:	701a      	strb	r2, [r3, #0]
					car.ultra[1] = RxData[1]; // 왼쪽 측후방
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <recvTASK+0xbc>)
 80004ec:	785a      	ldrb	r2, [r3, #1]
 80004ee:	4b10      	ldr	r3, [pc, #64]	@ (8000530 <recvTASK+0xc8>)
 80004f0:	705a      	strb	r2, [r3, #1]
					car.ultra[2] = RxData[2]; // 후방
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <recvTASK+0xbc>)
 80004f4:	789a      	ldrb	r2, [r3, #2]
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <recvTASK+0xc8>)
 80004f8:	709a      	strb	r2, [r3, #2]
					car.ultra[3] = RxData[3]; // 오른쪽 측후방
 80004fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <recvTASK+0xbc>)
 80004fc:	78da      	ldrb	r2, [r3, #3]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <recvTASK+0xc8>)
 8000500:	70da      	strb	r2, [r3, #3]
 8000502:	e7b5      	b.n	8000470 <recvTASK+0x8>

				}
				else if(RxHeader.StdId == 0x106) // ir
 8000504:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <recvTASK+0xc0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800050c:	d1b0      	bne.n	8000470 <recvTASK+0x8>
				{
					car.ir[0] = RxData[0]; // 왼쪽
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <recvTASK+0xbc>)
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	4b07      	ldr	r3, [pc, #28]	@ (8000530 <recvTASK+0xc8>)
 8000514:	711a      	strb	r2, [r3, #4]
					car.ir[1] = RxData[1]; // 오른쪽
 8000516:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <recvTASK+0xbc>)
 8000518:	785a      	ldrb	r2, [r3, #1]
 800051a:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <recvTASK+0xc8>)
 800051c:	715a      	strb	r2, [r3, #5]
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0)
 800051e:	e7a7      	b.n	8000470 <recvTASK+0x8>
 8000520:	200000d0 	.word	0x200000d0
 8000524:	200000c8 	.word	0x200000c8
 8000528:	200000b0 	.word	0x200000b0
 800052c:	08007874 	.word	0x08007874
 8000530:	200000f8 	.word	0x200000f8

08000534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000548:	4b3e      	ldr	r3, [pc, #248]	@ (8000644 <MX_GPIO_Init+0x110>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a3d      	ldr	r2, [pc, #244]	@ (8000644 <MX_GPIO_Init+0x110>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b3b      	ldr	r3, [pc, #236]	@ (8000644 <MX_GPIO_Init+0x110>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0310 	and.w	r3, r3, #16
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000560:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_GPIO_Init+0x110>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a37      	ldr	r2, [pc, #220]	@ (8000644 <MX_GPIO_Init+0x110>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <MX_GPIO_Init+0x110>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0320 	and.w	r3, r3, #32
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <MX_GPIO_Init+0x110>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <MX_GPIO_Init+0x110>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_GPIO_Init+0x110>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000590:	4b2c      	ldr	r3, [pc, #176]	@ (8000644 <MX_GPIO_Init+0x110>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a2b      	ldr	r2, [pc, #172]	@ (8000644 <MX_GPIO_Init+0x110>)
 8000596:	f043 0308 	orr.w	r3, r3, #8
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <MX_GPIO_Init+0x110>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0308 	and.w	r3, r3, #8
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2120      	movs	r1, #32
 80005ac:	4826      	ldr	r0, [pc, #152]	@ (8000648 <MX_GPIO_Init+0x114>)
 80005ae:	f001 fd85 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80005b8:	4824      	ldr	r0, [pc, #144]	@ (800064c <MX_GPIO_Init+0x118>)
 80005ba:	f001 fd7f 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80005c4:	4822      	ldr	r0, [pc, #136]	@ (8000650 <MX_GPIO_Init+0x11c>)
 80005c6:	f001 fd79 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	481b      	ldr	r0, [pc, #108]	@ (800064c <MX_GPIO_Init+0x118>)
 80005e0:	f001 fbe8 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005e4:	2320      	movs	r3, #32
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4813      	ldr	r0, [pc, #76]	@ (8000648 <MX_GPIO_Init+0x114>)
 80005fc:	f001 fbda 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000600:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2302      	movs	r3, #2
 8000610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <MX_GPIO_Init+0x118>)
 800061a:	f001 fbcb 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800061e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <MX_GPIO_Init+0x11c>)
 8000638:	f001 fbbc 	bl	8001db4 <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800
 800064c:	40011000 	.word	0x40011000
 8000650:	40010c00 	.word	0x40010c00

08000654 <handle_INIT>:
#include "handle.h"

void handle_INIT()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	4802      	ldr	r0, [pc, #8]	@ (8000664 <handle_INIT+0x10>)
 800065c:	f002 fa80 	bl	8002b60 <HAL_TIM_PWM_Start>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000158 	.word	0x20000158

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fd14 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f812 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f7ff ff5e 	bl	8000534 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000678:	f000 fc74 	bl	8000f64 <MX_USART2_UART_Init>
  MX_CAN_Init();
 800067c:	f7ff fd68 	bl	8000150 <MX_CAN_Init>
  MX_TIM3_Init();
 8000680:	f000 fb68 	bl	8000d54 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000684:	f000 fac6 	bl	8000c14 <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000688:	f003 fb84 	bl	8003d94 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800068c:	f7ff fe5e 	bl	800034c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000690:	f003 fba2 	bl	8003dd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <main+0x2c>

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	@ 0x40
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2228      	movs	r2, #40	@ 0x28
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fab8 	bl	8006c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80006d6:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fd03 	bl	80020ec <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006ec:	f000 f82c 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 ff70 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000716:	f000 f817 	bl	8000748 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3740      	adds	r7, #64	@ 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000736:	f000 fcc5 	bl	80010c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40000800 	.word	0x40000800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <motor_INIT>:
#include "motor.h"


void motor_INIT()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 왼쪽
 8000758:	2100      	movs	r1, #0
 800075a:	4804      	ldr	r0, [pc, #16]	@ (800076c <motor_INIT+0x18>)
 800075c:	f002 fa00 	bl	8002b60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // 오른쪽
 8000760:	2104      	movs	r1, #4
 8000762:	4802      	ldr	r0, [pc, #8]	@ (800076c <motor_INIT+0x18>)
 8000764:	f002 f9fc 	bl	8002b60 <HAL_TIM_PWM_Start>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200001a0 	.word	0x200001a0

08000770 <motor_front>:

void motor_front(uint16_t speed)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
	// 왼쪽 : 정방향, 오른쪽 : 정방향
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); // IN1
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000780:	480f      	ldr	r0, [pc, #60]	@ (80007c0 <motor_front+0x50>)
 8000782:	f001 fc9b 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1); // IN2
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <motor_front+0x50>)
 800078e:	f001 fc95 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0); // IN3
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000798:	480a      	ldr	r0, [pc, #40]	@ (80007c4 <motor_front+0x54>)
 800079a:	f001 fc8f 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1); // IN4
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a4:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <motor_front+0x54>)
 80007a6:	f001 fc89 	bl	80020bc <HAL_GPIO_WritePin>

	TIM3->CCR1 = speed;
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <motor_front+0x58>)
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = speed;
 80007b0:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <motor_front+0x58>)
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010c00 	.word	0x40010c00
 80007c4:	40011000 	.word	0x40011000
 80007c8:	40000400 	.word	0x40000400

080007cc <motor_left>:

void motor_left(uint16_t speed)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); // IN1
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007dc:	480f      	ldr	r0, [pc, #60]	@ (800081c <motor_left+0x50>)
 80007de:	f001 fc6d 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1); // IN2
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <motor_left+0x50>)
 80007ea:	f001 fc67 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0); // IN3
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f4:	480a      	ldr	r0, [pc, #40]	@ (8000820 <motor_left+0x54>)
 80007f6:	f001 fc61 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1); // IN4
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000800:	4807      	ldr	r0, [pc, #28]	@ (8000820 <motor_left+0x54>)
 8000802:	f001 fc5b 	bl	80020bc <HAL_GPIO_WritePin>

	TIM3->CCR1 = 0;
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <motor_left+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = speed;
 800080c:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <motor_left+0x58>)
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010c00 	.word	0x40010c00
 8000820:	40011000 	.word	0x40011000
 8000824:	40000400 	.word	0x40000400

08000828 <motor_right>:

void motor_right(uint16_t speed)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); // IN1
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000838:	480f      	ldr	r0, [pc, #60]	@ (8000878 <motor_right+0x50>)
 800083a:	f001 fc3f 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1); // IN2
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <motor_right+0x50>)
 8000846:	f001 fc39 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0); // IN3
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000850:	480a      	ldr	r0, [pc, #40]	@ (800087c <motor_right+0x54>)
 8000852:	f001 fc33 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1); // IN4
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085c:	4807      	ldr	r0, [pc, #28]	@ (800087c <motor_right+0x54>)
 800085e:	f001 fc2d 	bl	80020bc <HAL_GPIO_WritePin>

	TIM3->CCR1 = speed;
 8000862:	4a07      	ldr	r2, [pc, #28]	@ (8000880 <motor_right+0x58>)
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = 0;
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <motor_right+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40010c00 	.word	0x40010c00
 800087c:	40011000 	.word	0x40011000
 8000880:	40000400 	.word	0x40000400

08000884 <motor_rear>:

void motor_rear(uint16_t speed)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); // IN1
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <motor_rear+0x50>)
 8000896:	f001 fc11 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0); // IN2
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <motor_rear+0x50>)
 80008a2:	f001 fc0b 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1); // IN3
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ac:	480a      	ldr	r0, [pc, #40]	@ (80008d8 <motor_rear+0x54>)
 80008ae:	f001 fc05 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0); // IN4
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <motor_rear+0x54>)
 80008ba:	f001 fbff 	bl	80020bc <HAL_GPIO_WritePin>

	TIM3->CCR1 = speed;
 80008be:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <motor_rear+0x58>)
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = speed;
 80008c4:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <motor_rear+0x58>)
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	40011000 	.word	0x40011000
 80008dc:	40000400 	.word	0x40000400

080008e0 <filter_INIT>:


// 필터 설정
// filter_INIT(0x7F3, 0x106);
void filter_INIT(uint32_t f_maskid, uint32_t f_id)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	// 수신필터 설정은 normal 모드에 들어가기전 초기화 모드에서 설정해줘야 하기 때문에
	// HAL_CAN_Start() 함수 호출 전에 완료해야 함
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <filter_INIT+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 80008f0:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <filter_INIT+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
	canFilter.FilterMaskIdHigh = f_maskid << 5;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	015b      	lsls	r3, r3, #5
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <filter_INIT+0x54>)
 80008fc:	6093      	str	r3, [r2, #8]
	canFilter.FilterIdHigh = f_id << 5;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	015b      	lsls	r3, r3, #5
 8000902:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <filter_INIT+0x54>)
 8000904:	6013      	str	r3, [r2, #0]
	canFilter.FilterMaskIdLow = f_maskid << 5;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	015b      	lsls	r3, r3, #5
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <filter_INIT+0x54>)
 800090c:	60d3      	str	r3, [r2, #12]
	canFilter.FilterIdLow = f_id << 5;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	015b      	lsls	r3, r3, #5
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <filter_INIT+0x54>)
 8000914:	6053      	str	r3, [r2, #4]
	canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <filter_INIT+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
	canFilter.FilterBank = 0;
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <filter_INIT+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
	canFilter.FilterActivation = ENABLE;
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <filter_INIT+0x54>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000088 	.word	0x20000088

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_MspInit+0x68>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <HAL_MspInit+0x68>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_MspInit+0x68>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_MspInit+0x68>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a11      	ldr	r2, [pc, #68]	@ (80009a0 <HAL_MspInit+0x68>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_MspInit+0x68>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	f06f 0001 	mvn.w	r0, #1
 8000976:	f001 f9f2 	bl	8001d5e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <HAL_MspInit+0x6c>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <HAL_MspInit+0x6c>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010000 	.word	0x40010000

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	@ 0x38
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009be:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <HAL_InitTick+0xe8>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a33      	ldr	r2, [pc, #204]	@ (8000a90 <HAL_InitTick+0xe8>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <HAL_InitTick+0xe8>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d6:	f107 0210 	add.w	r2, r7, #16
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 ff75 	bl	80028d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d103      	bne.n	80009f8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f0:	f001 ff46 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 80009f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80009f6:	e004      	b.n	8000a02 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f8:	f001 ff42 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 80009fc:	4603      	mov	r3, r0
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a04:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <HAL_InitTick+0xec>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a12:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <HAL_InitTick+0xf4>)
 8000a14:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a22:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a38:	f001 ff98 	bl	800296c <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d11b      	bne.n	8000a82 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a4a:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a4c:	f001 ffde 	bl	8002a0c <HAL_TIM_Base_Start_IT>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d111      	bne.n	8000a82 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a5e:	201e      	movs	r0, #30
 8000a60:	f001 f999 	bl	8001d96 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	d808      	bhi.n	8000a7c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	201e      	movs	r0, #30
 8000a70:	f001 f975 	bl	8001d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a74:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_InitTick+0xf8>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	e002      	b.n	8000a82 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3738      	adds	r7, #56	@ 0x38
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	2000010c 	.word	0x2000010c
 8000a9c:	40000800 	.word	0x40000800
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ade:	f000 fe5d 	bl	800179c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000d0 	.word	0x200000d0

08000aec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <TIM4_IRQHandler+0x10>)
 8000af2:	f002 f8d7 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000010c 	.word	0x2000010c

08000b00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
  }

  return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b60:	605a      	str	r2, [r3, #4]
  return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
	...

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f006 f8d2 	bl	8006d74 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20005000 	.word	0x20005000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	20000154 	.word	0x20000154
 8000c04:	20001d68 	.word	0x20001d68

08000c08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b096      	sub	sp, #88	@ 0x58
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2220      	movs	r2, #32
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f005 ffe5 	bl	8006c1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c52:	4b3e      	ldr	r3, [pc, #248]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c54:	4a3e      	ldr	r2, [pc, #248]	@ (8000d50 <MX_TIM1_Init+0x13c>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000c58:	4b3c      	ldr	r3, [pc, #240]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c5a:	223f      	movs	r2, #63	@ 0x3f
 8000c5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000c64:	4b39      	ldr	r3, [pc, #228]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c66:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c72:	4b36      	ldr	r3, [pc, #216]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b34      	ldr	r3, [pc, #208]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7e:	4833      	ldr	r0, [pc, #204]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c80:	f001 fe74 	bl	800296c <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c8a:	f7ff fd5d 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482c      	ldr	r0, [pc, #176]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c9c:	f002 f9b4 	bl	8003008 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ca6:	f7ff fd4f 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000caa:	4828      	ldr	r0, [pc, #160]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000cac:	f001 ff00 	bl	8002ab0 <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cb6:	f7ff fd47 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4820      	ldr	r0, [pc, #128]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000cca:	f002 fd39 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cd4:	f7ff fd38 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd8:	2360      	movs	r3, #96	@ 0x60
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4813      	ldr	r0, [pc, #76]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000cfe:	f002 f8c1 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d08:	f7ff fd1e 	bl	8000748 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000d30:	f002 fd64 	bl	80037fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d3a:	f7ff fd05 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000d40:	f000 f8bc 	bl	8000ebc <HAL_TIM_MspPostInit>

}
 8000d44:	bf00      	nop
 8000d46:	3758      	adds	r7, #88	@ 0x58
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000158 	.word	0x20000158
 8000d50:	40012c00 	.word	0x40012c00

08000d54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	@ 0x38
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d84:	4b32      	ldr	r3, [pc, #200]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000d86:	4a33      	ldr	r2, [pc, #204]	@ (8000e54 <MX_TIM3_Init+0x100>)
 8000d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000d8c:	223f      	movs	r2, #63	@ 0x3f
 8000d8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d90:	4b2f      	ldr	r3, [pc, #188]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000d98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000daa:	4829      	ldr	r0, [pc, #164]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000dac:	f001 fdde 	bl	800296c <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000db6:	f7ff fcc7 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4822      	ldr	r0, [pc, #136]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000dc8:	f002 f91e 	bl	8003008 <HAL_TIM_ConfigClockSource>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dd2:	f7ff fcb9 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dd6:	481e      	ldr	r0, [pc, #120]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000dd8:	f001 fe6a 	bl	8002ab0 <HAL_TIM_PWM_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000de2:	f7ff fcb1 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4619      	mov	r1, r3
 8000df4:	4816      	ldr	r0, [pc, #88]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000df6:	f002 fca3 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e00:	f7ff fca2 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e04:	2360      	movs	r3, #96	@ 0x60
 8000e06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000e1c:	f002 f832 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e26:	f7ff fc8f 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000e32:	f002 f827 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e3c:	f7ff fc84 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e40:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <MX_TIM3_Init+0xfc>)
 8000e42:	f000 f83b 	bl	8000ebc <HAL_TIM_MspPostInit>

}
 8000e46:	bf00      	nop
 8000e48:	3738      	adds	r7, #56	@ 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001a0 	.word	0x200001a0
 8000e54:	40000400 	.word	0x40000400

08000e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x58>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10c      	bne.n	8000e84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e82:	e010      	b.n	8000ea6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_TIM_Base_MspInit+0x60>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40012c00 	.word	0x40012c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40000400 	.word	0x40000400

08000ebc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f54 <HAL_TIM_MspPostInit+0x98>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d119      	bne.n	8000f10 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <HAL_TIM_MspPostInit+0x9c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <HAL_TIM_MspPostInit+0x9c>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <HAL_TIM_MspPostInit+0x9c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <HAL_TIM_MspPostInit+0xa0>)
 8000f0a:	f000 ff53 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f0e:	e01c      	b.n	8000f4a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_TIM_MspPostInit+0xa4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d117      	bne.n	8000f4a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <HAL_TIM_MspPostInit+0x9c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_TIM_MspPostInit+0x9c>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <HAL_TIM_MspPostInit+0x9c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f32:	23c0      	movs	r3, #192	@ 0xc0
 8000f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_TIM_MspPostInit+0xa0>)
 8000f46:	f000 ff35 	bl	8001db4 <HAL_GPIO_Init>
}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	40000400 	.word	0x40000400

08000f64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <MX_USART2_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	f002 fc91 	bl	80038c2 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fa6:	f7ff fbcf 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001e8 	.word	0x200001e8
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <HAL_UART_MspInit+0x88>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d12f      	bne.n	8001038 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <HAL_UART_MspInit+0x8c>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	@ (8001044 <HAL_UART_MspInit+0x8c>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe2:	61d3      	str	r3, [r2, #28]
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <HAL_UART_MspInit+0x8c>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <HAL_UART_MspInit+0x8c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a13      	ldr	r2, [pc, #76]	@ (8001044 <HAL_UART_MspInit+0x8c>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_UART_MspInit+0x8c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001008:	2304      	movs	r3, #4
 800100a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <HAL_UART_MspInit+0x90>)
 800101c:	f000 feca 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001020:	2308      	movs	r3, #8
 8001022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_UART_MspInit+0x90>)
 8001034:	f000 febe 	bl	8001db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40004400 	.word	0x40004400
 8001044:	40021000 	.word	0x40021000
 8001048:	40010800 	.word	0x40010800

0800104c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800104c:	f7ff fddc 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001052:	490c      	ldr	r1, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a09      	ldr	r2, [pc, #36]	@ (800108c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001068:	4c09      	ldr	r4, [pc, #36]	@ (8001090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f005 fe83 	bl	8006d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff faf5 	bl	8000668 <main>
  bx lr
 800107e:	4770      	bx	lr
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001088:	08007994 	.word	0x08007994
  ldr r2, =_sbss
 800108c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001090:	20001d68 	.word	0x20001d68

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_Init+0x28>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <HAL_Init+0x28>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 fe4d 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	200f      	movs	r0, #15
 80010b0:	f7ff fc7a 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fc40 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <HAL_IncTick+0x1c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <HAL_IncTick+0x20>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a03      	ldr	r2, [pc, #12]	@ (80010e4 <HAL_IncTick+0x20>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000230 	.word	0x20000230

080010e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b02      	ldr	r3, [pc, #8]	@ (80010f8 <HAL_GetTick+0x10>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	20000230 	.word	0x20000230

080010fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0ed      	b.n	80012ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f84e 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff ffda 	bl	80010e8 <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001136:	e012      	b.n	800115e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001138:	f7ff ffd6 	bl	80010e8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b0a      	cmp	r3, #10
 8001144:	d90b      	bls.n	800115e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2205      	movs	r2, #5
 8001156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0c5      	b.n	80012ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0e5      	beq.n	8001138 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0202 	bic.w	r2, r2, #2
 800117a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800117c:	f7ff ffb4 	bl	80010e8 <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001182:	e012      	b.n	80011aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001184:	f7ff ffb0 	bl	80010e8 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d90b      	bls.n	80011aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2205      	movs	r2, #5
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e09f      	b.n	80012ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e5      	bne.n	8001184 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7e1b      	ldrb	r3, [r3, #24]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d108      	bne.n	80011d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e007      	b.n	80011e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7e5b      	ldrb	r3, [r3, #25]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e007      	b.n	800120c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800120a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7e9b      	ldrb	r3, [r3, #26]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d108      	bne.n	8001226 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0220 	orr.w	r2, r2, #32
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e007      	b.n	8001236 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0220 	bic.w	r2, r2, #32
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7edb      	ldrb	r3, [r3, #27]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0210 	bic.w	r2, r2, #16
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e007      	b.n	8001260 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7f1b      	ldrb	r3, [r3, #28]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0208 	orr.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e007      	b.n	800128a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0208 	bic.w	r2, r2, #8
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7f5b      	ldrb	r3, [r3, #29]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d108      	bne.n	80012a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0204 	orr.w	r2, r2, #4
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e007      	b.n	80012b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0204 	bic.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	ea42 0103 	orr.w	r1, r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b087      	sub	sp, #28
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001308:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800130a:	7cfb      	ldrb	r3, [r7, #19]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d003      	beq.n	8001318 <HAL_CAN_ConfigFilter+0x26>
 8001310:	7cfb      	ldrb	r3, [r7, #19]
 8001312:	2b02      	cmp	r3, #2
 8001314:	f040 80aa 	bne.w	800146c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	2201      	movs	r2, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d123      	bne.n	800139a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	401a      	ands	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001374:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3248      	adds	r2, #72	@ 0x48
 800137a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001390:	6979      	ldr	r1, [r7, #20]
 8001392:	3348      	adds	r3, #72	@ 0x48
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d122      	bne.n	80013e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3248      	adds	r2, #72	@ 0x48
 80013c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013de:	6979      	ldr	r1, [r7, #20]
 80013e0:	3348      	adds	r3, #72	@ 0x48
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001402:	e007      	b.n	8001414 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800142e:	e007      	b.n	8001440 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	431a      	orrs	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800145e:	f023 0201 	bic.w	r2, r3, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e006      	b.n	800147a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001470:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
  }
}
 800147a:	4618      	mov	r0, r3
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d12e      	bne.n	80014f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b0:	f7ff fe1a 	bl	80010e8 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014b6:	e012      	b.n	80014de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014b8:	f7ff fe16 	bl	80010e8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b0a      	cmp	r3, #10
 80014c4:	d90b      	bls.n	80014de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2205      	movs	r2, #5
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e012      	b.n	8001504 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e5      	bne.n	80014b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e006      	b.n	8001504 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
  }
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001520:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d003      	beq.n	8001530 <HAL_CAN_GetRxMessage+0x24>
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b02      	cmp	r3, #2
 800152c:	f040 8103 	bne.w	8001736 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10e      	bne.n	8001554 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d116      	bne.n	8001572 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0f7      	b.n	8001744 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d107      	bne.n	8001572 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001566:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0e8      	b.n	8001744 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	331b      	adds	r3, #27
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0204 	and.w	r2, r3, #4
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10c      	bne.n	80015aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	331b      	adds	r3, #27
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4413      	add	r3, r2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0d5b      	lsrs	r3, r3, #21
 80015a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e00b      	b.n	80015c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	331b      	adds	r3, #27
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	331b      	adds	r3, #27
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0202 	and.w	r2, r3, #2
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	331b      	adds	r3, #27
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	3304      	adds	r3, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2208      	movs	r2, #8
 80015f4:	611a      	str	r2, [r3, #16]
 80015f6:	e00b      	b.n	8001610 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	331b      	adds	r3, #27
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 020f 	and.w	r2, r3, #15
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	331b      	adds	r3, #27
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	331b      	adds	r3, #27
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	4413      	add	r3, r2
 8001634:	3304      	adds	r3, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	0a1a      	lsrs	r2, r3, #8
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0c1a      	lsrs	r2, r3, #16
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3302      	adds	r3, #2
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0e1a      	lsrs	r2, r3, #24
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3303      	adds	r3, #3
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3304      	adds	r3, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0a1a      	lsrs	r2, r3, #8
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3305      	adds	r3, #5
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0c1a      	lsrs	r2, r3, #16
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	3306      	adds	r3, #6
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0e1a      	lsrs	r2, r3, #24
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3307      	adds	r3, #7
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d108      	bne.n	8001722 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0220 	orr.w	r2, r2, #32
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e007      	b.n	8001732 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0220 	orr.w	r2, r2, #32
 8001730:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e006      	b.n	8001744 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
  }
}
 8001744:	4618      	mov	r0, r3
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001762:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d002      	beq.n	8001770 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d10f      	bne.n	8001790 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e005      	b.n	8001790 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d07c      	beq.n	80018dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f983 	bl	8001b0a <HAL_CAN_TxMailbox0CompleteCallback>
 8001804:	e016      	b.n	8001834 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
 8001818:	e00c      	b.n	8001834 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	e002      	b.n	8001834 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f986 	bl	8001b40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d024      	beq.n	8001888 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f962 	bl	8001b1c <HAL_CAN_TxMailbox1CompleteCallback>
 8001858:	e016      	b.n	8001888 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
 800186c:	e00c      	b.n	8001888 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001880:	e002      	b.n	8001888 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f965 	bl	8001b52 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d024      	beq.n	80018dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800189a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f941 	bl	8001b2e <HAL_CAN_TxMailbox2CompleteCallback>
 80018ac:	e016      	b.n	80018dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c0:	e00c      	b.n	80018dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d4:	e002      	b.n	80018dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f944 	bl	8001b64 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2210      	movs	r2, #16
 80018fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2208      	movs	r2, #8
 800191a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f933 	bl	8001b88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f91b 	bl	8001b76 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2208      	movs	r2, #8
 800197e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f913 	bl	8001bac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f8fb 	bl	8001b9a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2210      	movs	r2, #16
 80019be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f8fc 	bl	8001bbe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00b      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2208      	movs	r2, #8
 80019e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8f4 	bl	8001bd0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d07b      	beq.n	8001aea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d072      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d043      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d03e      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a6a:	2b60      	cmp	r3, #96	@ 0x60
 8001a6c:	d02b      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
 8001a6e:	2b60      	cmp	r3, #96	@ 0x60
 8001a70:	d82e      	bhi.n	8001ad0 <HAL_CAN_IRQHandler+0x334>
 8001a72:	2b50      	cmp	r3, #80	@ 0x50
 8001a74:	d022      	beq.n	8001abc <HAL_CAN_IRQHandler+0x320>
 8001a76:	2b50      	cmp	r3, #80	@ 0x50
 8001a78:	d82a      	bhi.n	8001ad0 <HAL_CAN_IRQHandler+0x334>
 8001a7a:	2b40      	cmp	r3, #64	@ 0x40
 8001a7c:	d019      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x316>
 8001a7e:	2b40      	cmp	r3, #64	@ 0x40
 8001a80:	d826      	bhi.n	8001ad0 <HAL_CAN_IRQHandler+0x334>
 8001a82:	2b30      	cmp	r3, #48	@ 0x30
 8001a84:	d010      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x30c>
 8001a86:	2b30      	cmp	r3, #48	@ 0x30
 8001a88:	d822      	bhi.n	8001ad0 <HAL_CAN_IRQHandler+0x334>
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d002      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x2f8>
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	d005      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a92:	e01d      	b.n	8001ad0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a9c:	e019      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aa6:	e014      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	f043 0320 	orr.w	r3, r3, #32
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ab0:	e00f      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aba:	e00a      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ac4:	e005      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ace:	e000      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ad0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ae0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f870 	bl	8001be2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	@ 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4906      	ldr	r1, [pc, #24]	@ (8001c8c <__NVIC_EnableIRQ+0x34>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	@ (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff4f 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff64 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ffb2 	bl	8001ce4 <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff81 	bl	8001c90 <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff57 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	@ 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e169      	b.n	800209c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8158 	bne.w	8002096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a9a      	ldr	r2, [pc, #616]	@ (8002054 <HAL_GPIO_Init+0x2a0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d05e      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001df0:	4a98      	ldr	r2, [pc, #608]	@ (8002054 <HAL_GPIO_Init+0x2a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d875      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001df6:	4a98      	ldr	r2, [pc, #608]	@ (8002058 <HAL_GPIO_Init+0x2a4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d058      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001dfc:	4a96      	ldr	r2, [pc, #600]	@ (8002058 <HAL_GPIO_Init+0x2a4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d86f      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e02:	4a96      	ldr	r2, [pc, #600]	@ (800205c <HAL_GPIO_Init+0x2a8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d052      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e08:	4a94      	ldr	r2, [pc, #592]	@ (800205c <HAL_GPIO_Init+0x2a8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d869      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a94      	ldr	r2, [pc, #592]	@ (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04c      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e14:	4a92      	ldr	r2, [pc, #584]	@ (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d863      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e1a:	4a92      	ldr	r2, [pc, #584]	@ (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d046      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e20:	4a90      	ldr	r2, [pc, #576]	@ (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d85d      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d82a      	bhi.n	8001e80 <HAL_GPIO_Init+0xcc>
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d859      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e34 <HAL_GPIO_Init+0x80>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001eaf 	.word	0x08001eaf
 8001e38:	08001e89 	.word	0x08001e89
 8001e3c:	08001e9b 	.word	0x08001e9b
 8001e40:	08001edd 	.word	0x08001edd
 8001e44:	08001ee3 	.word	0x08001ee3
 8001e48:	08001ee3 	.word	0x08001ee3
 8001e4c:	08001ee3 	.word	0x08001ee3
 8001e50:	08001ee3 	.word	0x08001ee3
 8001e54:	08001ee3 	.word	0x08001ee3
 8001e58:	08001ee3 	.word	0x08001ee3
 8001e5c:	08001ee3 	.word	0x08001ee3
 8001e60:	08001ee3 	.word	0x08001ee3
 8001e64:	08001ee3 	.word	0x08001ee3
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ee3 	.word	0x08001ee3
 8001e70:	08001ee3 	.word	0x08001ee3
 8001e74:	08001ee3 	.word	0x08001ee3
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001ea5 	.word	0x08001ea5
 8001e80:	4a79      	ldr	r2, [pc, #484]	@ (8002068 <HAL_GPIO_Init+0x2b4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e86:	e02c      	b.n	8001ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e029      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	3304      	adds	r3, #4
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e024      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e01f      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e01a      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e013      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	611a      	str	r2, [r3, #16]
          break;
 8001ece:	e009      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	615a      	str	r2, [r3, #20]
          break;
 8001eda:	e003      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          break;
 8001ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	@ 0xff
 8001ee8:	d801      	bhi.n	8001eee <HAL_GPIO_Init+0x13a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_Init+0x13e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	@ 0xff
 8001ef8:	d802      	bhi.n	8001f00 <HAL_GPIO_Init+0x14c>
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x152>
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	3b08      	subs	r3, #8
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80b1 	beq.w	8002096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f34:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <HAL_GPIO_Init+0x2b8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	@ (800206c <HAL_GPIO_Init+0x2b8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <HAL_GPIO_Init+0x2b8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f4c:	4a48      	ldr	r2, [pc, #288]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a40      	ldr	r2, [pc, #256]	@ (8002074 <HAL_GPIO_Init+0x2c0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_GPIO_Init+0x1ec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002078 <HAL_GPIO_Init+0x2c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1e8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3e      	ldr	r2, [pc, #248]	@ (800207c <HAL_GPIO_Init+0x2c8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1e4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3d      	ldr	r2, [pc, #244]	@ (8002080 <HAL_GPIO_Init+0x2cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1e0>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb2:	492f      	ldr	r1, [pc, #188]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	492c      	ldr	r1, [pc, #176]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4928      	ldr	r1, [pc, #160]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4922      	ldr	r1, [pc, #136]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002002:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	491e      	ldr	r1, [pc, #120]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4918      	ldr	r1, [pc, #96]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202a:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4914      	ldr	r1, [pc, #80]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d021      	beq.n	8002088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	490e      	ldr	r1, [pc, #56]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e021      	b.n	8002096 <HAL_GPIO_Init+0x2e2>
 8002052:	bf00      	nop
 8002054:	10320000 	.word	0x10320000
 8002058:	10310000 	.word	0x10310000
 800205c:	10220000 	.word	0x10220000
 8002060:	10210000 	.word	0x10210000
 8002064:	10120000 	.word	0x10120000
 8002068:	10110000 	.word	0x10110000
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40011000 	.word	0x40011000
 8002080:	40011400 	.word	0x40011400
 8002084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	43db      	mvns	r3, r3
 8002090:	4909      	ldr	r1, [pc, #36]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8002092:	4013      	ands	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	3301      	adds	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f47f ae8e 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	372c      	adds	r7, #44	@ 0x2c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e272      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b92      	ldr	r3, [pc, #584]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4b8f      	ldr	r3, [pc, #572]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
 8002124:	4b8c      	ldr	r3, [pc, #560]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b89      	ldr	r3, [pc, #548]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x12c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e24c      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x76>
 8002154:	4b80      	ldr	r3, [pc, #512]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7f      	ldr	r2, [pc, #508]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b7b      	ldr	r3, [pc, #492]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7a      	ldr	r2, [pc, #488]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b78      	ldr	r3, [pc, #480]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a77      	ldr	r2, [pc, #476]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xbc>
 800218e:	4b72      	ldr	r3, [pc, #456]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a71      	ldr	r2, [pc, #452]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 80021a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b68      	ldr	r3, [pc, #416]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a67      	ldr	r2, [pc, #412]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff8e 	bl	80010e8 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff8a 	bl	80010e8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	@ 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e200      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe4>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe ff7a 	bl	80010e8 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff76 	bl	80010e8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1ec      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x10c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b4c      	ldr	r3, [pc, #304]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002232:	4b49      	ldr	r3, [pc, #292]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
 800223e:	4b46      	ldr	r3, [pc, #280]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1c0      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4939      	ldr	r1, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b36      	ldr	r3, [pc, #216]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe ff2f 	bl	80010e8 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7fe ff2b 	bl	80010e8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1a1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4927      	ldr	r1, [pc, #156]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b26      	ldr	r3, [pc, #152]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe ff0e 	bl	80010e8 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7fe ff0a 	bl	80010e8 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e180      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d03a      	beq.n	8002370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x274>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7fe feee 	bl	80010e8 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe feea 	bl	80010e8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e160      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 fafe 	bl	8002930 <RCC_Delay>
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_OscConfig+0x274>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7fe fed4 	bl	80010e8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe fed0 	bl	80010e8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d908      	bls.n	8002364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e146      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	42420000 	.word	0x42420000
 8002360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b92      	ldr	r3, [pc, #584]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e9      	bne.n	8002344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a6 	beq.w	80024ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b8b      	ldr	r3, [pc, #556]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a87      	ldr	r2, [pc, #540]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b85      	ldr	r3, [pc, #532]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b82      	ldr	r3, [pc, #520]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b7f      	ldr	r3, [pc, #508]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7e      	ldr	r2, [pc, #504]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fe91 	bl	80010e8 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fe8d 	bl	80010e8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	@ 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e103      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b75      	ldr	r3, [pc, #468]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e02d      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x334>
 8002406:	4b6a      	ldr	r3, [pc, #424]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a69      	ldr	r2, [pc, #420]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b67      	ldr	r3, [pc, #412]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a66      	ldr	r2, [pc, #408]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x356>
 8002428:	4b61      	ldr	r3, [pc, #388]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a60      	ldr	r2, [pc, #384]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b5e      	ldr	r3, [pc, #376]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a5d      	ldr	r2, [pc, #372]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002442:	4b5b      	ldr	r3, [pc, #364]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a5a      	ldr	r2, [pc, #360]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b58      	ldr	r3, [pc, #352]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a57      	ldr	r2, [pc, #348]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fe41 	bl	80010e8 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fe3d 	bl	80010e8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0b1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b4b      	ldr	r3, [pc, #300]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x37e>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7fe fe2b 	bl	80010e8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fe27 	bl	80010e8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e09b      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b40      	ldr	r3, [pc, #256]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b3c      	ldr	r3, [pc, #240]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a3b      	ldr	r2, [pc, #236]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8087 	beq.w	80025e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b36      	ldr	r3, [pc, #216]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d061      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d146      	bne.n	8002576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fdfb 	bl	80010e8 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe fdf7 	bl	80010e8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e06d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251e:	4b24      	ldr	r3, [pc, #144]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4921      	ldr	r1, [pc, #132]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a19      	ldr	r1, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	430b      	orrs	r3, r1
 8002542:	491b      	ldr	r1, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fdcb 	bl	80010e8 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe fdc7 	bl	80010e8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e03d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
 8002574:	e035      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fdb4 	bl	80010e8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fdb0 	bl	80010e8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e026      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x498>
 80025a2:	e01e      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e019      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_OscConfig+0x500>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	4965      	ldr	r1, [pc, #404]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800266e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fd02 	bl	80010e8 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fcfe 	bl	80010e8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4922      	ldr	r1, [pc, #136]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_ClockConfig+0x1cc>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe f902 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	0800792c 	.word	0x0800792c
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x36>
 80027f2:	e027      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_GetSysClockFreq+0x98>)
 80027f6:	613b      	str	r3, [r7, #16]
      break;
 80027f8:	e027      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	4a17      	ldr	r2, [pc, #92]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
 8002806:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002812:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	0c5b      	lsrs	r3, r3, #17
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	4a11      	ldr	r2, [pc, #68]	@ (8002864 <HAL_RCC_GetSysClockFreq+0xa0>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <HAL_RCC_GetSysClockFreq+0x98>)
 8002826:	fb03 f202 	mul.w	r2, r3, r2
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e004      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0c      	ldr	r2, [pc, #48]	@ (8002868 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002838:	fb02 f303 	mul.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	613b      	str	r3, [r7, #16]
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCC_GetSysClockFreq+0x98>)
 8002846:	613b      	str	r3, [r7, #16]
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	693b      	ldr	r3, [r7, #16]
}
 800284c:	4618      	mov	r0, r3
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	007a1200 	.word	0x007a1200
 8002860:	08007944 	.word	0x08007944
 8002864:	08007954 	.word	0x08007954
 8002868:	003d0900 	.word	0x003d0900

0800286c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002870:	4b02      	ldr	r3, [pc, #8]	@ (800287c <HAL_RCC_GetHCLKFreq+0x10>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002884:	f7ff fff2 	bl	800286c <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	@ (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	0800793c 	.word	0x0800793c

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ac:	f7ff ffde 	bl	800286c <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0adb      	lsrs	r3, r3, #11
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	0800793c 	.word	0x0800793c

080028d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	220f      	movs	r2, #15
 80028de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCC_GetClockConfig+0x58>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_RCC_GetClockConfig+0x58>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_RCC_GetClockConfig+0x58>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_RCC_GetClockConfig+0x58>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	08db      	lsrs	r3, r3, #3
 800290a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_RCC_GetClockConfig+0x5c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0207 	and.w	r2, r3, #7
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40021000 	.word	0x40021000
 800292c:	40022000 	.word	0x40022000

08002930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <RCC_Delay+0x34>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <RCC_Delay+0x38>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0a5b      	lsrs	r3, r3, #9
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800294c:	bf00      	nop
  }
  while (Delay --);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e5a      	subs	r2, r3, #1
 8002952:	60fa      	str	r2, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f9      	bne.n	800294c <RCC_Delay+0x1c>
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	20000000 	.word	0x20000000
 8002968:	10624dd3 	.word	0x10624dd3

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e041      	b.n	8002a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe fa60 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 fc18 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d001      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e03a      	b.n	8002a9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00e      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x58>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d009      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x58>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x58>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a13      	ldr	r2, [pc, #76]	@ (8002aac <HAL_TIM_Base_Start_IT+0xa0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d111      	bne.n	8002a88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d010      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a86:	e007      	b.n	8002a98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800

08002ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e041      	b.n	8002b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f839 	bl	8002b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 fb76 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_TIM_PWM_Start+0x24>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e022      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d109      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x3e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e015      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d109      	bne.n	8002bb8 <HAL_TIM_PWM_Start+0x58>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e008      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e05e      	b.n	8002c90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x82>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002be0:	e013      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x92>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf0:	e00b      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0xa2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c00:	e003      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd70 	bl	80036f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c98 <HAL_TIM_PWM_Start+0x138>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a18      	ldr	r2, [pc, #96]	@ (8002c98 <HAL_TIM_PWM_Start+0x138>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c44:	d009      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a14      	ldr	r2, [pc, #80]	@ (8002c9c <HAL_TIM_PWM_Start+0x13c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <HAL_TIM_PWM_Start+0x140>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d010      	beq.n	8002c8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7c:	e007      	b.n	8002c8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d020      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01b      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0202 	mvn.w	r2, #2
 8002cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa5a 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa4d 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa5c 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d020      	beq.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0204 	mvn.w	r2, #4
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa34 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa27 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa36 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d020      	beq.n	8002da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01b      	beq.n	8002da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0208 	mvn.w	r2, #8
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2204      	movs	r2, #4
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa0e 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa01 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fa10 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d020      	beq.n	8002dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0210 	mvn.w	r2, #16
 8002dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9e8 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9db 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f9ea 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0201 	mvn.w	r2, #1
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fc8a 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fd3e 	bl	80038b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9ba 	bl	80031cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00c      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0220 	mvn.w	r2, #32
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fd11 	bl	800389e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0ae      	b.n	8003000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	f200 809f 	bhi.w	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002ff1 	.word	0x08002ff1
 8002ec0:	08002ff1 	.word	0x08002ff1
 8002ec4:	08002ff1 	.word	0x08002ff1
 8002ec8:	08002f2d 	.word	0x08002f2d
 8002ecc:	08002ff1 	.word	0x08002ff1
 8002ed0:	08002ff1 	.word	0x08002ff1
 8002ed4:	08002ff1 	.word	0x08002ff1
 8002ed8:	08002f6f 	.word	0x08002f6f
 8002edc:	08002ff1 	.word	0x08002ff1
 8002ee0:	08002ff1 	.word	0x08002ff1
 8002ee4:	08002ff1 	.word	0x08002ff1
 8002ee8:	08002faf 	.word	0x08002faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f9e2 	bl	80032bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0208 	orr.w	r2, r2, #8
 8002f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6999      	ldr	r1, [r3, #24]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	619a      	str	r2, [r3, #24]
      break;
 8002f2a:	e064      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fa28 	bl	8003388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6999      	ldr	r1, [r3, #24]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	619a      	str	r2, [r3, #24]
      break;
 8002f6c:	e043      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fa71 	bl	800345c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0208 	orr.w	r2, r2, #8
 8002f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0204 	bic.w	r2, r2, #4
 8002f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69d9      	ldr	r1, [r3, #28]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	61da      	str	r2, [r3, #28]
      break;
 8002fac:	e023      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fabb 	bl	8003530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69d9      	ldr	r1, [r3, #28]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	021a      	lsls	r2, r3, #8
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	61da      	str	r2, [r3, #28]
      break;
 8002fee:	e002      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_TIM_ConfigClockSource+0x1c>
 8003020:	2302      	movs	r3, #2
 8003022:	e0b4      	b.n	800318e <HAL_TIM_ConfigClockSource+0x186>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800304a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800305c:	d03e      	beq.n	80030dc <HAL_TIM_ConfigClockSource+0xd4>
 800305e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003062:	f200 8087 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306a:	f000 8086 	beq.w	800317a <HAL_TIM_ConfigClockSource+0x172>
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003072:	d87f      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b70      	cmp	r3, #112	@ 0x70
 8003076:	d01a      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0xa6>
 8003078:	2b70      	cmp	r3, #112	@ 0x70
 800307a:	d87b      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b60      	cmp	r3, #96	@ 0x60
 800307e:	d050      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x11a>
 8003080:	2b60      	cmp	r3, #96	@ 0x60
 8003082:	d877      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b50      	cmp	r3, #80	@ 0x50
 8003086:	d03c      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0xfa>
 8003088:	2b50      	cmp	r3, #80	@ 0x50
 800308a:	d873      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d058      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x13a>
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d86f      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b30      	cmp	r3, #48	@ 0x30
 8003096:	d064      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 8003098:	2b30      	cmp	r3, #48	@ 0x30
 800309a:	d86b      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b20      	cmp	r3, #32
 800309e:	d060      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d867      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05c      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d05a      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	e062      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030be:	f000 fafc 	bl	80036ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	609a      	str	r2, [r3, #8]
      break;
 80030da:	e04f      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ec:	f000 fae5 	bl	80036ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030fe:	609a      	str	r2, [r3, #8]
      break;
 8003100:	e03c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	461a      	mov	r2, r3
 8003110:	f000 fa5c 	bl	80035cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2150      	movs	r1, #80	@ 0x50
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fab3 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8003120:	e02c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800312e:	461a      	mov	r2, r3
 8003130:	f000 fa7a 	bl	8003628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2160      	movs	r1, #96	@ 0x60
 800313a:	4618      	mov	r0, r3
 800313c:	f000 faa3 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8003140:	e01c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	461a      	mov	r2, r3
 8003150:	f000 fa3c 	bl	80035cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2140      	movs	r1, #64	@ 0x40
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fa93 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8003160:	e00c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fa8a 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8003172:	e003      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e000      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800317a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a2f      	ldr	r2, [pc, #188]	@ (80032b0 <TIM_Base_SetConfig+0xd0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <TIM_Base_SetConfig+0xd4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a2b      	ldr	r2, [pc, #172]	@ (80032b8 <TIM_Base_SetConfig+0xd8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a22      	ldr	r2, [pc, #136]	@ (80032b0 <TIM_Base_SetConfig+0xd0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1f      	ldr	r2, [pc, #124]	@ (80032b4 <TIM_Base_SetConfig+0xd4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1e      	ldr	r2, [pc, #120]	@ (80032b8 <TIM_Base_SetConfig+0xd8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a0d      	ldr	r2, [pc, #52]	@ (80032b0 <TIM_Base_SetConfig+0xd0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
  }
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800

080032bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f023 0201 	bic.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0302 	bic.w	r3, r3, #2
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10c      	bne.n	8003332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0308 	bic.w	r3, r3, #8
 800331e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a13      	ldr	r2, [pc, #76]	@ (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d111      	bne.n	800335e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	621a      	str	r2, [r3, #32]
}
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00

08003388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f023 0210 	bic.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003458 <TIM_OC2_SetConfig+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10d      	bne.n	8003404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a14      	ldr	r2, [pc, #80]	@ (8003458 <TIM_OC2_SetConfig+0xd0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d113      	bne.n	8003434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	40012c00 	.word	0x40012c00

0800345c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	@ (800352c <TIM_OC3_SetConfig+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10d      	bne.n	80034d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <TIM_OC3_SetConfig+0xd0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d113      	bne.n	8003506 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40012c00 	.word	0x40012c00

08003530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800357a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a0f      	ldr	r2, [pc, #60]	@ (80035c8 <TIM_OC4_SetConfig+0x98>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00

080035cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 030a 	bic.w	r3, r3, #10
 8003608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f023 0210 	bic.w	r2, r3, #16
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	031b      	lsls	r3, r3, #12
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003664:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	621a      	str	r2, [r3, #32]
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f043 0307 	orr.w	r3, r3, #7
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	021a      	lsls	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	431a      	orrs	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	609a      	str	r2, [r3, #8]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2201      	movs	r2, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e046      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a16      	ldr	r2, [pc, #88]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a12      	ldr	r2, [pc, #72]	@ (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a10      	ldr	r2, [pc, #64]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800

080037fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003814:	2302      	movs	r3, #2
 8003816:	e03d      	b.n	8003894 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e042      	b.n	800395a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fd fb65 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2224      	movs	r2, #36	@ 0x24
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003904:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f972 	bl	8003bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800391a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800392a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800393a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b08a      	sub	sp, #40	@ 0x28
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d175      	bne.n	8003a6e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_Transmit+0x2c>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06e      	b.n	8003a70 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2221      	movs	r2, #33	@ 0x21
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a0:	f7fd fba2 	bl	80010e8 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ba:	d108      	bne.n	80039ce <HAL_UART_Transmit+0x6c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	e003      	b.n	80039d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d6:	e02e      	b.n	8003a36 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	2180      	movs	r1, #128	@ 0x80
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f848 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e03a      	b.n	8003a70 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	3302      	adds	r3, #2
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e007      	b.n	8003a28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1cb      	bne.n	80039d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2140      	movs	r1, #64	@ 0x40
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f814 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e006      	b.n	8003a70 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a88:	e03b      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d037      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fd fb29 	bl	80010e8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e03a      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d023      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b80      	cmp	r3, #128	@ 0x80
 8003abe:	d020      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d01d      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d116      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f81d 	bl	8003b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2208      	movs	r2, #8
 8003af4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00f      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d0b4      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b095      	sub	sp, #84	@ 0x54
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b52:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3314      	adds	r3, #20
 8003b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e5      	bne.n	8003b66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d119      	bne.n	8003bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f023 0310 	bic.w	r3, r3, #16
 8003bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc2:	61ba      	str	r2, [r7, #24]
 8003bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e5      	bne.n	8003ba2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003be4:	bf00      	nop
 8003be6:	3754      	adds	r7, #84	@ 0x54
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c2a:	f023 030c 	bic.w	r3, r3, #12
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <UART_SetConfig+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d103      	bne.n	8003c60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7fe fe26 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7fe fe0e 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <UART_SetConfig+0x118>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	0119      	lsls	r1, r3, #4
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009a      	lsls	r2, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <UART_SetConfig+0x118>)
 8003c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2064      	movs	r0, #100	@ 0x64
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	3332      	adds	r3, #50	@ 0x32
 8003cb0:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <UART_SetConfig+0x118>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cbc:	4419      	add	r1, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <UART_SetConfig+0x118>)
 8003cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2064      	movs	r0, #100	@ 0x64
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	@ 0x32
 8003ce8:	4a07      	ldr	r2, [pc, #28]	@ (8003d08 <UART_SetConfig+0x118>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013800 	.word	0x40013800
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <__NVIC_SetPriority>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	6039      	str	r1, [r7, #0]
 8003d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	db0a      	blt.n	8003d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	490c      	ldr	r1, [pc, #48]	@ (8003d58 <__NVIC_SetPriority+0x4c>)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	0112      	lsls	r2, r2, #4
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d34:	e00a      	b.n	8003d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4908      	ldr	r1, [pc, #32]	@ (8003d5c <__NVIC_SetPriority+0x50>)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	3b04      	subs	r3, #4
 8003d44:	0112      	lsls	r2, r2, #4
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	440b      	add	r3, r1
 8003d4a:	761a      	strb	r2, [r3, #24]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000e100 	.word	0xe000e100
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <SysTick_Handler+0x1c>)
 8003d66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003d68:	f001 fd38 	bl	80057dc <xTaskGetSchedulerState>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003d72:	f002 fad9 	bl	8006328 <xPortSysTickHandler>
  }
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d84:	2100      	movs	r1, #0
 8003d86:	f06f 0004 	mvn.w	r0, #4
 8003d8a:	f7ff ffbf 	bl	8003d0c <__NVIC_SetPriority>
#endif
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d9a:	f3ef 8305 	mrs	r3, IPSR
 8003d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003da0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003da6:	f06f 0305 	mvn.w	r3, #5
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	e00c      	b.n	8003dc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <osKernelInitialize+0x40>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <osKernelInitialize+0x40>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	e002      	b.n	8003dc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	20000234 	.word	0x20000234

08003dd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dde:	f3ef 8305 	mrs	r3, IPSR
 8003de2:	603b      	str	r3, [r7, #0]
  return(result);
 8003de4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003dea:	f06f 0305 	mvn.w	r3, #5
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e010      	b.n	8003e14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003df2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <osKernelStart+0x48>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d109      	bne.n	8003e0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dfa:	f7ff ffc1 	bl	8003d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003dfe:	4b08      	ldr	r3, [pc, #32]	@ (8003e20 <osKernelStart+0x48>)
 8003e00:	2202      	movs	r2, #2
 8003e02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e04:	f001 f88a 	bl	8004f1c <vTaskStartScheduler>
      stat = osOK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	e002      	b.n	8003e14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e14:	687b      	ldr	r3, [r7, #4]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000234 	.word	0x20000234

08003e24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	@ 0x38
 8003e28:	af04      	add	r7, sp, #16
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e34:	f3ef 8305 	mrs	r3, IPSR
 8003e38:	617b      	str	r3, [r7, #20]
  return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d17e      	bne.n	8003f3e <osThreadNew+0x11a>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d07b      	beq.n	8003f3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e4a:	2318      	movs	r3, #24
 8003e4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d045      	beq.n	8003eea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <osThreadNew+0x48>
        name = attr->name;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <osThreadNew+0x6e>
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b38      	cmp	r3, #56	@ 0x38
 8003e84:	d805      	bhi.n	8003e92 <osThreadNew+0x6e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <osThreadNew+0x72>
        return (NULL);
 8003e92:	2300      	movs	r3, #0
 8003e94:	e054      	b.n	8003f40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00e      	beq.n	8003ecc <osThreadNew+0xa8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003eb4:	d90a      	bls.n	8003ecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <osThreadNew+0xa8>
        mem = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e010      	b.n	8003eee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10c      	bne.n	8003eee <osThreadNew+0xca>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <osThreadNew+0xca>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <osThreadNew+0xca>
          mem = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e001      	b.n	8003eee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d110      	bne.n	8003f16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003efc:	9202      	str	r2, [sp, #8]
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6a3a      	ldr	r2, [r7, #32]
 8003f08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fe12 	bl	8004b34 <xTaskCreateStatic>
 8003f10:	4603      	mov	r3, r0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e013      	b.n	8003f3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d110      	bne.n	8003f3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	f107 0310 	add.w	r3, r7, #16
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fe60 	bl	8004bf4 <xTaskCreate>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d001      	beq.n	8003f3e <osThreadNew+0x11a>
            hTask = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f3e:	693b      	ldr	r3, [r7, #16]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3728      	adds	r7, #40	@ 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f50:	f3ef 8305 	mrs	r3, IPSR
 8003f54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <osDelay+0x1c>
    stat = osErrorISR;
 8003f5c:	f06f 0305 	mvn.w	r3, #5
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e007      	b.n	8003f74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 ff9e 	bl	8004eb0 <vTaskDelay>
    }
  }

  return (stat);
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a06      	ldr	r2, [pc, #24]	@ (8003fa8 <vApplicationGetIdleTaskMemory+0x28>)
 8003f90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <vApplicationGetIdleTaskMemory+0x2c>)
 8003f96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2280      	movs	r2, #128	@ 0x80
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	20000238 	.word	0x20000238
 8003fac:	200002e0 	.word	0x200002e0

08003fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a07      	ldr	r2, [pc, #28]	@ (8003fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8003fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a06      	ldr	r2, [pc, #24]	@ (8003fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8003fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200004e0 	.word	0x200004e0
 8003fe0:	20000588 	.word	0x20000588

08003fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f103 0208 	add.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 0208 	add.w	r2, r3, #8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f103 0208 	add.w	r2, r3, #8
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d103      	bne.n	80040a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e00c      	b.n	80040ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3308      	adds	r3, #8
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e002      	b.n	80040ae <vListInsert+0x2e>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d2f6      	bcs.n	80040a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6892      	ldr	r2, [r2, #8]
 8004106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6852      	ldr	r2, [r2, #4]
 8004110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d103      	bne.n	8004124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
	...

08004144 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004170:	f002 f85c 	bl	800622c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	68f9      	ldr	r1, [r7, #12]
 800417e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	441a      	add	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	3b01      	subs	r3, #1
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	441a      	add	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	22ff      	movs	r2, #255	@ 0xff
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d114      	bne.n	80041f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01a      	beq.n	8004204 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3310      	adds	r3, #16
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 f93c 	bl	8005450 <xTaskRemoveFromEventList>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <xQueueGenericReset+0xd0>)
 80041e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	e009      	b.n	8004204 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3310      	adds	r3, #16
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fef5 	bl	8003fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3324      	adds	r3, #36	@ 0x24
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fef0 	bl	8003fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004204:	f002 f842 	bl	800628c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004208:	2301      	movs	r3, #1
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	@ 0x38
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	e7fd      	b.n	800425e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <xQueueGenericCreateStatic+0x56>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <xQueueGenericCreateStatic+0x5a>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <xQueueGenericCreateStatic+0x5c>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	623b      	str	r3, [r7, #32]
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <xQueueGenericCreateStatic+0x84>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <xQueueGenericCreateStatic+0x88>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <xQueueGenericCreateStatic+0x8a>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	61fb      	str	r3, [r7, #28]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042be:	2350      	movs	r3, #80	@ 0x50
 80042c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b50      	cmp	r3, #80	@ 0x50
 80042c6:	d00b      	beq.n	80042e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	61bb      	str	r3, [r7, #24]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f805 	bl	8004312 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	@ 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e002      	b.n	8004334 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004340:	2101      	movs	r1, #1
 8004342:	69b8      	ldr	r0, [r7, #24]
 8004344:	f7ff fefe 	bl	8004144 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08e      	sub	sp, #56	@ 0x38
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <xQueueGenericSend+0x34>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <xQueueGenericSend+0x42>
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <xQueueGenericSend+0x46>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <xQueueGenericSend+0x48>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xQueueGenericSend+0x64>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d103      	bne.n	80043ca <xQueueGenericSend+0x72>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <xQueueGenericSend+0x76>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueGenericSend+0x78>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <xQueueGenericSend+0x94>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	623b      	str	r3, [r7, #32]
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ec:	f001 f9f6 	bl	80057dc <xTaskGetSchedulerState>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <xQueueGenericSend+0xa4>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <xQueueGenericSend+0xa8>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <xQueueGenericSend+0xaa>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <xQueueGenericSend+0xc6>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	61fb      	str	r3, [r7, #28]
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	e7fd      	b.n	800441a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800441e:	f001 ff05 	bl	800622c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <xQueueGenericSend+0xdc>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d129      	bne.n	8004488 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800443a:	f000 fa0f 	bl	800485c <prvCopyDataToQueue>
 800443e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	3324      	adds	r3, #36	@ 0x24
 800444c:	4618      	mov	r0, r3
 800444e:	f000 ffff 	bl	8005450 <xTaskRemoveFromEventList>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004458:	4b3f      	ldr	r3, [pc, #252]	@ (8004558 <xQueueGenericSend+0x200>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	e00a      	b.n	8004480 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004470:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <xQueueGenericSend+0x200>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004480:	f001 ff04 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	e063      	b.n	8004550 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800448e:	f001 fefd 	bl	800628c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004492:	2300      	movs	r3, #0
 8004494:	e05c      	b.n	8004550 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 f839 	bl	8005518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044aa:	f001 feef 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ae:	f000 fda5 	bl	8004ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044b2:	f001 febb 	bl	800622c <vPortEnterCritical>
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d103      	bne.n	80044cc <xQueueGenericSend+0x174>
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d103      	bne.n	80044e2 <xQueueGenericSend+0x18a>
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e2:	f001 fed3 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e6:	1d3a      	adds	r2, r7, #4
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f828 	bl	8005544 <xTaskCheckForTimeOut>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d124      	bne.n	8004544 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044fc:	f000 faa6 	bl	8004a4c <prvIsQueueFull>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	3310      	adds	r3, #16
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 ff4c 	bl	80053ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004516:	f000 fa31 	bl	800497c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800451a:	f000 fd7d 	bl	8005018 <xTaskResumeAll>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f af7c 	bne.w	800441e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004526:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <xQueueGenericSend+0x200>)
 8004528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	e772      	b.n	800441e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800453a:	f000 fa1f 	bl	800497c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800453e:	f000 fd6b 	bl	8005018 <xTaskResumeAll>
 8004542:	e76c      	b.n	800441e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004546:	f000 fa19 	bl	800497c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800454a:	f000 fd65 	bl	8005018 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800454e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004550:	4618      	mov	r0, r3
 8004552:	3738      	adds	r7, #56	@ 0x38
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b090      	sub	sp, #64	@ 0x40
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d103      	bne.n	800459a <xQueueGenericSendFromISR+0x3e>
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <xQueueGenericSendFromISR+0x42>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueGenericSendFromISR+0x44>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSendFromISR+0x6e>
 80045c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <xQueueGenericSendFromISR+0x72>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <xQueueGenericSendFromISR+0x74>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	623b      	str	r3, [r7, #32]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045ec:	f001 fee0 	bl	80063b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045f0:	f3ef 8211 	mrs	r2, BASEPRI
 80045f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	61fa      	str	r2, [r7, #28]
 8004606:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004608:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800460c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <xQueueGenericSendFromISR+0xc2>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d12f      	bne.n	800467e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004624:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004634:	f000 f912 	bl	800485c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004638:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d112      	bne.n	8004668 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d016      	beq.n	8004678 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	3324      	adds	r3, #36	@ 0x24
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fefe 	bl	8005450 <xTaskRemoveFromEventList>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e007      	b.n	8004678 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004668:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800466c:	3301      	adds	r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	b25a      	sxtb	r2, r3
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004678:	2301      	movs	r3, #1
 800467a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800467c:	e001      	b.n	8004682 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800467e:	2300      	movs	r3, #0
 8004680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004684:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800468c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800468e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004690:	4618      	mov	r0, r3
 8004692:	3740      	adds	r7, #64	@ 0x40
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	@ 0x30
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <xQueueReceive+0x32>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	623b      	str	r3, [r7, #32]
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	e7fd      	b.n	80046c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <xQueueReceive+0x40>
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <xQueueReceive+0x44>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <xQueueReceive+0x46>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <xQueueReceive+0x62>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61fb      	str	r3, [r7, #28]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fa:	f001 f86f 	bl	80057dc <xTaskGetSchedulerState>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <xQueueReceive+0x72>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueReceive+0x76>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueReceive+0x78>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10b      	bne.n	800472c <xQueueReceive+0x94>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61bb      	str	r3, [r7, #24]
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472c:	f001 fd7e 	bl	800622c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01f      	beq.n	800477c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004740:	f000 f8f6 	bl	8004930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00f      	beq.n	8004774 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	3310      	adds	r3, #16
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fe79 	bl	8005450 <xTaskRemoveFromEventList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b3c      	ldr	r3, [pc, #240]	@ (8004858 <xQueueReceive+0x1c0>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004774:	f001 fd8a 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	e069      	b.n	8004850 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004782:	f001 fd83 	bl	800628c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004786:	2300      	movs	r3, #0
 8004788:	e062      	b.n	8004850 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	4618      	mov	r0, r3
 8004796:	f000 febf 	bl	8005518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800479e:	f001 fd75 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a2:	f000 fc2b 	bl	8004ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047a6:	f001 fd41 	bl	800622c <vPortEnterCritical>
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d103      	bne.n	80047c0 <xQueueReceive+0x128>
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047c6:	b25b      	sxtb	r3, r3
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d103      	bne.n	80047d6 <xQueueReceive+0x13e>
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d6:	f001 fd59 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047da:	1d3a      	adds	r2, r7, #4
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 feae 	bl	8005544 <xTaskCheckForTimeOut>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d123      	bne.n	8004836 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f0:	f000 f916 	bl	8004a20 <prvIsQueueEmpty>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	3324      	adds	r3, #36	@ 0x24
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fdd2 	bl	80053ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800480a:	f000 f8b7 	bl	800497c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800480e:	f000 fc03 	bl	8005018 <xTaskResumeAll>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d189      	bne.n	800472c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004818:	4b0f      	ldr	r3, [pc, #60]	@ (8004858 <xQueueReceive+0x1c0>)
 800481a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	e780      	b.n	800472c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800482a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800482c:	f000 f8a6 	bl	800497c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004830:	f000 fbf2 	bl	8005018 <xTaskResumeAll>
 8004834:	e77a      	b.n	800472c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004838:	f000 f8a0 	bl	800497c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800483c:	f000 fbec 	bl	8005018 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004842:	f000 f8ed 	bl	8004a20 <prvIsQueueEmpty>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	f43f af6f 	beq.w	800472c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800484e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004850:	4618      	mov	r0, r3
 8004852:	3730      	adds	r7, #48	@ 0x30
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d14d      	bne.n	800491e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 ffc6 	bl	8005818 <xTaskPriorityDisinherit>
 800488c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	e043      	b.n	800491e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d119      	bne.n	80048d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6858      	ldr	r0, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	461a      	mov	r2, r3
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	f002 fa91 	bl	8006dce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d32b      	bcc.n	800491e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	e026      	b.n	800491e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68d8      	ldr	r0, [r3, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	461a      	mov	r2, r3
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	f002 fa77 	bl	8006dce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	425b      	negs	r3, r3
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d207      	bcs.n	800490c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	425b      	negs	r3, r3
 8004906:	441a      	add	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d105      	bne.n	800491e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3b01      	subs	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004926:	697b      	ldr	r3, [r7, #20]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d018      	beq.n	8004974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	441a      	add	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d303      	bcc.n	8004964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68d9      	ldr	r1, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	461a      	mov	r2, r3
 800496e:	6838      	ldr	r0, [r7, #0]
 8004970:	f002 fa2d 	bl	8006dce <memcpy>
	}
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004984:	f001 fc52 	bl	800622c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800498e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004990:	e011      	b.n	80049b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d012      	beq.n	80049c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3324      	adds	r3, #36	@ 0x24
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fd56 	bl	8005450 <xTaskRemoveFromEventList>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049aa:	f000 fe2f 	bl	800560c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dce9      	bgt.n	8004992 <prvUnlockQueue+0x16>
 80049be:	e000      	b.n	80049c2 <prvUnlockQueue+0x46>
					break;
 80049c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	22ff      	movs	r2, #255	@ 0xff
 80049c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80049ca:	f001 fc5f 	bl	800628c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049ce:	f001 fc2d 	bl	800622c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049da:	e011      	b.n	8004a00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3310      	adds	r3, #16
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fd31 	bl	8005450 <xTaskRemoveFromEventList>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049f4:	f000 fe0a 	bl	800560c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dce9      	bgt.n	80049dc <prvUnlockQueue+0x60>
 8004a08:	e000      	b.n	8004a0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	22ff      	movs	r2, #255	@ 0xff
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a14:	f001 fc3a 	bl	800628c <vPortExitCritical>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a28:	f001 fc00 	bl	800622c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d102      	bne.n	8004a3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e001      	b.n	8004a3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a3e:	f001 fc25 	bl	800628c <vPortExitCritical>

	return xReturn;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a54:	f001 fbea 	bl	800622c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d102      	bne.n	8004a6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e001      	b.n	8004a6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a6e:	f001 fc0d 	bl	800628c <vPortExitCritical>

	return xReturn;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e014      	b.n	8004ab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac8 <vQueueAddToRegistry+0x4c>)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a98:	490b      	ldr	r1, [pc, #44]	@ (8004ac8 <vQueueAddToRegistry+0x4c>)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004aa2:	4a09      	ldr	r2, [pc, #36]	@ (8004ac8 <vQueueAddToRegistry+0x4c>)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004aae:	e006      	b.n	8004abe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b07      	cmp	r3, #7
 8004aba:	d9e7      	bls.n	8004a8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	20000988 	.word	0x20000988

08004acc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004adc:	f001 fba6 	bl	800622c <vPortEnterCritical>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ae6:	b25b      	sxtb	r3, r3
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d103      	bne.n	8004af6 <vQueueWaitForMessageRestricted+0x2a>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d103      	bne.n	8004b0c <vQueueWaitForMessageRestricted+0x40>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b0c:	f001 fbbe 	bl	800628c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	3324      	adds	r3, #36	@ 0x24
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fc69 	bl	80053f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f7ff ff28 	bl	800497c <prvUnlockQueue>
	}
 8004b2c:	bf00      	nop
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08e      	sub	sp, #56	@ 0x38
 8004b38:	af04      	add	r7, sp, #16
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	623b      	str	r3, [r7, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	61fb      	str	r3, [r7, #28]
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	e7fd      	b.n	8004b7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b7e:	23a8      	movs	r3, #168	@ 0xa8
 8004b80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2ba8      	cmp	r3, #168	@ 0xa8
 8004b86:	d00b      	beq.n	8004ba0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	61bb      	str	r3, [r7, #24]
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	e7fd      	b.n	8004b9c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ba0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01e      	beq.n	8004be6 <xTaskCreateStatic+0xb2>
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01b      	beq.n	8004be6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9303      	str	r3, [sp, #12]
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	9302      	str	r3, [sp, #8]
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f851 	bl	8004c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004be0:	f000 f8f6 	bl	8004dd0 <prvAddNewTaskToReadyList>
 8004be4:	e001      	b.n	8004bea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bea:	697b      	ldr	r3, [r7, #20]
	}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3728      	adds	r7, #40	@ 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	@ 0x30
 8004bf8:	af04      	add	r7, sp, #16
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fc11 	bl	8006430 <pvPortMalloc>
 8004c0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00e      	beq.n	8004c34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c16:	20a8      	movs	r0, #168	@ 0xa8
 8004c18:	f001 fc0a 	bl	8006430 <pvPortMalloc>
 8004c1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c2a:	e005      	b.n	8004c38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f001 fccd 	bl	80065cc <vPortFree>
 8004c32:	e001      	b.n	8004c38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d017      	beq.n	8004c6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9303      	str	r3, [sp, #12]
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	9302      	str	r3, [sp, #8]
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f80f 	bl	8004c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c62:	69f8      	ldr	r0, [r7, #28]
 8004c64:	f000 f8b4 	bl	8004dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e002      	b.n	8004c74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c74:	69bb      	ldr	r3, [r7, #24]
	}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	461a      	mov	r2, r3
 8004c98:	21a5      	movs	r1, #165	@ 0xa5
 8004c9a:	f001 ffbf 	bl	8006c1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f023 0307 	bic.w	r3, r3, #7
 8004cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	617b      	str	r3, [r7, #20]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01f      	beq.n	8004d20 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e012      	b.n	8004d0c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	7819      	ldrb	r1, [r3, #0]
 8004cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3334      	adds	r3, #52	@ 0x34
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b0f      	cmp	r3, #15
 8004d10:	d9e9      	bls.n	8004ce6 <prvInitialiseNewTask+0x66>
 8004d12:	e000      	b.n	8004d16 <prvInitialiseNewTask+0x96>
			{
				break;
 8004d14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d1e:	e003      	b.n	8004d28 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	2b37      	cmp	r3, #55	@ 0x37
 8004d2c:	d901      	bls.n	8004d32 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d2e:	2337      	movs	r3, #55	@ 0x37
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff f96a 	bl	8004022 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	3318      	adds	r3, #24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff f965 	bl	8004022 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	3354      	adds	r3, #84	@ 0x54
 8004d82:	224c      	movs	r2, #76	@ 0x4c
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 ff48 	bl	8006c1c <memset>
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <prvInitialiseNewTask+0x144>)
 8004d90:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc8 <prvInitialiseNewTask+0x148>)
 8004d96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dcc <prvInitialiseNewTask+0x14c>)
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	69b8      	ldr	r0, [r7, #24]
 8004da4:	f001 f954 	bl	8006050 <pxPortInitialiseStack>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20001c1c 	.word	0x20001c1c
 8004dc8:	20001c84 	.word	0x20001c84
 8004dcc:	20001cec 	.word	0x20001cec

08004dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd8:	f001 fa28 	bl	800622c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004de6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dee:	4a2a      	ldr	r2, [pc, #168]	@ (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df4:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d110      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dfc:	f000 fc2a 	bl	8005654 <prvInitialiseTaskLists>
 8004e00:	e00d      	b.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e02:	4b26      	ldr	r3, [pc, #152]	@ (8004e9c <prvAddNewTaskToReadyList+0xcc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e0a:	4b23      	ldr	r3, [pc, #140]	@ (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d802      	bhi.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e18:	4a1f      	ldr	r2, [pc, #124]	@ (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea4 <prvAddNewTaskToReadyList+0xd4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d903      	bls.n	8004e44 <prvAddNewTaskToReadyList+0x74>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	4a18      	ldr	r2, [pc, #96]	@ (8004ea4 <prvAddNewTaskToReadyList+0xd4>)
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4a15      	ldr	r2, [pc, #84]	@ (8004ea8 <prvAddNewTaskToReadyList+0xd8>)
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7ff f8ed 	bl	800403a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e60:	f001 fa14 	bl	800628c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e64:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <prvAddNewTaskToReadyList+0xcc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d207      	bcs.n	8004e8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <prvAddNewTaskToReadyList+0xdc>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000e9c 	.word	0x20000e9c
 8004e98:	200009c8 	.word	0x200009c8
 8004e9c:	20000ea8 	.word	0x20000ea8
 8004ea0:	20000eb8 	.word	0x20000eb8
 8004ea4:	20000ea4 	.word	0x20000ea4
 8004ea8:	200009cc 	.word	0x200009cc
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ec2:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <vTaskDelay+0x64>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <vTaskDelay+0x32>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	60bb      	str	r3, [r7, #8]
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	e7fd      	b.n	8004ede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ee2:	f000 f88b 	bl	8004ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fd05 	bl	80058f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eee:	f000 f893 	bl	8005018 <xTaskResumeAll>
 8004ef2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d107      	bne.n	8004f0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004efa:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <vTaskDelay+0x68>)
 8004efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000ec4 	.word	0x20000ec4
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	@ 0x28
 8004f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f2a:	463a      	mov	r2, r7
 8004f2c:	1d39      	adds	r1, r7, #4
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f824 	bl	8003f80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	9202      	str	r2, [sp, #8]
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	2300      	movs	r3, #0
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	460a      	mov	r2, r1
 8004f4a:	4924      	ldr	r1, [pc, #144]	@ (8004fdc <vTaskStartScheduler+0xc0>)
 8004f4c:	4824      	ldr	r0, [pc, #144]	@ (8004fe0 <vTaskStartScheduler+0xc4>)
 8004f4e:	f7ff fdf1 	bl	8004b34 <xTaskCreateStatic>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4a23      	ldr	r2, [pc, #140]	@ (8004fe4 <vTaskStartScheduler+0xc8>)
 8004f56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f58:	4b22      	ldr	r3, [pc, #136]	@ (8004fe4 <vTaskStartScheduler+0xc8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e001      	b.n	8004f6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f70:	f000 fd16 	bl	80059a0 <xTimerCreateTimerTask>
 8004f74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d11b      	bne.n	8004fb4 <vTaskStartScheduler+0x98>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	613b      	str	r3, [r7, #16]
}
 8004f8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <vTaskStartScheduler+0xcc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3354      	adds	r3, #84	@ 0x54
 8004f96:	4a15      	ldr	r2, [pc, #84]	@ (8004fec <vTaskStartScheduler+0xd0>)
 8004f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <vTaskStartScheduler+0xd4>)
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <vTaskStartScheduler+0xd8>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <vTaskStartScheduler+0xdc>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fae:	f001 f8cb 	bl	8006148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb2:	e00f      	b.n	8004fd4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d10b      	bne.n	8004fd4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60fb      	str	r3, [r7, #12]
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <vTaskStartScheduler+0xb4>
}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080078a8 	.word	0x080078a8
 8004fe0:	08005625 	.word	0x08005625
 8004fe4:	20000ec0 	.word	0x20000ec0
 8004fe8:	200009c8 	.word	0x200009c8
 8004fec:	2000001c 	.word	0x2000001c
 8004ff0:	20000ebc 	.word	0x20000ebc
 8004ff4:	20000ea8 	.word	0x20000ea8
 8004ff8:	20000ea0 	.word	0x20000ea0

08004ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005000:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <vTaskSuspendAll+0x18>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	4a03      	ldr	r2, [pc, #12]	@ (8005014 <vTaskSuspendAll+0x18>)
 8005008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000ec4 	.word	0x20000ec4

08005018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005026:	4b42      	ldr	r3, [pc, #264]	@ (8005130 <xTaskResumeAll+0x118>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <xTaskResumeAll+0x2e>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	603b      	str	r3, [r7, #0]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005046:	f001 f8f1 	bl	800622c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800504a:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <xTaskResumeAll+0x118>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3b01      	subs	r3, #1
 8005050:	4a37      	ldr	r2, [pc, #220]	@ (8005130 <xTaskResumeAll+0x118>)
 8005052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005054:	4b36      	ldr	r3, [pc, #216]	@ (8005130 <xTaskResumeAll+0x118>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d162      	bne.n	8005122 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800505c:	4b35      	ldr	r3, [pc, #212]	@ (8005134 <xTaskResumeAll+0x11c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05e      	beq.n	8005122 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005064:	e02f      	b.n	80050c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005066:	4b34      	ldr	r3, [pc, #208]	@ (8005138 <xTaskResumeAll+0x120>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3318      	adds	r3, #24
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff f83c 	bl	80040f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3304      	adds	r3, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff f837 	bl	80040f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005086:	4b2d      	ldr	r3, [pc, #180]	@ (800513c <xTaskResumeAll+0x124>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d903      	bls.n	8005096 <xTaskResumeAll+0x7e>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <xTaskResumeAll+0x124>)
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4a27      	ldr	r2, [pc, #156]	@ (8005140 <xTaskResumeAll+0x128>)
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f7fe ffc4 	bl	800403a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b6:	4b23      	ldr	r3, [pc, #140]	@ (8005144 <xTaskResumeAll+0x12c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80050c0:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <xTaskResumeAll+0x130>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005138 <xTaskResumeAll+0x120>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1cb      	bne.n	8005066 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050d4:	f000 fb62 	bl	800579c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050d8:	4b1c      	ldr	r3, [pc, #112]	@ (800514c <xTaskResumeAll+0x134>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d010      	beq.n	8005106 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050e4:	f000 f844 	bl	8005170 <xTaskIncrementTick>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050ee:	4b16      	ldr	r3, [pc, #88]	@ (8005148 <xTaskResumeAll+0x130>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f1      	bne.n	80050e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005100:	4b12      	ldr	r3, [pc, #72]	@ (800514c <xTaskResumeAll+0x134>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005106:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <xTaskResumeAll+0x130>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800510e:	2301      	movs	r3, #1
 8005110:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005112:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <xTaskResumeAll+0x138>)
 8005114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005122:	f001 f8b3 	bl	800628c <vPortExitCritical>

	return xAlreadyYielded;
 8005126:	68bb      	ldr	r3, [r7, #8]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000ec4 	.word	0x20000ec4
 8005134:	20000e9c 	.word	0x20000e9c
 8005138:	20000e5c 	.word	0x20000e5c
 800513c:	20000ea4 	.word	0x20000ea4
 8005140:	200009cc 	.word	0x200009cc
 8005144:	200009c8 	.word	0x200009c8
 8005148:	20000eb0 	.word	0x20000eb0
 800514c:	20000eac 	.word	0x20000eac
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800515a:	4b04      	ldr	r3, [pc, #16]	@ (800516c <xTaskGetTickCount+0x18>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005160:	687b      	ldr	r3, [r7, #4]
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	20000ea0 	.word	0x20000ea0

08005170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800517a:	4b4f      	ldr	r3, [pc, #316]	@ (80052b8 <xTaskIncrementTick+0x148>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 8090 	bne.w	80052a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005184:	4b4d      	ldr	r3, [pc, #308]	@ (80052bc <xTaskIncrementTick+0x14c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800518c:	4a4b      	ldr	r2, [pc, #300]	@ (80052bc <xTaskIncrementTick+0x14c>)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d121      	bne.n	80051dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005198:	4b49      	ldr	r3, [pc, #292]	@ (80052c0 <xTaskIncrementTick+0x150>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	603b      	str	r3, [r7, #0]
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <xTaskIncrementTick+0x46>
 80051ba:	4b41      	ldr	r3, [pc, #260]	@ (80052c0 <xTaskIncrementTick+0x150>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	4b40      	ldr	r3, [pc, #256]	@ (80052c4 <xTaskIncrementTick+0x154>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3e      	ldr	r2, [pc, #248]	@ (80052c0 <xTaskIncrementTick+0x150>)
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4a3e      	ldr	r2, [pc, #248]	@ (80052c4 <xTaskIncrementTick+0x154>)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	4b3e      	ldr	r3, [pc, #248]	@ (80052c8 <xTaskIncrementTick+0x158>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	4a3c      	ldr	r2, [pc, #240]	@ (80052c8 <xTaskIncrementTick+0x158>)
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	f000 fae0 	bl	800579c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051dc:	4b3b      	ldr	r3, [pc, #236]	@ (80052cc <xTaskIncrementTick+0x15c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d349      	bcc.n	800527a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e6:	4b36      	ldr	r3, [pc, #216]	@ (80052c0 <xTaskIncrementTick+0x150>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	4b36      	ldr	r3, [pc, #216]	@ (80052cc <xTaskIncrementTick+0x15c>)
 80051f2:	f04f 32ff 	mov.w	r2, #4294967295
 80051f6:	601a      	str	r2, [r3, #0]
					break;
 80051f8:	e03f      	b.n	800527a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fa:	4b31      	ldr	r3, [pc, #196]	@ (80052c0 <xTaskIncrementTick+0x150>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d203      	bcs.n	800521a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005212:	4a2e      	ldr	r2, [pc, #184]	@ (80052cc <xTaskIncrementTick+0x15c>)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005218:	e02f      	b.n	800527a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	3304      	adds	r3, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe ff66 	bl	80040f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	3318      	adds	r3, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe ff5d 	bl	80040f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523a:	4b25      	ldr	r3, [pc, #148]	@ (80052d0 <xTaskIncrementTick+0x160>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d903      	bls.n	800524a <xTaskIncrementTick+0xda>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	4a22      	ldr	r2, [pc, #136]	@ (80052d0 <xTaskIncrementTick+0x160>)
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4a1f      	ldr	r2, [pc, #124]	@ (80052d4 <xTaskIncrementTick+0x164>)
 8005258:	441a      	add	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7fe feea 	bl	800403a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526a:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <xTaskIncrementTick+0x168>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	429a      	cmp	r2, r3
 8005272:	d3b8      	bcc.n	80051e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005278:	e7b5      	b.n	80051e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800527a:	4b17      	ldr	r3, [pc, #92]	@ (80052d8 <xTaskIncrementTick+0x168>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005280:	4914      	ldr	r1, [pc, #80]	@ (80052d4 <xTaskIncrementTick+0x164>)
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d901      	bls.n	8005296 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005296:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <xTaskIncrementTick+0x16c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e004      	b.n	80052ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052a4:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <xTaskIncrementTick+0x170>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a0d      	ldr	r2, [pc, #52]	@ (80052e0 <xTaskIncrementTick+0x170>)
 80052ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052ae:	697b      	ldr	r3, [r7, #20]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000ec4 	.word	0x20000ec4
 80052bc:	20000ea0 	.word	0x20000ea0
 80052c0:	20000e54 	.word	0x20000e54
 80052c4:	20000e58 	.word	0x20000e58
 80052c8:	20000eb4 	.word	0x20000eb4
 80052cc:	20000ebc 	.word	0x20000ebc
 80052d0:	20000ea4 	.word	0x20000ea4
 80052d4:	200009cc 	.word	0x200009cc
 80052d8:	200009c8 	.word	0x200009c8
 80052dc:	20000eb0 	.word	0x20000eb0
 80052e0:	20000eac 	.word	0x20000eac

080052e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005394 <vTaskSwitchContext+0xb0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052f2:	4b29      	ldr	r3, [pc, #164]	@ (8005398 <vTaskSwitchContext+0xb4>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052f8:	e047      	b.n	800538a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80052fa:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <vTaskSwitchContext+0xb4>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005300:	4b26      	ldr	r3, [pc, #152]	@ (800539c <vTaskSwitchContext+0xb8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e011      	b.n	800532c <vTaskSwitchContext+0x48>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <vTaskSwitchContext+0x42>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <vTaskSwitchContext+0x3e>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b01      	subs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	491c      	ldr	r1, [pc, #112]	@ (80053a0 <vTaskSwitchContext+0xbc>)
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0e3      	beq.n	8005308 <vTaskSwitchContext+0x24>
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a15      	ldr	r2, [pc, #84]	@ (80053a0 <vTaskSwitchContext+0xbc>)
 800534c:	4413      	add	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	3308      	adds	r3, #8
 8005362:	429a      	cmp	r2, r3
 8005364:	d104      	bne.n	8005370 <vTaskSwitchContext+0x8c>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	605a      	str	r2, [r3, #4]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	4a0b      	ldr	r2, [pc, #44]	@ (80053a4 <vTaskSwitchContext+0xc0>)
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4a08      	ldr	r2, [pc, #32]	@ (800539c <vTaskSwitchContext+0xb8>)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005380:	4b08      	ldr	r3, [pc, #32]	@ (80053a4 <vTaskSwitchContext+0xc0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3354      	adds	r3, #84	@ 0x54
 8005386:	4a08      	ldr	r2, [pc, #32]	@ (80053a8 <vTaskSwitchContext+0xc4>)
 8005388:	6013      	str	r3, [r2, #0]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	20000ec4 	.word	0x20000ec4
 8005398:	20000eb0 	.word	0x20000eb0
 800539c:	20000ea4 	.word	0x20000ea4
 80053a0:	200009cc 	.word	0x200009cc
 80053a4:	200009c8 	.word	0x200009c8
 80053a8:	2000001c 	.word	0x2000001c

080053ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60fb      	str	r3, [r7, #12]
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053d4:	4b07      	ldr	r3, [pc, #28]	@ (80053f4 <vTaskPlaceOnEventList+0x48>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3318      	adds	r3, #24
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fe fe4f 	bl	8004080 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053e2:	2101      	movs	r1, #1
 80053e4:	6838      	ldr	r0, [r7, #0]
 80053e6:	f000 fa87 	bl	80058f8 <prvAddCurrentTaskToDelayedList>
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	200009c8 	.word	0x200009c8

080053f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	617b      	str	r3, [r7, #20]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <vTaskPlaceOnEventListRestricted+0x54>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3318      	adds	r3, #24
 8005428:	4619      	mov	r1, r3
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7fe fe05 	bl	800403a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68b8      	ldr	r0, [r7, #8]
 8005440:	f000 fa5a 	bl	80058f8 <prvAddCurrentTaskToDelayedList>
	}
 8005444:	bf00      	nop
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	200009c8 	.word	0x200009c8

08005450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60fb      	str	r3, [r7, #12]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	3318      	adds	r3, #24
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fe34 	bl	80040f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005488:	4b1d      	ldr	r3, [pc, #116]	@ (8005500 <xTaskRemoveFromEventList+0xb0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11d      	bne.n	80054cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe fe2b 	bl	80040f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549e:	4b19      	ldr	r3, [pc, #100]	@ (8005504 <xTaskRemoveFromEventList+0xb4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d903      	bls.n	80054ae <xTaskRemoveFromEventList+0x5e>
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054aa:	4a16      	ldr	r2, [pc, #88]	@ (8005504 <xTaskRemoveFromEventList+0xb4>)
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a13      	ldr	r2, [pc, #76]	@ (8005508 <xTaskRemoveFromEventList+0xb8>)
 80054bc:	441a      	add	r2, r3
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7fe fdb8 	bl	800403a <vListInsertEnd>
 80054ca:	e005      	b.n	80054d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	3318      	adds	r3, #24
 80054d0:	4619      	mov	r1, r3
 80054d2:	480e      	ldr	r0, [pc, #56]	@ (800550c <xTaskRemoveFromEventList+0xbc>)
 80054d4:	f7fe fdb1 	bl	800403a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <xTaskRemoveFromEventList+0xc0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d905      	bls.n	80054f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054e6:	2301      	movs	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <xTaskRemoveFromEventList+0xc4>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e001      	b.n	80054f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054f6:	697b      	ldr	r3, [r7, #20]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000ec4 	.word	0x20000ec4
 8005504:	20000ea4 	.word	0x20000ea4
 8005508:	200009cc 	.word	0x200009cc
 800550c:	20000e5c 	.word	0x20000e5c
 8005510:	200009c8 	.word	0x200009c8
 8005514:	20000eb0 	.word	0x20000eb0

08005518 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005520:	4b06      	ldr	r3, [pc, #24]	@ (800553c <vTaskInternalSetTimeOutState+0x24>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005528:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <vTaskInternalSetTimeOutState+0x28>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000eb4 	.word	0x20000eb4
 8005540:	20000ea0 	.word	0x20000ea0

08005544 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	613b      	str	r3, [r7, #16]
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800558a:	f000 fe4f 	bl	800622c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800558e:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <xTaskCheckForTimeOut+0xc0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d102      	bne.n	80055ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	e023      	b.n	80055f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <xTaskCheckForTimeOut+0xc4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d007      	beq.n	80055ca <xTaskCheckForTimeOut+0x86>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d302      	bcc.n	80055ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	e015      	b.n	80055f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d20b      	bcs.n	80055ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ff99 	bl	8005518 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e004      	b.n	80055f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055f2:	2301      	movs	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055f6:	f000 fe49 	bl	800628c <vPortExitCritical>

	return xReturn;
 80055fa:	69fb      	ldr	r3, [r7, #28]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000ea0 	.word	0x20000ea0
 8005608:	20000eb4 	.word	0x20000eb4

0800560c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005610:	4b03      	ldr	r3, [pc, #12]	@ (8005620 <vTaskMissedYield+0x14>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000eb0 	.word	0x20000eb0

08005624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800562c:	f000 f852 	bl	80056d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005630:	4b06      	ldr	r3, [pc, #24]	@ (800564c <prvIdleTask+0x28>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d9f9      	bls.n	800562c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <prvIdleTask+0x2c>)
 800563a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005648:	e7f0      	b.n	800562c <prvIdleTask+0x8>
 800564a:	bf00      	nop
 800564c:	200009cc 	.word	0x200009cc
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800565a:	2300      	movs	r3, #0
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	e00c      	b.n	800567a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a12      	ldr	r2, [pc, #72]	@ (80056b4 <prvInitialiseTaskLists+0x60>)
 800566c:	4413      	add	r3, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fcb8 	bl	8003fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3301      	adds	r3, #1
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b37      	cmp	r3, #55	@ 0x37
 800567e:	d9ef      	bls.n	8005660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005680:	480d      	ldr	r0, [pc, #52]	@ (80056b8 <prvInitialiseTaskLists+0x64>)
 8005682:	f7fe fcaf 	bl	8003fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005686:	480d      	ldr	r0, [pc, #52]	@ (80056bc <prvInitialiseTaskLists+0x68>)
 8005688:	f7fe fcac 	bl	8003fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800568c:	480c      	ldr	r0, [pc, #48]	@ (80056c0 <prvInitialiseTaskLists+0x6c>)
 800568e:	f7fe fca9 	bl	8003fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005692:	480c      	ldr	r0, [pc, #48]	@ (80056c4 <prvInitialiseTaskLists+0x70>)
 8005694:	f7fe fca6 	bl	8003fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005698:	480b      	ldr	r0, [pc, #44]	@ (80056c8 <prvInitialiseTaskLists+0x74>)
 800569a:	f7fe fca3 	bl	8003fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800569e:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <prvInitialiseTaskLists+0x78>)
 80056a0:	4a05      	ldr	r2, [pc, #20]	@ (80056b8 <prvInitialiseTaskLists+0x64>)
 80056a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056a4:	4b0a      	ldr	r3, [pc, #40]	@ (80056d0 <prvInitialiseTaskLists+0x7c>)
 80056a6:	4a05      	ldr	r2, [pc, #20]	@ (80056bc <prvInitialiseTaskLists+0x68>)
 80056a8:	601a      	str	r2, [r3, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200009cc 	.word	0x200009cc
 80056b8:	20000e2c 	.word	0x20000e2c
 80056bc:	20000e40 	.word	0x20000e40
 80056c0:	20000e5c 	.word	0x20000e5c
 80056c4:	20000e70 	.word	0x20000e70
 80056c8:	20000e88 	.word	0x20000e88
 80056cc:	20000e54 	.word	0x20000e54
 80056d0:	20000e58 	.word	0x20000e58

080056d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056da:	e019      	b.n	8005710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056dc:	f000 fda6 	bl	800622c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <prvCheckTasksWaitingTermination+0x50>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe fcff 	bl	80040f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <prvCheckTasksWaitingTermination+0x54>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005728 <prvCheckTasksWaitingTermination+0x54>)
 80056fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056fc:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <prvCheckTasksWaitingTermination+0x58>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3b01      	subs	r3, #1
 8005702:	4a0a      	ldr	r2, [pc, #40]	@ (800572c <prvCheckTasksWaitingTermination+0x58>)
 8005704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005706:	f000 fdc1 	bl	800628c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f810 	bl	8005730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005710:	4b06      	ldr	r3, [pc, #24]	@ (800572c <prvCheckTasksWaitingTermination+0x58>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e1      	bne.n	80056dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000e70 	.word	0x20000e70
 8005728:	20000e9c 	.word	0x20000e9c
 800572c:	20000e84 	.word	0x20000e84

08005730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3354      	adds	r3, #84	@ 0x54
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fa85 	bl	8006c4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005748:	2b00      	cmp	r3, #0
 800574a:	d108      	bne.n	800575e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005750:	4618      	mov	r0, r3
 8005752:	f000 ff3b 	bl	80065cc <vPortFree>
				vPortFree( pxTCB );
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 ff38 	bl	80065cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800575c:	e019      	b.n	8005792 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005764:	2b01      	cmp	r3, #1
 8005766:	d103      	bne.n	8005770 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 ff2f 	bl	80065cc <vPortFree>
	}
 800576e:	e010      	b.n	8005792 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005776:	2b02      	cmp	r3, #2
 8005778:	d00b      	beq.n	8005792 <prvDeleteTCB+0x62>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	60fb      	str	r3, [r7, #12]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <prvDeleteTCB+0x5e>
	}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a2:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <prvResetNextTaskUnblockTime+0x38>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057ac:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <prvResetNextTaskUnblockTime+0x3c>)
 80057ae:	f04f 32ff 	mov.w	r2, #4294967295
 80057b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057b4:	e008      	b.n	80057c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b6:	4b07      	ldr	r3, [pc, #28]	@ (80057d4 <prvResetNextTaskUnblockTime+0x38>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a04      	ldr	r2, [pc, #16]	@ (80057d8 <prvResetNextTaskUnblockTime+0x3c>)
 80057c6:	6013      	str	r3, [r2, #0]
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000e54 	.word	0x20000e54
 80057d8:	20000ebc 	.word	0x20000ebc

080057dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <xTaskGetSchedulerState+0x34>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057ea:	2301      	movs	r3, #1
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	e008      	b.n	8005802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f0:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <xTaskGetSchedulerState+0x38>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057f8:	2302      	movs	r3, #2
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	e001      	b.n	8005802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057fe:	2300      	movs	r3, #0
 8005800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005802:	687b      	ldr	r3, [r7, #4]
	}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000ea8 	.word	0x20000ea8
 8005814:	20000ec4 	.word	0x20000ec4

08005818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d058      	beq.n	80058e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800582e:	4b2f      	ldr	r3, [pc, #188]	@ (80058ec <xTaskPriorityDisinherit+0xd4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	429a      	cmp	r2, r3
 8005836:	d00b      	beq.n	8005850 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	60fb      	str	r3, [r7, #12]
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	60bb      	str	r3, [r7, #8]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005874:	1e5a      	subs	r2, r3, #1
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005882:	429a      	cmp	r2, r3
 8005884:	d02c      	beq.n	80058e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588a:	2b00      	cmp	r3, #0
 800588c:	d128      	bne.n	80058e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3304      	adds	r3, #4
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe fc2c 	bl	80040f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b0:	4b0f      	ldr	r3, [pc, #60]	@ (80058f0 <xTaskPriorityDisinherit+0xd8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d903      	bls.n	80058c0 <xTaskPriorityDisinherit+0xa8>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	4a0c      	ldr	r2, [pc, #48]	@ (80058f0 <xTaskPriorityDisinherit+0xd8>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a09      	ldr	r2, [pc, #36]	@ (80058f4 <xTaskPriorityDisinherit+0xdc>)
 80058ce:	441a      	add	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fe fbaf 	bl	800403a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058e0:	697b      	ldr	r3, [r7, #20]
	}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200009c8 	.word	0x200009c8
 80058f0:	20000ea4 	.word	0x20000ea4
 80058f4:	200009cc 	.word	0x200009cc

080058f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005902:	4b21      	ldr	r3, [pc, #132]	@ (8005988 <prvAddCurrentTaskToDelayedList+0x90>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005908:	4b20      	ldr	r3, [pc, #128]	@ (800598c <prvAddCurrentTaskToDelayedList+0x94>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3304      	adds	r3, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fbee 	bl	80040f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d10a      	bne.n	8005932 <prvAddCurrentTaskToDelayedList+0x3a>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005922:	4b1a      	ldr	r3, [pc, #104]	@ (800598c <prvAddCurrentTaskToDelayedList+0x94>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4819      	ldr	r0, [pc, #100]	@ (8005990 <prvAddCurrentTaskToDelayedList+0x98>)
 800592c:	f7fe fb85 	bl	800403a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005930:	e026      	b.n	8005980 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800593a:	4b14      	ldr	r3, [pc, #80]	@ (800598c <prvAddCurrentTaskToDelayedList+0x94>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	429a      	cmp	r2, r3
 8005948:	d209      	bcs.n	800595e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800594a:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x9c>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <prvAddCurrentTaskToDelayedList+0x94>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3304      	adds	r3, #4
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f7fe fb92 	bl	8004080 <vListInsert>
}
 800595c:	e010      	b.n	8005980 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800595e:	4b0e      	ldr	r3, [pc, #56]	@ (8005998 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <prvAddCurrentTaskToDelayedList+0x94>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f7fe fb88 	bl	8004080 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005970:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d202      	bcs.n	8005980 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800597a:	4a08      	ldr	r2, [pc, #32]	@ (800599c <prvAddCurrentTaskToDelayedList+0xa4>)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6013      	str	r3, [r2, #0]
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000ea0 	.word	0x20000ea0
 800598c:	200009c8 	.word	0x200009c8
 8005990:	20000e88 	.word	0x20000e88
 8005994:	20000e58 	.word	0x20000e58
 8005998:	20000e54 	.word	0x20000e54
 800599c:	20000ebc 	.word	0x20000ebc

080059a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059aa:	f000 fb11 	bl	8005fd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <xTimerCreateTimerTask+0x84>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d021      	beq.n	80059fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059be:	1d3a      	adds	r2, r7, #4
 80059c0:	f107 0108 	add.w	r1, r7, #8
 80059c4:	f107 030c 	add.w	r3, r7, #12
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe faf1 	bl	8003fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	9202      	str	r2, [sp, #8]
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	2302      	movs	r3, #2
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2300      	movs	r3, #0
 80059de:	460a      	mov	r2, r1
 80059e0:	4911      	ldr	r1, [pc, #68]	@ (8005a28 <xTimerCreateTimerTask+0x88>)
 80059e2:	4812      	ldr	r0, [pc, #72]	@ (8005a2c <xTimerCreateTimerTask+0x8c>)
 80059e4:	f7ff f8a6 	bl	8004b34 <xTaskCreateStatic>
 80059e8:	4603      	mov	r3, r0
 80059ea:	4a11      	ldr	r2, [pc, #68]	@ (8005a30 <xTimerCreateTimerTask+0x90>)
 80059ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059ee:	4b10      	ldr	r3, [pc, #64]	@ (8005a30 <xTimerCreateTimerTask+0x90>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059f6:	2301      	movs	r3, #1
 80059f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a18:	697b      	ldr	r3, [r7, #20]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000ef8 	.word	0x20000ef8
 8005a28:	080078b0 	.word	0x080078b0
 8005a2c:	08005b6d 	.word	0x08005b6d
 8005a30:	20000efc 	.word	0x20000efc

08005a34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	@ 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10b      	bne.n	8005a64 <xTimerGenericCommand+0x30>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	623b      	str	r3, [r7, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a64:	4b19      	ldr	r3, [pc, #100]	@ (8005acc <xTimerGenericCommand+0x98>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02a      	beq.n	8005ac2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	dc18      	bgt.n	8005ab0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a7e:	f7ff fead 	bl	80057dc <xTaskGetSchedulerState>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d109      	bne.n	8005a9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a88:	4b10      	ldr	r3, [pc, #64]	@ (8005acc <xTimerGenericCommand+0x98>)
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	f107 0110 	add.w	r1, r7, #16
 8005a90:	2300      	movs	r3, #0
 8005a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a94:	f7fe fc60 	bl	8004358 <xQueueGenericSend>
 8005a98:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a9a:	e012      	b.n	8005ac2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <xTimerGenericCommand+0x98>)
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	f107 0110 	add.w	r1, r7, #16
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f7fe fc56 	bl	8004358 <xQueueGenericSend>
 8005aac:	6278      	str	r0, [r7, #36]	@ 0x24
 8005aae:	e008      	b.n	8005ac2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ab0:	4b06      	ldr	r3, [pc, #24]	@ (8005acc <xTimerGenericCommand+0x98>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	f107 0110 	add.w	r1, r7, #16
 8005ab8:	2300      	movs	r3, #0
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	f7fe fd4e 	bl	800455c <xQueueGenericSendFromISR>
 8005ac0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3728      	adds	r7, #40	@ 0x28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000ef8 	.word	0x20000ef8

08005ad0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ada:	4b23      	ldr	r3, [pc, #140]	@ (8005b68 <prvProcessExpiredTimer+0x98>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe fb01 	bl	80040f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d023      	beq.n	8005b44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	18d1      	adds	r1, r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	6978      	ldr	r0, [r7, #20]
 8005b0a:	f000 f8d3 	bl	8005cb4 <prvInsertTimerInActiveList>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d020      	beq.n	8005b56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b14:	2300      	movs	r3, #0
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6978      	ldr	r0, [r7, #20]
 8005b20:	f7ff ff88 	bl	8005a34 <xTimerGenericCommand>
 8005b24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d114      	bne.n	8005b56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60fb      	str	r3, [r7, #12]
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	6978      	ldr	r0, [r7, #20]
 8005b5c:	4798      	blx	r3
}
 8005b5e:	bf00      	nop
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000ef0 	.word	0x20000ef0

08005b6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b74:	f107 0308 	add.w	r3, r7, #8
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f859 	bl	8005c30 <prvGetNextExpireTime>
 8005b7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4619      	mov	r1, r3
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f805 	bl	8005b94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b8a:	f000 f8d5 	bl	8005d38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b8e:	bf00      	nop
 8005b90:	e7f0      	b.n	8005b74 <prvTimerTask+0x8>
	...

08005b94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b9e:	f7ff fa2d 	bl	8004ffc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f864 	bl	8005c74 <prvSampleTimeNow>
 8005bac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d130      	bne.n	8005c16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <prvProcessTimerOrBlockTask+0x3c>
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d806      	bhi.n	8005bd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bc2:	f7ff fa29 	bl	8005018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ff81 	bl	8005ad0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bce:	e024      	b.n	8005c1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bd6:	4b13      	ldr	r3, [pc, #76]	@ (8005c24 <prvProcessTimerOrBlockTask+0x90>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <prvProcessTimerOrBlockTask+0x50>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <prvProcessTimerOrBlockTask+0x52>
 8005be4:	2300      	movs	r3, #0
 8005be6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005be8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c28 <prvProcessTimerOrBlockTask+0x94>)
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f7fe ff69 	bl	8004acc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bfa:	f7ff fa0d 	bl	8005018 <xTaskResumeAll>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c04:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <prvProcessTimerOrBlockTask+0x98>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
}
 8005c14:	e001      	b.n	8005c1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c16:	f7ff f9ff 	bl	8005018 <xTaskResumeAll>
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000ef4 	.word	0x20000ef4
 8005c28:	20000ef8 	.word	0x20000ef8
 8005c2c:	e000ed04 	.word	0xe000ed04

08005c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c38:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <prvGetNextExpireTime+0x40>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <prvGetNextExpireTime+0x16>
 8005c42:	2201      	movs	r2, #1
 8005c44:	e000      	b.n	8005c48 <prvGetNextExpireTime+0x18>
 8005c46:	2200      	movs	r2, #0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c54:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <prvGetNextExpireTime+0x40>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e001      	b.n	8005c64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c64:	68fb      	ldr	r3, [r7, #12]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	20000ef0 	.word	0x20000ef0

08005c74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c7c:	f7ff fa6a 	bl	8005154 <xTaskGetTickCount>
 8005c80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c82:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <prvSampleTimeNow+0x3c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d205      	bcs.n	8005c98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c8c:	f000 f93a 	bl	8005f04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e002      	b.n	8005c9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	@ (8005cb0 <prvSampleTimeNow+0x3c>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000f00 	.word	0x20000f00

08005cb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d812      	bhi.n	8005d00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e01b      	b.n	8005d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cee:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <prvInsertTimerInActiveList+0x7c>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fe f9c1 	bl	8004080 <vListInsert>
 8005cfe:	e012      	b.n	8005d26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d206      	bcs.n	8005d16 <prvInsertTimerInActiveList+0x62>
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e007      	b.n	8005d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d16:	4b07      	ldr	r3, [pc, #28]	@ (8005d34 <prvInsertTimerInActiveList+0x80>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fe f9ad 	bl	8004080 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d26:	697b      	ldr	r3, [r7, #20]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000ef4 	.word	0x20000ef4
 8005d34:	20000ef0 	.word	0x20000ef0

08005d38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	@ 0x38
 8005d3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d3e:	e0ce      	b.n	8005ede <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da19      	bge.n	8005d7a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	3304      	adds	r3, #4
 8005d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	61fb      	str	r3, [r7, #28]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d70:	6850      	ldr	r0, [r2, #4]
 8005d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d74:	6892      	ldr	r2, [r2, #8]
 8005d76:	4611      	mov	r1, r2
 8005d78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f2c0 80ae 	blt.w	8005ede <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	3304      	adds	r3, #4
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe f9ac 	bl	80040f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d98:	463b      	mov	r3, r7
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff ff6a 	bl	8005c74 <prvSampleTimeNow>
 8005da0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	f200 8097 	bhi.w	8005ed8 <prvProcessReceivedCommands+0x1a0>
 8005daa:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <prvProcessReceivedCommands+0x78>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005dd9 	.word	0x08005dd9
 8005dbc:	08005e4f 	.word	0x08005e4f
 8005dc0:	08005e63 	.word	0x08005e63
 8005dc4:	08005eaf 	.word	0x08005eaf
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005dd9 	.word	0x08005dd9
 8005dd0:	08005e4f 	.word	0x08005e4f
 8005dd4:	08005e63 	.word	0x08005e63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	18d1      	adds	r1, r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005df8:	f7ff ff5c 	bl	8005cb4 <prvInsertTimerInActiveList>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d06c      	beq.n	8005edc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d061      	beq.n	8005edc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	441a      	add	r2, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	2300      	movs	r3, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e2a:	f7ff fe03 	bl	8005a34 <xTimerGenericCommand>
 8005e2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d152      	bne.n	8005edc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	61bb      	str	r3, [r7, #24]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e60:	e03d      	b.n	8005ede <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	617b      	str	r3, [r7, #20]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	18d1      	adds	r1, r2, r3
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ea8:	f7ff ff04 	bl	8005cb4 <prvInsertTimerInActiveList>
					break;
 8005eac:	e017      	b.n	8005ede <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ebe:	f000 fb85 	bl	80065cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ec2:	e00c      	b.n	8005ede <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ed6:	e002      	b.n	8005ede <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005ed8:	bf00      	nop
 8005eda:	e000      	b.n	8005ede <prvProcessReceivedCommands+0x1a6>
					break;
 8005edc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ede:	4b08      	ldr	r3, [pc, #32]	@ (8005f00 <prvProcessReceivedCommands+0x1c8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	1d39      	adds	r1, r7, #4
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fbd6 	bl	8004698 <xQueueReceive>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f47f af26 	bne.w	8005d40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3730      	adds	r7, #48	@ 0x30
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000ef8 	.word	0x20000ef8

08005f04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f0a:	e049      	b.n	8005fa0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005fc8 <prvSwitchTimerLists+0xc4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f16:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc8 <prvSwitchTimerLists+0xc4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe f8e3 	bl	80040f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d02f      	beq.n	8005fa0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d90e      	bls.n	8005f70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc8 <prvSwitchTimerLists+0xc4>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fe f889 	bl	8004080 <vListInsert>
 8005f6e:	e017      	b.n	8005fa0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f70:	2300      	movs	r3, #0
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	2100      	movs	r1, #0
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fd5a 	bl	8005a34 <xTimerGenericCommand>
 8005f80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	603b      	str	r3, [r7, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fa0:	4b09      	ldr	r3, [pc, #36]	@ (8005fc8 <prvSwitchTimerLists+0xc4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1b0      	bne.n	8005f0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <prvSwitchTimerLists+0xc4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fb0:	4b06      	ldr	r3, [pc, #24]	@ (8005fcc <prvSwitchTimerLists+0xc8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a04      	ldr	r2, [pc, #16]	@ (8005fc8 <prvSwitchTimerLists+0xc4>)
 8005fb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fb8:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <prvSwitchTimerLists+0xc8>)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6013      	str	r3, [r2, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000ef0 	.word	0x20000ef0
 8005fcc:	20000ef4 	.word	0x20000ef4

08005fd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fd6:	f000 f929 	bl	800622c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fda:	4b15      	ldr	r3, [pc, #84]	@ (8006030 <prvCheckForValidListAndQueue+0x60>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d120      	bne.n	8006024 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fe2:	4814      	ldr	r0, [pc, #80]	@ (8006034 <prvCheckForValidListAndQueue+0x64>)
 8005fe4:	f7fd fffe 	bl	8003fe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fe8:	4813      	ldr	r0, [pc, #76]	@ (8006038 <prvCheckForValidListAndQueue+0x68>)
 8005fea:	f7fd fffb 	bl	8003fe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fee:	4b13      	ldr	r3, [pc, #76]	@ (800603c <prvCheckForValidListAndQueue+0x6c>)
 8005ff0:	4a10      	ldr	r2, [pc, #64]	@ (8006034 <prvCheckForValidListAndQueue+0x64>)
 8005ff2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ff4:	4b12      	ldr	r3, [pc, #72]	@ (8006040 <prvCheckForValidListAndQueue+0x70>)
 8005ff6:	4a10      	ldr	r2, [pc, #64]	@ (8006038 <prvCheckForValidListAndQueue+0x68>)
 8005ff8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	4b11      	ldr	r3, [pc, #68]	@ (8006044 <prvCheckForValidListAndQueue+0x74>)
 8006000:	4a11      	ldr	r2, [pc, #68]	@ (8006048 <prvCheckForValidListAndQueue+0x78>)
 8006002:	2110      	movs	r1, #16
 8006004:	200a      	movs	r0, #10
 8006006:	f7fe f907 	bl	8004218 <xQueueGenericCreateStatic>
 800600a:	4603      	mov	r3, r0
 800600c:	4a08      	ldr	r2, [pc, #32]	@ (8006030 <prvCheckForValidListAndQueue+0x60>)
 800600e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006010:	4b07      	ldr	r3, [pc, #28]	@ (8006030 <prvCheckForValidListAndQueue+0x60>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006018:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <prvCheckForValidListAndQueue+0x60>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	490b      	ldr	r1, [pc, #44]	@ (800604c <prvCheckForValidListAndQueue+0x7c>)
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fd2c 	bl	8004a7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006024:	f000 f932 	bl	800628c <vPortExitCritical>
}
 8006028:	bf00      	nop
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000ef8 	.word	0x20000ef8
 8006034:	20000ec8 	.word	0x20000ec8
 8006038:	20000edc 	.word	0x20000edc
 800603c:	20000ef0 	.word	0x20000ef0
 8006040:	20000ef4 	.word	0x20000ef4
 8006044:	20000fa4 	.word	0x20000fa4
 8006048:	20000f04 	.word	0x20000f04
 800604c:	080078b8 	.word	0x080078b8

08006050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3b04      	subs	r3, #4
 8006060:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3b04      	subs	r3, #4
 800606e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3b04      	subs	r3, #4
 800607e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006080:	4a08      	ldr	r2, [pc, #32]	@ (80060a4 <pxPortInitialiseStack+0x54>)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b14      	subs	r3, #20
 800608a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3b20      	subs	r3, #32
 8006096:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006098:	68fb      	ldr	r3, [r7, #12]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr
 80060a4:	080060a9 	.word	0x080060a9

080060a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060b2:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <prvTaskExitError+0x54>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d00b      	beq.n	80060d4 <prvTaskExitError+0x2c>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	60fb      	str	r3, [r7, #12]
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	e7fd      	b.n	80060d0 <prvTaskExitError+0x28>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	60bb      	str	r3, [r7, #8]
}
 80060e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060e8:	bf00      	nop
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0fc      	beq.n	80060ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	2000000c 	.word	0x2000000c

08006100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006100:	4b07      	ldr	r3, [pc, #28]	@ (8006120 <pxCurrentTCBConst2>)
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800610a:	f380 8809 	msr	PSP, r0
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8811 	msr	BASEPRI, r0
 800611a:	f04e 0e0d 	orr.w	lr, lr, #13
 800611e:	4770      	bx	lr

08006120 <pxCurrentTCBConst2>:
 8006120:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop

08006128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006128:	4806      	ldr	r0, [pc, #24]	@ (8006144 <prvPortStartFirstTask+0x1c>)
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	f380 8808 	msr	MSP, r0
 8006132:	b662      	cpsie	i
 8006134:	b661      	cpsie	f
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	df00      	svc	0
 8006140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006142:	bf00      	nop
 8006144:	e000ed08 	.word	0xe000ed08

08006148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800614e:	4b32      	ldr	r3, [pc, #200]	@ (8006218 <xPortStartScheduler+0xd0>)
 8006150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	22ff      	movs	r2, #255	@ 0xff
 800615e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4b2a      	ldr	r3, [pc, #168]	@ (800621c <xPortStartScheduler+0xd4>)
 8006174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006176:	4b2a      	ldr	r3, [pc, #168]	@ (8006220 <xPortStartScheduler+0xd8>)
 8006178:	2207      	movs	r2, #7
 800617a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800617c:	e009      	b.n	8006192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800617e:	4b28      	ldr	r3, [pc, #160]	@ (8006220 <xPortStartScheduler+0xd8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3b01      	subs	r3, #1
 8006184:	4a26      	ldr	r2, [pc, #152]	@ (8006220 <xPortStartScheduler+0xd8>)
 8006186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b80      	cmp	r3, #128	@ 0x80
 800619c:	d0ef      	beq.n	800617e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800619e:	4b20      	ldr	r3, [pc, #128]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1c3 0307 	rsb	r3, r3, #7
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d00b      	beq.n	80061c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60bb      	str	r3, [r7, #8]
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	e7fd      	b.n	80061be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061c2:	4b17      	ldr	r3, [pc, #92]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	4a15      	ldr	r2, [pc, #84]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061cc:	4b14      	ldr	r3, [pc, #80]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061d4:	4a12      	ldr	r2, [pc, #72]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061e0:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061f8:	f000 f8b8 	bl	800636c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006228 <xPortStartScheduler+0xe0>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006202:	f7ff ff91 	bl	8006128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006206:	f7ff f86d 	bl	80052e4 <vTaskSwitchContext>
	prvTaskExitError();
 800620a:	f7ff ff4d 	bl	80060a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	e000e400 	.word	0xe000e400
 800621c:	20000ff4 	.word	0x20000ff4
 8006220:	20000ff8 	.word	0x20000ff8
 8006224:	e000ed20 	.word	0xe000ed20
 8006228:	2000000c 	.word	0x2000000c

0800622c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006246:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <vPortEnterCritical+0x58>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3301      	adds	r3, #1
 800624c:	4a0d      	ldr	r2, [pc, #52]	@ (8006284 <vPortEnterCritical+0x58>)
 800624e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006250:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <vPortEnterCritical+0x58>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d110      	bne.n	800627a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006258:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <vPortEnterCritical+0x5c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <vPortEnterCritical+0x4e>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	603b      	str	r3, [r7, #0]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <vPortEnterCritical+0x4a>
	}
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	2000000c 	.word	0x2000000c
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <vPortExitCritical+0x26>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	607b      	str	r3, [r7, #4]
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	e7fd      	b.n	80062ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4a08      	ldr	r2, [pc, #32]	@ (80062dc <vPortExitCritical+0x50>)
 80062ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062bc:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <vPortExitCritical+0x50>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d105      	bne.n	80062d0 <vPortExitCritical+0x44>
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062f0:	6010      	str	r0, [r2, #0]
 80062f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80062f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062fa:	f380 8811 	msr	BASEPRI, r0
 80062fe:	f7fe fff1 	bl	80052e4 <vTaskSwitchContext>
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006316:	f380 8809 	msr	PSP, r0
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	4770      	bx	lr

08006320 <pxCurrentTCBConst>:
 8006320:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006342:	f7fe ff15 	bl	8005170 <xTaskIncrementTick>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <xPortSysTickHandler+0x40>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006370:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <vPortSetupTimerInterrupt+0x30>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006376:	4b0a      	ldr	r3, [pc, #40]	@ (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800637c:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <vPortSetupTimerInterrupt+0x38>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a09      	ldr	r2, [pc, #36]	@ (80063a8 <vPortSetupTimerInterrupt+0x3c>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	4a08      	ldr	r2, [pc, #32]	@ (80063ac <vPortSetupTimerInterrupt+0x40>)
 800638a:	3b01      	subs	r3, #1
 800638c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800638e:	4b03      	ldr	r3, [pc, #12]	@ (800639c <vPortSetupTimerInterrupt+0x30>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	e000e010 	.word	0xe000e010
 80063a0:	e000e018 	.word	0xe000e018
 80063a4:	20000000 	.word	0x20000000
 80063a8:	10624dd3 	.word	0x10624dd3
 80063ac:	e000e014 	.word	0xe000e014

080063b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063b6:	f3ef 8305 	mrs	r3, IPSR
 80063ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b0f      	cmp	r3, #15
 80063c0:	d915      	bls.n	80063ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063c2:	4a17      	ldr	r2, [pc, #92]	@ (8006420 <vPortValidateInterruptPriority+0x70>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063cc:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <vPortValidateInterruptPriority+0x74>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	7afa      	ldrb	r2, [r7, #11]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d20b      	bcs.n	80063ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	607b      	str	r3, [r7, #4]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <vPortValidateInterruptPriority+0x78>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <vPortValidateInterruptPriority+0x7c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90b      	bls.n	8006416 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	603b      	str	r3, [r7, #0]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <vPortValidateInterruptPriority+0x62>
	}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr
 8006420:	e000e3f0 	.word	0xe000e3f0
 8006424:	20000ff4 	.word	0x20000ff4
 8006428:	e000ed0c 	.word	0xe000ed0c
 800642c:	20000ff8 	.word	0x20000ff8

08006430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800643c:	f7fe fdde 	bl	8004ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006440:	4b5c      	ldr	r3, [pc, #368]	@ (80065b4 <pvPortMalloc+0x184>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006448:	f000 f924 	bl	8006694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800644c:	4b5a      	ldr	r3, [pc, #360]	@ (80065b8 <pvPortMalloc+0x188>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 8095 	bne.w	8006584 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01e      	beq.n	800649e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006460:	2208      	movs	r2, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b00      	cmp	r3, #0
 8006470:	d015      	beq.n	800649e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f023 0307 	bic.w	r3, r3, #7
 8006478:	3308      	adds	r3, #8
 800647a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <pvPortMalloc+0x6e>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	617b      	str	r3, [r7, #20]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d06f      	beq.n	8006584 <pvPortMalloc+0x154>
 80064a4:	4b45      	ldr	r3, [pc, #276]	@ (80065bc <pvPortMalloc+0x18c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d86a      	bhi.n	8006584 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ae:	4b44      	ldr	r3, [pc, #272]	@ (80065c0 <pvPortMalloc+0x190>)
 80064b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064b2:	4b43      	ldr	r3, [pc, #268]	@ (80065c0 <pvPortMalloc+0x190>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064b8:	e004      	b.n	80064c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d903      	bls.n	80064d6 <pvPortMalloc+0xa6>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f1      	bne.n	80064ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064d6:	4b37      	ldr	r3, [pc, #220]	@ (80065b4 <pvPortMalloc+0x184>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064dc:	429a      	cmp	r2, r3
 80064de:	d051      	beq.n	8006584 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2208      	movs	r2, #8
 80064e6:	4413      	add	r3, r2
 80064e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	2308      	movs	r3, #8
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	429a      	cmp	r2, r3
 8006500:	d920      	bls.n	8006544 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <pvPortMalloc+0xfc>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	613b      	str	r3, [r7, #16]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800653e:	69b8      	ldr	r0, [r7, #24]
 8006540:	f000 f90a 	bl	8006758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006544:	4b1d      	ldr	r3, [pc, #116]	@ (80065bc <pvPortMalloc+0x18c>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	4a1b      	ldr	r2, [pc, #108]	@ (80065bc <pvPortMalloc+0x18c>)
 8006550:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006552:	4b1a      	ldr	r3, [pc, #104]	@ (80065bc <pvPortMalloc+0x18c>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b1b      	ldr	r3, [pc, #108]	@ (80065c4 <pvPortMalloc+0x194>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d203      	bcs.n	8006566 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800655e:	4b17      	ldr	r3, [pc, #92]	@ (80065bc <pvPortMalloc+0x18c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a18      	ldr	r2, [pc, #96]	@ (80065c4 <pvPortMalloc+0x194>)
 8006564:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4b13      	ldr	r3, [pc, #76]	@ (80065b8 <pvPortMalloc+0x188>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	431a      	orrs	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800657a:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <pvPortMalloc+0x198>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	4a11      	ldr	r2, [pc, #68]	@ (80065c8 <pvPortMalloc+0x198>)
 8006582:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006584:	f7fe fd48 	bl	8005018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <pvPortMalloc+0x17a>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60fb      	str	r3, [r7, #12]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <pvPortMalloc+0x176>
	return pvReturn;
 80065aa:	69fb      	ldr	r3, [r7, #28]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3728      	adds	r7, #40	@ 0x28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20001c04 	.word	0x20001c04
 80065b8:	20001c18 	.word	0x20001c18
 80065bc:	20001c08 	.word	0x20001c08
 80065c0:	20001bfc 	.word	0x20001bfc
 80065c4:	20001c0c 	.word	0x20001c0c
 80065c8:	20001c10 	.word	0x20001c10

080065cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d04f      	beq.n	800667e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065de:	2308      	movs	r3, #8
 80065e0:	425b      	negs	r3, r3
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4b25      	ldr	r3, [pc, #148]	@ (8006688 <vPortFree+0xbc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <vPortFree+0x46>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	60fb      	str	r3, [r7, #12]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <vPortFree+0x66>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60bb      	str	r3, [r7, #8]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b14      	ldr	r3, [pc, #80]	@ (8006688 <vPortFree+0xbc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <vPortFree+0xbc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006658:	f7fe fcd0 	bl	8004ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b0a      	ldr	r3, [pc, #40]	@ (800668c <vPortFree+0xc0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4413      	add	r3, r2
 8006666:	4a09      	ldr	r2, [pc, #36]	@ (800668c <vPortFree+0xc0>)
 8006668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 f874 	bl	8006758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <vPortFree+0xc4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a06      	ldr	r2, [pc, #24]	@ (8006690 <vPortFree+0xc4>)
 8006678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800667a:	f7fe fccd 	bl	8005018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20001c18 	.word	0x20001c18
 800668c:	20001c08 	.word	0x20001c08
 8006690:	20001c14 	.word	0x20001c14

08006694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800669a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800669e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066a0:	4b27      	ldr	r3, [pc, #156]	@ (8006740 <prvHeapInit+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <prvHeapInit+0xac>)
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006744 <prvHeapInit+0xb0>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <prvHeapInit+0xb0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066e0:	2208      	movs	r2, #8
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a15      	ldr	r2, [pc, #84]	@ (8006748 <prvHeapInit+0xb4>)
 80066f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <prvHeapInit+0xb4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066fe:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <prvHeapInit+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <prvHeapInit+0xb4>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <prvHeapInit+0xb8>)
 8006722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a09      	ldr	r2, [pc, #36]	@ (8006750 <prvHeapInit+0xbc>)
 800672a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800672c:	4b09      	ldr	r3, [pc, #36]	@ (8006754 <prvHeapInit+0xc0>)
 800672e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000ffc 	.word	0x20000ffc
 8006744:	20001bfc 	.word	0x20001bfc
 8006748:	20001c04 	.word	0x20001c04
 800674c:	20001c0c 	.word	0x20001c0c
 8006750:	20001c08 	.word	0x20001c08
 8006754:	20001c18 	.word	0x20001c18

08006758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006760:	4b27      	ldr	r3, [pc, #156]	@ (8006800 <prvInsertBlockIntoFreeList+0xa8>)
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <prvInsertBlockIntoFreeList+0x14>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d8f7      	bhi.n	8006766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d108      	bne.n	800679a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d118      	bne.n	80067e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b14      	ldr	r3, [pc, #80]	@ (8006804 <prvInsertBlockIntoFreeList+0xac>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d00d      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e008      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <prvInsertBlockIntoFreeList+0xac>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e003      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d002      	beq.n	80067f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	20001bfc 	.word	0x20001bfc
 8006804:	20001c04 	.word	0x20001c04

08006808 <std>:
 8006808:	2300      	movs	r3, #0
 800680a:	b510      	push	{r4, lr}
 800680c:	4604      	mov	r4, r0
 800680e:	e9c0 3300 	strd	r3, r3, [r0]
 8006812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006816:	6083      	str	r3, [r0, #8]
 8006818:	8181      	strh	r1, [r0, #12]
 800681a:	6643      	str	r3, [r0, #100]	@ 0x64
 800681c:	81c2      	strh	r2, [r0, #14]
 800681e:	6183      	str	r3, [r0, #24]
 8006820:	4619      	mov	r1, r3
 8006822:	2208      	movs	r2, #8
 8006824:	305c      	adds	r0, #92	@ 0x5c
 8006826:	f000 f9f9 	bl	8006c1c <memset>
 800682a:	4b0d      	ldr	r3, [pc, #52]	@ (8006860 <std+0x58>)
 800682c:	6224      	str	r4, [r4, #32]
 800682e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006830:	4b0c      	ldr	r3, [pc, #48]	@ (8006864 <std+0x5c>)
 8006832:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <std+0x60>)
 8006836:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006838:	4b0c      	ldr	r3, [pc, #48]	@ (800686c <std+0x64>)
 800683a:	6323      	str	r3, [r4, #48]	@ 0x30
 800683c:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <std+0x68>)
 800683e:	429c      	cmp	r4, r3
 8006840:	d006      	beq.n	8006850 <std+0x48>
 8006842:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006846:	4294      	cmp	r4, r2
 8006848:	d002      	beq.n	8006850 <std+0x48>
 800684a:	33d0      	adds	r3, #208	@ 0xd0
 800684c:	429c      	cmp	r4, r3
 800684e:	d105      	bne.n	800685c <std+0x54>
 8006850:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006858:	f000 bab6 	b.w	8006dc8 <__retarget_lock_init_recursive>
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	08006a6d 	.word	0x08006a6d
 8006864:	08006a8f 	.word	0x08006a8f
 8006868:	08006ac7 	.word	0x08006ac7
 800686c:	08006aeb 	.word	0x08006aeb
 8006870:	20001c1c 	.word	0x20001c1c

08006874 <stdio_exit_handler>:
 8006874:	4a02      	ldr	r2, [pc, #8]	@ (8006880 <stdio_exit_handler+0xc>)
 8006876:	4903      	ldr	r1, [pc, #12]	@ (8006884 <stdio_exit_handler+0x10>)
 8006878:	4803      	ldr	r0, [pc, #12]	@ (8006888 <stdio_exit_handler+0x14>)
 800687a:	f000 b869 	b.w	8006950 <_fwalk_sglue>
 800687e:	bf00      	nop
 8006880:	20000010 	.word	0x20000010
 8006884:	08007679 	.word	0x08007679
 8006888:	20000020 	.word	0x20000020

0800688c <cleanup_stdio>:
 800688c:	6841      	ldr	r1, [r0, #4]
 800688e:	4b0c      	ldr	r3, [pc, #48]	@ (80068c0 <cleanup_stdio+0x34>)
 8006890:	b510      	push	{r4, lr}
 8006892:	4299      	cmp	r1, r3
 8006894:	4604      	mov	r4, r0
 8006896:	d001      	beq.n	800689c <cleanup_stdio+0x10>
 8006898:	f000 feee 	bl	8007678 <_fflush_r>
 800689c:	68a1      	ldr	r1, [r4, #8]
 800689e:	4b09      	ldr	r3, [pc, #36]	@ (80068c4 <cleanup_stdio+0x38>)
 80068a0:	4299      	cmp	r1, r3
 80068a2:	d002      	beq.n	80068aa <cleanup_stdio+0x1e>
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 fee7 	bl	8007678 <_fflush_r>
 80068aa:	68e1      	ldr	r1, [r4, #12]
 80068ac:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <cleanup_stdio+0x3c>)
 80068ae:	4299      	cmp	r1, r3
 80068b0:	d004      	beq.n	80068bc <cleanup_stdio+0x30>
 80068b2:	4620      	mov	r0, r4
 80068b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b8:	f000 bede 	b.w	8007678 <_fflush_r>
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	bf00      	nop
 80068c0:	20001c1c 	.word	0x20001c1c
 80068c4:	20001c84 	.word	0x20001c84
 80068c8:	20001cec 	.word	0x20001cec

080068cc <global_stdio_init.part.0>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <global_stdio_init.part.0+0x30>)
 80068d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006900 <global_stdio_init.part.0+0x34>)
 80068d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006904 <global_stdio_init.part.0+0x38>)
 80068d4:	4620      	mov	r0, r4
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	2104      	movs	r1, #4
 80068da:	2200      	movs	r2, #0
 80068dc:	f7ff ff94 	bl	8006808 <std>
 80068e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068e4:	2201      	movs	r2, #1
 80068e6:	2109      	movs	r1, #9
 80068e8:	f7ff ff8e 	bl	8006808 <std>
 80068ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068f0:	2202      	movs	r2, #2
 80068f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f6:	2112      	movs	r1, #18
 80068f8:	f7ff bf86 	b.w	8006808 <std>
 80068fc:	20001d54 	.word	0x20001d54
 8006900:	20001c1c 	.word	0x20001c1c
 8006904:	08006875 	.word	0x08006875

08006908 <__sfp_lock_acquire>:
 8006908:	4801      	ldr	r0, [pc, #4]	@ (8006910 <__sfp_lock_acquire+0x8>)
 800690a:	f000 ba5e 	b.w	8006dca <__retarget_lock_acquire_recursive>
 800690e:	bf00      	nop
 8006910:	20001d5d 	.word	0x20001d5d

08006914 <__sfp_lock_release>:
 8006914:	4801      	ldr	r0, [pc, #4]	@ (800691c <__sfp_lock_release+0x8>)
 8006916:	f000 ba59 	b.w	8006dcc <__retarget_lock_release_recursive>
 800691a:	bf00      	nop
 800691c:	20001d5d 	.word	0x20001d5d

08006920 <__sinit>:
 8006920:	b510      	push	{r4, lr}
 8006922:	4604      	mov	r4, r0
 8006924:	f7ff fff0 	bl	8006908 <__sfp_lock_acquire>
 8006928:	6a23      	ldr	r3, [r4, #32]
 800692a:	b11b      	cbz	r3, 8006934 <__sinit+0x14>
 800692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006930:	f7ff bff0 	b.w	8006914 <__sfp_lock_release>
 8006934:	4b04      	ldr	r3, [pc, #16]	@ (8006948 <__sinit+0x28>)
 8006936:	6223      	str	r3, [r4, #32]
 8006938:	4b04      	ldr	r3, [pc, #16]	@ (800694c <__sinit+0x2c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f5      	bne.n	800692c <__sinit+0xc>
 8006940:	f7ff ffc4 	bl	80068cc <global_stdio_init.part.0>
 8006944:	e7f2      	b.n	800692c <__sinit+0xc>
 8006946:	bf00      	nop
 8006948:	0800688d 	.word	0x0800688d
 800694c:	20001d54 	.word	0x20001d54

08006950 <_fwalk_sglue>:
 8006950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006954:	4607      	mov	r7, r0
 8006956:	4688      	mov	r8, r1
 8006958:	4614      	mov	r4, r2
 800695a:	2600      	movs	r6, #0
 800695c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006960:	f1b9 0901 	subs.w	r9, r9, #1
 8006964:	d505      	bpl.n	8006972 <_fwalk_sglue+0x22>
 8006966:	6824      	ldr	r4, [r4, #0]
 8006968:	2c00      	cmp	r4, #0
 800696a:	d1f7      	bne.n	800695c <_fwalk_sglue+0xc>
 800696c:	4630      	mov	r0, r6
 800696e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006972:	89ab      	ldrh	r3, [r5, #12]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d907      	bls.n	8006988 <_fwalk_sglue+0x38>
 8006978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800697c:	3301      	adds	r3, #1
 800697e:	d003      	beq.n	8006988 <_fwalk_sglue+0x38>
 8006980:	4629      	mov	r1, r5
 8006982:	4638      	mov	r0, r7
 8006984:	47c0      	blx	r8
 8006986:	4306      	orrs	r6, r0
 8006988:	3568      	adds	r5, #104	@ 0x68
 800698a:	e7e9      	b.n	8006960 <_fwalk_sglue+0x10>

0800698c <iprintf>:
 800698c:	b40f      	push	{r0, r1, r2, r3}
 800698e:	b507      	push	{r0, r1, r2, lr}
 8006990:	4906      	ldr	r1, [pc, #24]	@ (80069ac <iprintf+0x20>)
 8006992:	ab04      	add	r3, sp, #16
 8006994:	6808      	ldr	r0, [r1, #0]
 8006996:	f853 2b04 	ldr.w	r2, [r3], #4
 800699a:	6881      	ldr	r1, [r0, #8]
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	f000 fb43 	bl	8007028 <_vfiprintf_r>
 80069a2:	b003      	add	sp, #12
 80069a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a8:	b004      	add	sp, #16
 80069aa:	4770      	bx	lr
 80069ac:	2000001c 	.word	0x2000001c

080069b0 <_puts_r>:
 80069b0:	6a03      	ldr	r3, [r0, #32]
 80069b2:	b570      	push	{r4, r5, r6, lr}
 80069b4:	4605      	mov	r5, r0
 80069b6:	460e      	mov	r6, r1
 80069b8:	6884      	ldr	r4, [r0, #8]
 80069ba:	b90b      	cbnz	r3, 80069c0 <_puts_r+0x10>
 80069bc:	f7ff ffb0 	bl	8006920 <__sinit>
 80069c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d405      	bmi.n	80069d2 <_puts_r+0x22>
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	0598      	lsls	r0, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_puts_r+0x22>
 80069cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ce:	f000 f9fc 	bl	8006dca <__retarget_lock_acquire_recursive>
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	0719      	lsls	r1, r3, #28
 80069d6:	d502      	bpl.n	80069de <_puts_r+0x2e>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d135      	bne.n	8006a4a <_puts_r+0x9a>
 80069de:	4621      	mov	r1, r4
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 f8c5 	bl	8006b70 <__swsetup_r>
 80069e6:	b380      	cbz	r0, 8006a4a <_puts_r+0x9a>
 80069e8:	f04f 35ff 	mov.w	r5, #4294967295
 80069ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069ee:	07da      	lsls	r2, r3, #31
 80069f0:	d405      	bmi.n	80069fe <_puts_r+0x4e>
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	059b      	lsls	r3, r3, #22
 80069f6:	d402      	bmi.n	80069fe <_puts_r+0x4e>
 80069f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069fa:	f000 f9e7 	bl	8006dcc <__retarget_lock_release_recursive>
 80069fe:	4628      	mov	r0, r5
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da04      	bge.n	8006a10 <_puts_r+0x60>
 8006a06:	69a2      	ldr	r2, [r4, #24]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	dc17      	bgt.n	8006a3c <_puts_r+0x8c>
 8006a0c:	290a      	cmp	r1, #10
 8006a0e:	d015      	beq.n	8006a3c <_puts_r+0x8c>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	6022      	str	r2, [r4, #0]
 8006a16:	7019      	strb	r1, [r3, #0]
 8006a18:	68a3      	ldr	r3, [r4, #8]
 8006a1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	60a3      	str	r3, [r4, #8]
 8006a22:	2900      	cmp	r1, #0
 8006a24:	d1ed      	bne.n	8006a02 <_puts_r+0x52>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da11      	bge.n	8006a4e <_puts_r+0x9e>
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	210a      	movs	r1, #10
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 f85f 	bl	8006af2 <__swbuf_r>
 8006a34:	3001      	adds	r0, #1
 8006a36:	d0d7      	beq.n	80069e8 <_puts_r+0x38>
 8006a38:	250a      	movs	r5, #10
 8006a3a:	e7d7      	b.n	80069ec <_puts_r+0x3c>
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f857 	bl	8006af2 <__swbuf_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d1e7      	bne.n	8006a18 <_puts_r+0x68>
 8006a48:	e7ce      	b.n	80069e8 <_puts_r+0x38>
 8006a4a:	3e01      	subs	r6, #1
 8006a4c:	e7e4      	b.n	8006a18 <_puts_r+0x68>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	6022      	str	r2, [r4, #0]
 8006a54:	220a      	movs	r2, #10
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e7ee      	b.n	8006a38 <_puts_r+0x88>
	...

08006a5c <puts>:
 8006a5c:	4b02      	ldr	r3, [pc, #8]	@ (8006a68 <puts+0xc>)
 8006a5e:	4601      	mov	r1, r0
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	f7ff bfa5 	b.w	80069b0 <_puts_r>
 8006a66:	bf00      	nop
 8006a68:	2000001c 	.word	0x2000001c

08006a6c <__sread>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	460c      	mov	r4, r1
 8006a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a74:	f000 f95a 	bl	8006d2c <_read_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	bfab      	itete	ge
 8006a7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a80:	181b      	addge	r3, r3, r0
 8006a82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a86:	bfac      	ite	ge
 8006a88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a8a:	81a3      	strhlt	r3, [r4, #12]
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <__swrite>:
 8006a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a92:	461f      	mov	r7, r3
 8006a94:	898b      	ldrh	r3, [r1, #12]
 8006a96:	4605      	mov	r5, r0
 8006a98:	05db      	lsls	r3, r3, #23
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	d505      	bpl.n	8006aac <__swrite+0x1e>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa8:	f000 f92e 	bl	8006d08 <_lseek_r>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	4632      	mov	r2, r6
 8006ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	463b      	mov	r3, r7
 8006aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac2:	f000 b945 	b.w	8006d50 <_write_r>

08006ac6 <__sseek>:
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	460c      	mov	r4, r1
 8006aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ace:	f000 f91b 	bl	8006d08 <_lseek_r>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	bf15      	itete	ne
 8006ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ae2:	81a3      	strheq	r3, [r4, #12]
 8006ae4:	bf18      	it	ne
 8006ae6:	81a3      	strhne	r3, [r4, #12]
 8006ae8:	bd10      	pop	{r4, pc}

08006aea <__sclose>:
 8006aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aee:	f000 b89d 	b.w	8006c2c <_close_r>

08006af2 <__swbuf_r>:
 8006af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af4:	460e      	mov	r6, r1
 8006af6:	4614      	mov	r4, r2
 8006af8:	4605      	mov	r5, r0
 8006afa:	b118      	cbz	r0, 8006b04 <__swbuf_r+0x12>
 8006afc:	6a03      	ldr	r3, [r0, #32]
 8006afe:	b90b      	cbnz	r3, 8006b04 <__swbuf_r+0x12>
 8006b00:	f7ff ff0e 	bl	8006920 <__sinit>
 8006b04:	69a3      	ldr	r3, [r4, #24]
 8006b06:	60a3      	str	r3, [r4, #8]
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	071a      	lsls	r2, r3, #28
 8006b0c:	d501      	bpl.n	8006b12 <__swbuf_r+0x20>
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	b943      	cbnz	r3, 8006b24 <__swbuf_r+0x32>
 8006b12:	4621      	mov	r1, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 f82b 	bl	8006b70 <__swsetup_r>
 8006b1a:	b118      	cbz	r0, 8006b24 <__swbuf_r+0x32>
 8006b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b20:	4638      	mov	r0, r7
 8006b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	6922      	ldr	r2, [r4, #16]
 8006b28:	b2f6      	uxtb	r6, r6
 8006b2a:	1a98      	subs	r0, r3, r2
 8006b2c:	6963      	ldr	r3, [r4, #20]
 8006b2e:	4637      	mov	r7, r6
 8006b30:	4283      	cmp	r3, r0
 8006b32:	dc05      	bgt.n	8006b40 <__swbuf_r+0x4e>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 fd9e 	bl	8007678 <_fflush_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d1ed      	bne.n	8006b1c <__swbuf_r+0x2a>
 8006b40:	68a3      	ldr	r3, [r4, #8]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	60a3      	str	r3, [r4, #8]
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	701e      	strb	r6, [r3, #0]
 8006b4e:	6962      	ldr	r2, [r4, #20]
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d004      	beq.n	8006b60 <__swbuf_r+0x6e>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	07db      	lsls	r3, r3, #31
 8006b5a:	d5e1      	bpl.n	8006b20 <__swbuf_r+0x2e>
 8006b5c:	2e0a      	cmp	r6, #10
 8006b5e:	d1df      	bne.n	8006b20 <__swbuf_r+0x2e>
 8006b60:	4621      	mov	r1, r4
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 fd88 	bl	8007678 <_fflush_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d0d9      	beq.n	8006b20 <__swbuf_r+0x2e>
 8006b6c:	e7d6      	b.n	8006b1c <__swbuf_r+0x2a>
	...

08006b70 <__swsetup_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4b29      	ldr	r3, [pc, #164]	@ (8006c18 <__swsetup_r+0xa8>)
 8006b74:	4605      	mov	r5, r0
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	460c      	mov	r4, r1
 8006b7a:	b118      	cbz	r0, 8006b84 <__swsetup_r+0x14>
 8006b7c:	6a03      	ldr	r3, [r0, #32]
 8006b7e:	b90b      	cbnz	r3, 8006b84 <__swsetup_r+0x14>
 8006b80:	f7ff fece 	bl	8006920 <__sinit>
 8006b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b88:	0719      	lsls	r1, r3, #28
 8006b8a:	d422      	bmi.n	8006bd2 <__swsetup_r+0x62>
 8006b8c:	06da      	lsls	r2, r3, #27
 8006b8e:	d407      	bmi.n	8006ba0 <__swsetup_r+0x30>
 8006b90:	2209      	movs	r2, #9
 8006b92:	602a      	str	r2, [r5, #0]
 8006b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	e033      	b.n	8006c08 <__swsetup_r+0x98>
 8006ba0:	0758      	lsls	r0, r3, #29
 8006ba2:	d512      	bpl.n	8006bca <__swsetup_r+0x5a>
 8006ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ba6:	b141      	cbz	r1, 8006bba <__swsetup_r+0x4a>
 8006ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d002      	beq.n	8006bb6 <__swsetup_r+0x46>
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f000 f91b 	bl	8006dec <_free_r>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6063      	str	r3, [r4, #4]
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	f043 0308 	orr.w	r3, r3, #8
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	b94b      	cbnz	r3, 8006bea <__swsetup_r+0x7a>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be0:	d003      	beq.n	8006bea <__swsetup_r+0x7a>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 fd94 	bl	8007712 <__smakebuf_r>
 8006bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bee:	f013 0201 	ands.w	r2, r3, #1
 8006bf2:	d00a      	beq.n	8006c0a <__swsetup_r+0x9a>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	60a2      	str	r2, [r4, #8]
 8006bf8:	6962      	ldr	r2, [r4, #20]
 8006bfa:	4252      	negs	r2, r2
 8006bfc:	61a2      	str	r2, [r4, #24]
 8006bfe:	6922      	ldr	r2, [r4, #16]
 8006c00:	b942      	cbnz	r2, 8006c14 <__swsetup_r+0xa4>
 8006c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c06:	d1c5      	bne.n	8006b94 <__swsetup_r+0x24>
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
 8006c0a:	0799      	lsls	r1, r3, #30
 8006c0c:	bf58      	it	pl
 8006c0e:	6962      	ldrpl	r2, [r4, #20]
 8006c10:	60a2      	str	r2, [r4, #8]
 8006c12:	e7f4      	b.n	8006bfe <__swsetup_r+0x8e>
 8006c14:	2000      	movs	r0, #0
 8006c16:	e7f7      	b.n	8006c08 <__swsetup_r+0x98>
 8006c18:	2000001c 	.word	0x2000001c

08006c1c <memset>:
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4402      	add	r2, r0
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d100      	bne.n	8006c26 <memset+0xa>
 8006c24:	4770      	bx	lr
 8006c26:	f803 1b01 	strb.w	r1, [r3], #1
 8006c2a:	e7f9      	b.n	8006c20 <memset+0x4>

08006c2c <_close_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4d05      	ldr	r5, [pc, #20]	@ (8006c48 <_close_r+0x1c>)
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7f9 ff7f 	bl	8000b3a <_close>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_close_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_close_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	20001d58 	.word	0x20001d58

08006c4c <_reclaim_reent>:
 8006c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d04 <_reclaim_reent+0xb8>)
 8006c4e:	b570      	push	{r4, r5, r6, lr}
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4604      	mov	r4, r0
 8006c54:	4283      	cmp	r3, r0
 8006c56:	d053      	beq.n	8006d00 <_reclaim_reent+0xb4>
 8006c58:	69c3      	ldr	r3, [r0, #28]
 8006c5a:	b31b      	cbz	r3, 8006ca4 <_reclaim_reent+0x58>
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	b163      	cbz	r3, 8006c7a <_reclaim_reent+0x2e>
 8006c60:	2500      	movs	r5, #0
 8006c62:	69e3      	ldr	r3, [r4, #28]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	5959      	ldr	r1, [r3, r5]
 8006c68:	b9b1      	cbnz	r1, 8006c98 <_reclaim_reent+0x4c>
 8006c6a:	3504      	adds	r5, #4
 8006c6c:	2d80      	cmp	r5, #128	@ 0x80
 8006c6e:	d1f8      	bne.n	8006c62 <_reclaim_reent+0x16>
 8006c70:	69e3      	ldr	r3, [r4, #28]
 8006c72:	4620      	mov	r0, r4
 8006c74:	68d9      	ldr	r1, [r3, #12]
 8006c76:	f000 f8b9 	bl	8006dec <_free_r>
 8006c7a:	69e3      	ldr	r3, [r4, #28]
 8006c7c:	6819      	ldr	r1, [r3, #0]
 8006c7e:	b111      	cbz	r1, 8006c86 <_reclaim_reent+0x3a>
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 f8b3 	bl	8006dec <_free_r>
 8006c86:	69e3      	ldr	r3, [r4, #28]
 8006c88:	689d      	ldr	r5, [r3, #8]
 8006c8a:	b15d      	cbz	r5, 8006ca4 <_reclaim_reent+0x58>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	682d      	ldr	r5, [r5, #0]
 8006c92:	f000 f8ab 	bl	8006dec <_free_r>
 8006c96:	e7f8      	b.n	8006c8a <_reclaim_reent+0x3e>
 8006c98:	680e      	ldr	r6, [r1, #0]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f8a6 	bl	8006dec <_free_r>
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	e7e1      	b.n	8006c68 <_reclaim_reent+0x1c>
 8006ca4:	6961      	ldr	r1, [r4, #20]
 8006ca6:	b111      	cbz	r1, 8006cae <_reclaim_reent+0x62>
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 f89f 	bl	8006dec <_free_r>
 8006cae:	69e1      	ldr	r1, [r4, #28]
 8006cb0:	b111      	cbz	r1, 8006cb8 <_reclaim_reent+0x6c>
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 f89a 	bl	8006dec <_free_r>
 8006cb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006cba:	b111      	cbz	r1, 8006cc2 <_reclaim_reent+0x76>
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 f895 	bl	8006dec <_free_r>
 8006cc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cc4:	b111      	cbz	r1, 8006ccc <_reclaim_reent+0x80>
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f890 	bl	8006dec <_free_r>
 8006ccc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cce:	b111      	cbz	r1, 8006cd6 <_reclaim_reent+0x8a>
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 f88b 	bl	8006dec <_free_r>
 8006cd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006cd8:	b111      	cbz	r1, 8006ce0 <_reclaim_reent+0x94>
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f886 	bl	8006dec <_free_r>
 8006ce0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006ce2:	b111      	cbz	r1, 8006cea <_reclaim_reent+0x9e>
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 f881 	bl	8006dec <_free_r>
 8006cea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006cec:	b111      	cbz	r1, 8006cf4 <_reclaim_reent+0xa8>
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f87c 	bl	8006dec <_free_r>
 8006cf4:	6a23      	ldr	r3, [r4, #32]
 8006cf6:	b11b      	cbz	r3, 8006d00 <_reclaim_reent+0xb4>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cfe:	4718      	bx	r3
 8006d00:	bd70      	pop	{r4, r5, r6, pc}
 8006d02:	bf00      	nop
 8006d04:	2000001c 	.word	0x2000001c

08006d08 <_lseek_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	4611      	mov	r1, r2
 8006d10:	2200      	movs	r2, #0
 8006d12:	4d05      	ldr	r5, [pc, #20]	@ (8006d28 <_lseek_r+0x20>)
 8006d14:	602a      	str	r2, [r5, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f7f9 ff33 	bl	8000b82 <_lseek>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_lseek_r+0x1e>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_lseek_r+0x1e>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20001d58 	.word	0x20001d58

08006d2c <_read_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	2200      	movs	r2, #0
 8006d36:	4d05      	ldr	r5, [pc, #20]	@ (8006d4c <_read_r+0x20>)
 8006d38:	602a      	str	r2, [r5, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f7f9 fee0 	bl	8000b00 <_read>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_read_r+0x1e>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_read_r+0x1e>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	20001d58 	.word	0x20001d58

08006d50 <_write_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4d05      	ldr	r5, [pc, #20]	@ (8006d70 <_write_r+0x20>)
 8006d5c:	602a      	str	r2, [r5, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f7f9 fae0 	bl	8000324 <_write>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_write_r+0x1e>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_write_r+0x1e>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20001d58 	.word	0x20001d58

08006d74 <__errno>:
 8006d74:	4b01      	ldr	r3, [pc, #4]	@ (8006d7c <__errno+0x8>)
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	2000001c 	.word	0x2000001c

08006d80 <__libc_init_array>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	2600      	movs	r6, #0
 8006d84:	4d0c      	ldr	r5, [pc, #48]	@ (8006db8 <__libc_init_array+0x38>)
 8006d86:	4c0d      	ldr	r4, [pc, #52]	@ (8006dbc <__libc_init_array+0x3c>)
 8006d88:	1b64      	subs	r4, r4, r5
 8006d8a:	10a4      	asrs	r4, r4, #2
 8006d8c:	42a6      	cmp	r6, r4
 8006d8e:	d109      	bne.n	8006da4 <__libc_init_array+0x24>
 8006d90:	f000 fd3c 	bl	800780c <_init>
 8006d94:	2600      	movs	r6, #0
 8006d96:	4d0a      	ldr	r5, [pc, #40]	@ (8006dc0 <__libc_init_array+0x40>)
 8006d98:	4c0a      	ldr	r4, [pc, #40]	@ (8006dc4 <__libc_init_array+0x44>)
 8006d9a:	1b64      	subs	r4, r4, r5
 8006d9c:	10a4      	asrs	r4, r4, #2
 8006d9e:	42a6      	cmp	r6, r4
 8006da0:	d105      	bne.n	8006dae <__libc_init_array+0x2e>
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da8:	4798      	blx	r3
 8006daa:	3601      	adds	r6, #1
 8006dac:	e7ee      	b.n	8006d8c <__libc_init_array+0xc>
 8006dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db2:	4798      	blx	r3
 8006db4:	3601      	adds	r6, #1
 8006db6:	e7f2      	b.n	8006d9e <__libc_init_array+0x1e>
 8006db8:	0800798c 	.word	0x0800798c
 8006dbc:	0800798c 	.word	0x0800798c
 8006dc0:	0800798c 	.word	0x0800798c
 8006dc4:	08007990 	.word	0x08007990

08006dc8 <__retarget_lock_init_recursive>:
 8006dc8:	4770      	bx	lr

08006dca <__retarget_lock_acquire_recursive>:
 8006dca:	4770      	bx	lr

08006dcc <__retarget_lock_release_recursive>:
 8006dcc:	4770      	bx	lr

08006dce <memcpy>:
 8006dce:	440a      	add	r2, r1
 8006dd0:	4291      	cmp	r1, r2
 8006dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dd6:	d100      	bne.n	8006dda <memcpy+0xc>
 8006dd8:	4770      	bx	lr
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de0:	4291      	cmp	r1, r2
 8006de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de6:	d1f9      	bne.n	8006ddc <memcpy+0xe>
 8006de8:	bd10      	pop	{r4, pc}
	...

08006dec <_free_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4605      	mov	r5, r0
 8006df0:	2900      	cmp	r1, #0
 8006df2:	d040      	beq.n	8006e76 <_free_r+0x8a>
 8006df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df8:	1f0c      	subs	r4, r1, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bfb8      	it	lt
 8006dfe:	18e4      	addlt	r4, r4, r3
 8006e00:	f000 f8de 	bl	8006fc0 <__malloc_lock>
 8006e04:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <_free_r+0x8c>)
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	b933      	cbnz	r3, 8006e18 <_free_r+0x2c>
 8006e0a:	6063      	str	r3, [r4, #4]
 8006e0c:	6014      	str	r4, [r2, #0]
 8006e0e:	4628      	mov	r0, r5
 8006e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e14:	f000 b8da 	b.w	8006fcc <__malloc_unlock>
 8006e18:	42a3      	cmp	r3, r4
 8006e1a:	d908      	bls.n	8006e2e <_free_r+0x42>
 8006e1c:	6820      	ldr	r0, [r4, #0]
 8006e1e:	1821      	adds	r1, r4, r0
 8006e20:	428b      	cmp	r3, r1
 8006e22:	bf01      	itttt	eq
 8006e24:	6819      	ldreq	r1, [r3, #0]
 8006e26:	685b      	ldreq	r3, [r3, #4]
 8006e28:	1809      	addeq	r1, r1, r0
 8006e2a:	6021      	streq	r1, [r4, #0]
 8006e2c:	e7ed      	b.n	8006e0a <_free_r+0x1e>
 8006e2e:	461a      	mov	r2, r3
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	b10b      	cbz	r3, 8006e38 <_free_r+0x4c>
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	d9fa      	bls.n	8006e2e <_free_r+0x42>
 8006e38:	6811      	ldr	r1, [r2, #0]
 8006e3a:	1850      	adds	r0, r2, r1
 8006e3c:	42a0      	cmp	r0, r4
 8006e3e:	d10b      	bne.n	8006e58 <_free_r+0x6c>
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	4401      	add	r1, r0
 8006e44:	1850      	adds	r0, r2, r1
 8006e46:	4283      	cmp	r3, r0
 8006e48:	6011      	str	r1, [r2, #0]
 8006e4a:	d1e0      	bne.n	8006e0e <_free_r+0x22>
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	4408      	add	r0, r1
 8006e52:	6010      	str	r0, [r2, #0]
 8006e54:	6053      	str	r3, [r2, #4]
 8006e56:	e7da      	b.n	8006e0e <_free_r+0x22>
 8006e58:	d902      	bls.n	8006e60 <_free_r+0x74>
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	602b      	str	r3, [r5, #0]
 8006e5e:	e7d6      	b.n	8006e0e <_free_r+0x22>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	1821      	adds	r1, r4, r0
 8006e64:	428b      	cmp	r3, r1
 8006e66:	bf01      	itttt	eq
 8006e68:	6819      	ldreq	r1, [r3, #0]
 8006e6a:	685b      	ldreq	r3, [r3, #4]
 8006e6c:	1809      	addeq	r1, r1, r0
 8006e6e:	6021      	streq	r1, [r4, #0]
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	6054      	str	r4, [r2, #4]
 8006e74:	e7cb      	b.n	8006e0e <_free_r+0x22>
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	20001d64 	.word	0x20001d64

08006e7c <sbrk_aligned>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8006ebc <sbrk_aligned+0x40>)
 8006e80:	460c      	mov	r4, r1
 8006e82:	6831      	ldr	r1, [r6, #0]
 8006e84:	4605      	mov	r5, r0
 8006e86:	b911      	cbnz	r1, 8006e8e <sbrk_aligned+0x12>
 8006e88:	f000 fca2 	bl	80077d0 <_sbrk_r>
 8006e8c:	6030      	str	r0, [r6, #0]
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 fc9d 	bl	80077d0 <_sbrk_r>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	d103      	bne.n	8006ea2 <sbrk_aligned+0x26>
 8006e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
 8006ea2:	1cc4      	adds	r4, r0, #3
 8006ea4:	f024 0403 	bic.w	r4, r4, #3
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d0f8      	beq.n	8006e9e <sbrk_aligned+0x22>
 8006eac:	1a21      	subs	r1, r4, r0
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 fc8e 	bl	80077d0 <_sbrk_r>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d1f2      	bne.n	8006e9e <sbrk_aligned+0x22>
 8006eb8:	e7ef      	b.n	8006e9a <sbrk_aligned+0x1e>
 8006eba:	bf00      	nop
 8006ebc:	20001d60 	.word	0x20001d60

08006ec0 <_malloc_r>:
 8006ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	1ccd      	adds	r5, r1, #3
 8006ec6:	f025 0503 	bic.w	r5, r5, #3
 8006eca:	3508      	adds	r5, #8
 8006ecc:	2d0c      	cmp	r5, #12
 8006ece:	bf38      	it	cc
 8006ed0:	250c      	movcc	r5, #12
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	db01      	blt.n	8006edc <_malloc_r+0x1c>
 8006ed8:	42a9      	cmp	r1, r5
 8006eda:	d904      	bls.n	8006ee6 <_malloc_r+0x26>
 8006edc:	230c      	movs	r3, #12
 8006ede:	6033      	str	r3, [r6, #0]
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fbc <_malloc_r+0xfc>
 8006eea:	f000 f869 	bl	8006fc0 <__malloc_lock>
 8006eee:	f8d8 3000 	ldr.w	r3, [r8]
 8006ef2:	461c      	mov	r4, r3
 8006ef4:	bb44      	cbnz	r4, 8006f48 <_malloc_r+0x88>
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7ff ffbf 	bl	8006e7c <sbrk_aligned>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	4604      	mov	r4, r0
 8006f02:	d158      	bne.n	8006fb6 <_malloc_r+0xf6>
 8006f04:	f8d8 4000 	ldr.w	r4, [r8]
 8006f08:	4627      	mov	r7, r4
 8006f0a:	2f00      	cmp	r7, #0
 8006f0c:	d143      	bne.n	8006f96 <_malloc_r+0xd6>
 8006f0e:	2c00      	cmp	r4, #0
 8006f10:	d04b      	beq.n	8006faa <_malloc_r+0xea>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	4639      	mov	r1, r7
 8006f16:	4630      	mov	r0, r6
 8006f18:	eb04 0903 	add.w	r9, r4, r3
 8006f1c:	f000 fc58 	bl	80077d0 <_sbrk_r>
 8006f20:	4581      	cmp	r9, r0
 8006f22:	d142      	bne.n	8006faa <_malloc_r+0xea>
 8006f24:	6821      	ldr	r1, [r4, #0]
 8006f26:	4630      	mov	r0, r6
 8006f28:	1a6d      	subs	r5, r5, r1
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7ff ffa6 	bl	8006e7c <sbrk_aligned>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d03a      	beq.n	8006faa <_malloc_r+0xea>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	442b      	add	r3, r5
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	bb62      	cbnz	r2, 8006f9c <_malloc_r+0xdc>
 8006f42:	f8c8 7000 	str.w	r7, [r8]
 8006f46:	e00f      	b.n	8006f68 <_malloc_r+0xa8>
 8006f48:	6822      	ldr	r2, [r4, #0]
 8006f4a:	1b52      	subs	r2, r2, r5
 8006f4c:	d420      	bmi.n	8006f90 <_malloc_r+0xd0>
 8006f4e:	2a0b      	cmp	r2, #11
 8006f50:	d917      	bls.n	8006f82 <_malloc_r+0xc2>
 8006f52:	1961      	adds	r1, r4, r5
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	6025      	str	r5, [r4, #0]
 8006f58:	bf18      	it	ne
 8006f5a:	6059      	strne	r1, [r3, #4]
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	bf08      	it	eq
 8006f60:	f8c8 1000 	streq.w	r1, [r8]
 8006f64:	5162      	str	r2, [r4, r5]
 8006f66:	604b      	str	r3, [r1, #4]
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f000 f82f 	bl	8006fcc <__malloc_unlock>
 8006f6e:	f104 000b 	add.w	r0, r4, #11
 8006f72:	1d23      	adds	r3, r4, #4
 8006f74:	f020 0007 	bic.w	r0, r0, #7
 8006f78:	1ac2      	subs	r2, r0, r3
 8006f7a:	bf1c      	itt	ne
 8006f7c:	1a1b      	subne	r3, r3, r0
 8006f7e:	50a3      	strne	r3, [r4, r2]
 8006f80:	e7af      	b.n	8006ee2 <_malloc_r+0x22>
 8006f82:	6862      	ldr	r2, [r4, #4]
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	bf0c      	ite	eq
 8006f88:	f8c8 2000 	streq.w	r2, [r8]
 8006f8c:	605a      	strne	r2, [r3, #4]
 8006f8e:	e7eb      	b.n	8006f68 <_malloc_r+0xa8>
 8006f90:	4623      	mov	r3, r4
 8006f92:	6864      	ldr	r4, [r4, #4]
 8006f94:	e7ae      	b.n	8006ef4 <_malloc_r+0x34>
 8006f96:	463c      	mov	r4, r7
 8006f98:	687f      	ldr	r7, [r7, #4]
 8006f9a:	e7b6      	b.n	8006f0a <_malloc_r+0x4a>
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d1fb      	bne.n	8006f9c <_malloc_r+0xdc>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6053      	str	r3, [r2, #4]
 8006fa8:	e7de      	b.n	8006f68 <_malloc_r+0xa8>
 8006faa:	230c      	movs	r3, #12
 8006fac:	4630      	mov	r0, r6
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	f000 f80c 	bl	8006fcc <__malloc_unlock>
 8006fb4:	e794      	b.n	8006ee0 <_malloc_r+0x20>
 8006fb6:	6005      	str	r5, [r0, #0]
 8006fb8:	e7d6      	b.n	8006f68 <_malloc_r+0xa8>
 8006fba:	bf00      	nop
 8006fbc:	20001d64 	.word	0x20001d64

08006fc0 <__malloc_lock>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	@ (8006fc8 <__malloc_lock+0x8>)
 8006fc2:	f7ff bf02 	b.w	8006dca <__retarget_lock_acquire_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	20001d5c 	.word	0x20001d5c

08006fcc <__malloc_unlock>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	@ (8006fd4 <__malloc_unlock+0x8>)
 8006fce:	f7ff befd 	b.w	8006dcc <__retarget_lock_release_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	20001d5c 	.word	0x20001d5c

08006fd8 <__sfputc_r>:
 8006fd8:	6893      	ldr	r3, [r2, #8]
 8006fda:	b410      	push	{r4}
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	6093      	str	r3, [r2, #8]
 8006fe2:	da07      	bge.n	8006ff4 <__sfputc_r+0x1c>
 8006fe4:	6994      	ldr	r4, [r2, #24]
 8006fe6:	42a3      	cmp	r3, r4
 8006fe8:	db01      	blt.n	8006fee <__sfputc_r+0x16>
 8006fea:	290a      	cmp	r1, #10
 8006fec:	d102      	bne.n	8006ff4 <__sfputc_r+0x1c>
 8006fee:	bc10      	pop	{r4}
 8006ff0:	f7ff bd7f 	b.w	8006af2 <__swbuf_r>
 8006ff4:	6813      	ldr	r3, [r2, #0]
 8006ff6:	1c58      	adds	r0, r3, #1
 8006ff8:	6010      	str	r0, [r2, #0]
 8006ffa:	7019      	strb	r1, [r3, #0]
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	bc10      	pop	{r4}
 8007000:	4770      	bx	lr

08007002 <__sfputs_r>:
 8007002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007004:	4606      	mov	r6, r0
 8007006:	460f      	mov	r7, r1
 8007008:	4614      	mov	r4, r2
 800700a:	18d5      	adds	r5, r2, r3
 800700c:	42ac      	cmp	r4, r5
 800700e:	d101      	bne.n	8007014 <__sfputs_r+0x12>
 8007010:	2000      	movs	r0, #0
 8007012:	e007      	b.n	8007024 <__sfputs_r+0x22>
 8007014:	463a      	mov	r2, r7
 8007016:	4630      	mov	r0, r6
 8007018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701c:	f7ff ffdc 	bl	8006fd8 <__sfputc_r>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d1f3      	bne.n	800700c <__sfputs_r+0xa>
 8007024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007028 <_vfiprintf_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	460d      	mov	r5, r1
 800702e:	4614      	mov	r4, r2
 8007030:	4698      	mov	r8, r3
 8007032:	4606      	mov	r6, r0
 8007034:	b09d      	sub	sp, #116	@ 0x74
 8007036:	b118      	cbz	r0, 8007040 <_vfiprintf_r+0x18>
 8007038:	6a03      	ldr	r3, [r0, #32]
 800703a:	b90b      	cbnz	r3, 8007040 <_vfiprintf_r+0x18>
 800703c:	f7ff fc70 	bl	8006920 <__sinit>
 8007040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007042:	07d9      	lsls	r1, r3, #31
 8007044:	d405      	bmi.n	8007052 <_vfiprintf_r+0x2a>
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	059a      	lsls	r2, r3, #22
 800704a:	d402      	bmi.n	8007052 <_vfiprintf_r+0x2a>
 800704c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800704e:	f7ff febc 	bl	8006dca <__retarget_lock_acquire_recursive>
 8007052:	89ab      	ldrh	r3, [r5, #12]
 8007054:	071b      	lsls	r3, r3, #28
 8007056:	d501      	bpl.n	800705c <_vfiprintf_r+0x34>
 8007058:	692b      	ldr	r3, [r5, #16]
 800705a:	b99b      	cbnz	r3, 8007084 <_vfiprintf_r+0x5c>
 800705c:	4629      	mov	r1, r5
 800705e:	4630      	mov	r0, r6
 8007060:	f7ff fd86 	bl	8006b70 <__swsetup_r>
 8007064:	b170      	cbz	r0, 8007084 <_vfiprintf_r+0x5c>
 8007066:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007068:	07dc      	lsls	r4, r3, #31
 800706a:	d504      	bpl.n	8007076 <_vfiprintf_r+0x4e>
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	b01d      	add	sp, #116	@ 0x74
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	89ab      	ldrh	r3, [r5, #12]
 8007078:	0598      	lsls	r0, r3, #22
 800707a:	d4f7      	bmi.n	800706c <_vfiprintf_r+0x44>
 800707c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800707e:	f7ff fea5 	bl	8006dcc <__retarget_lock_release_recursive>
 8007082:	e7f3      	b.n	800706c <_vfiprintf_r+0x44>
 8007084:	2300      	movs	r3, #0
 8007086:	9309      	str	r3, [sp, #36]	@ 0x24
 8007088:	2320      	movs	r3, #32
 800708a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800708e:	2330      	movs	r3, #48	@ 0x30
 8007090:	f04f 0901 	mov.w	r9, #1
 8007094:	f8cd 800c 	str.w	r8, [sp, #12]
 8007098:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007244 <_vfiprintf_r+0x21c>
 800709c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070a0:	4623      	mov	r3, r4
 80070a2:	469a      	mov	sl, r3
 80070a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a8:	b10a      	cbz	r2, 80070ae <_vfiprintf_r+0x86>
 80070aa:	2a25      	cmp	r2, #37	@ 0x25
 80070ac:	d1f9      	bne.n	80070a2 <_vfiprintf_r+0x7a>
 80070ae:	ebba 0b04 	subs.w	fp, sl, r4
 80070b2:	d00b      	beq.n	80070cc <_vfiprintf_r+0xa4>
 80070b4:	465b      	mov	r3, fp
 80070b6:	4622      	mov	r2, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7ff ffa1 	bl	8007002 <__sfputs_r>
 80070c0:	3001      	adds	r0, #1
 80070c2:	f000 80a7 	beq.w	8007214 <_vfiprintf_r+0x1ec>
 80070c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070c8:	445a      	add	r2, fp
 80070ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80070cc:	f89a 3000 	ldrb.w	r3, [sl]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 809f 	beq.w	8007214 <_vfiprintf_r+0x1ec>
 80070d6:	2300      	movs	r3, #0
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295
 80070dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e0:	f10a 0a01 	add.w	sl, sl, #1
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80070ee:	4654      	mov	r4, sl
 80070f0:	2205      	movs	r2, #5
 80070f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f6:	4853      	ldr	r0, [pc, #332]	@ (8007244 <_vfiprintf_r+0x21c>)
 80070f8:	f000 fb7a 	bl	80077f0 <memchr>
 80070fc:	9a04      	ldr	r2, [sp, #16]
 80070fe:	b9d8      	cbnz	r0, 8007138 <_vfiprintf_r+0x110>
 8007100:	06d1      	lsls	r1, r2, #27
 8007102:	bf44      	itt	mi
 8007104:	2320      	movmi	r3, #32
 8007106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800710a:	0713      	lsls	r3, r2, #28
 800710c:	bf44      	itt	mi
 800710e:	232b      	movmi	r3, #43	@ 0x2b
 8007110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007114:	f89a 3000 	ldrb.w	r3, [sl]
 8007118:	2b2a      	cmp	r3, #42	@ 0x2a
 800711a:	d015      	beq.n	8007148 <_vfiprintf_r+0x120>
 800711c:	4654      	mov	r4, sl
 800711e:	2000      	movs	r0, #0
 8007120:	f04f 0c0a 	mov.w	ip, #10
 8007124:	9a07      	ldr	r2, [sp, #28]
 8007126:	4621      	mov	r1, r4
 8007128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712c:	3b30      	subs	r3, #48	@ 0x30
 800712e:	2b09      	cmp	r3, #9
 8007130:	d94b      	bls.n	80071ca <_vfiprintf_r+0x1a2>
 8007132:	b1b0      	cbz	r0, 8007162 <_vfiprintf_r+0x13a>
 8007134:	9207      	str	r2, [sp, #28]
 8007136:	e014      	b.n	8007162 <_vfiprintf_r+0x13a>
 8007138:	eba0 0308 	sub.w	r3, r0, r8
 800713c:	fa09 f303 	lsl.w	r3, r9, r3
 8007140:	4313      	orrs	r3, r2
 8007142:	46a2      	mov	sl, r4
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	e7d2      	b.n	80070ee <_vfiprintf_r+0xc6>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d19      	adds	r1, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9103      	str	r1, [sp, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	bfbb      	ittet	lt
 8007154:	425b      	neglt	r3, r3
 8007156:	f042 0202 	orrlt.w	r2, r2, #2
 800715a:	9307      	strge	r3, [sp, #28]
 800715c:	9307      	strlt	r3, [sp, #28]
 800715e:	bfb8      	it	lt
 8007160:	9204      	strlt	r2, [sp, #16]
 8007162:	7823      	ldrb	r3, [r4, #0]
 8007164:	2b2e      	cmp	r3, #46	@ 0x2e
 8007166:	d10a      	bne.n	800717e <_vfiprintf_r+0x156>
 8007168:	7863      	ldrb	r3, [r4, #1]
 800716a:	2b2a      	cmp	r3, #42	@ 0x2a
 800716c:	d132      	bne.n	80071d4 <_vfiprintf_r+0x1ac>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	3402      	adds	r4, #2
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9203      	str	r2, [sp, #12]
 8007178:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007248 <_vfiprintf_r+0x220>
 8007182:	2203      	movs	r2, #3
 8007184:	4650      	mov	r0, sl
 8007186:	7821      	ldrb	r1, [r4, #0]
 8007188:	f000 fb32 	bl	80077f0 <memchr>
 800718c:	b138      	cbz	r0, 800719e <_vfiprintf_r+0x176>
 800718e:	2240      	movs	r2, #64	@ 0x40
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	eba0 000a 	sub.w	r0, r0, sl
 8007196:	4082      	lsls	r2, r0
 8007198:	4313      	orrs	r3, r2
 800719a:	3401      	adds	r4, #1
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a2:	2206      	movs	r2, #6
 80071a4:	4829      	ldr	r0, [pc, #164]	@ (800724c <_vfiprintf_r+0x224>)
 80071a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071aa:	f000 fb21 	bl	80077f0 <memchr>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d03f      	beq.n	8007232 <_vfiprintf_r+0x20a>
 80071b2:	4b27      	ldr	r3, [pc, #156]	@ (8007250 <_vfiprintf_r+0x228>)
 80071b4:	bb1b      	cbnz	r3, 80071fe <_vfiprintf_r+0x1d6>
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	3307      	adds	r3, #7
 80071ba:	f023 0307 	bic.w	r3, r3, #7
 80071be:	3308      	adds	r3, #8
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c4:	443b      	add	r3, r7
 80071c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c8:	e76a      	b.n	80070a0 <_vfiprintf_r+0x78>
 80071ca:	460c      	mov	r4, r1
 80071cc:	2001      	movs	r0, #1
 80071ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d2:	e7a8      	b.n	8007126 <_vfiprintf_r+0xfe>
 80071d4:	2300      	movs	r3, #0
 80071d6:	f04f 0c0a 	mov.w	ip, #10
 80071da:	4619      	mov	r1, r3
 80071dc:	3401      	adds	r4, #1
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	4620      	mov	r0, r4
 80071e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071e6:	3a30      	subs	r2, #48	@ 0x30
 80071e8:	2a09      	cmp	r2, #9
 80071ea:	d903      	bls.n	80071f4 <_vfiprintf_r+0x1cc>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0c6      	beq.n	800717e <_vfiprintf_r+0x156>
 80071f0:	9105      	str	r1, [sp, #20]
 80071f2:	e7c4      	b.n	800717e <_vfiprintf_r+0x156>
 80071f4:	4604      	mov	r4, r0
 80071f6:	2301      	movs	r3, #1
 80071f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80071fc:	e7f0      	b.n	80071e0 <_vfiprintf_r+0x1b8>
 80071fe:	ab03      	add	r3, sp, #12
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	462a      	mov	r2, r5
 8007204:	4630      	mov	r0, r6
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <_vfiprintf_r+0x22c>)
 8007208:	a904      	add	r1, sp, #16
 800720a:	f3af 8000 	nop.w
 800720e:	4607      	mov	r7, r0
 8007210:	1c78      	adds	r0, r7, #1
 8007212:	d1d6      	bne.n	80071c2 <_vfiprintf_r+0x19a>
 8007214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007216:	07d9      	lsls	r1, r3, #31
 8007218:	d405      	bmi.n	8007226 <_vfiprintf_r+0x1fe>
 800721a:	89ab      	ldrh	r3, [r5, #12]
 800721c:	059a      	lsls	r2, r3, #22
 800721e:	d402      	bmi.n	8007226 <_vfiprintf_r+0x1fe>
 8007220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007222:	f7ff fdd3 	bl	8006dcc <__retarget_lock_release_recursive>
 8007226:	89ab      	ldrh	r3, [r5, #12]
 8007228:	065b      	lsls	r3, r3, #25
 800722a:	f53f af1f 	bmi.w	800706c <_vfiprintf_r+0x44>
 800722e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007230:	e71e      	b.n	8007070 <_vfiprintf_r+0x48>
 8007232:	ab03      	add	r3, sp, #12
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	462a      	mov	r2, r5
 8007238:	4630      	mov	r0, r6
 800723a:	4b06      	ldr	r3, [pc, #24]	@ (8007254 <_vfiprintf_r+0x22c>)
 800723c:	a904      	add	r1, sp, #16
 800723e:	f000 f87d 	bl	800733c <_printf_i>
 8007242:	e7e4      	b.n	800720e <_vfiprintf_r+0x1e6>
 8007244:	08007956 	.word	0x08007956
 8007248:	0800795c 	.word	0x0800795c
 800724c:	08007960 	.word	0x08007960
 8007250:	00000000 	.word	0x00000000
 8007254:	08007003 	.word	0x08007003

08007258 <_printf_common>:
 8007258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	4616      	mov	r6, r2
 800725e:	4698      	mov	r8, r3
 8007260:	688a      	ldr	r2, [r1, #8]
 8007262:	690b      	ldr	r3, [r1, #16]
 8007264:	4607      	mov	r7, r0
 8007266:	4293      	cmp	r3, r2
 8007268:	bfb8      	it	lt
 800726a:	4613      	movlt	r3, r2
 800726c:	6033      	str	r3, [r6, #0]
 800726e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007272:	460c      	mov	r4, r1
 8007274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007278:	b10a      	cbz	r2, 800727e <_printf_common+0x26>
 800727a:	3301      	adds	r3, #1
 800727c:	6033      	str	r3, [r6, #0]
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	0699      	lsls	r1, r3, #26
 8007282:	bf42      	ittt	mi
 8007284:	6833      	ldrmi	r3, [r6, #0]
 8007286:	3302      	addmi	r3, #2
 8007288:	6033      	strmi	r3, [r6, #0]
 800728a:	6825      	ldr	r5, [r4, #0]
 800728c:	f015 0506 	ands.w	r5, r5, #6
 8007290:	d106      	bne.n	80072a0 <_printf_common+0x48>
 8007292:	f104 0a19 	add.w	sl, r4, #25
 8007296:	68e3      	ldr	r3, [r4, #12]
 8007298:	6832      	ldr	r2, [r6, #0]
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	42ab      	cmp	r3, r5
 800729e:	dc2b      	bgt.n	80072f8 <_printf_common+0xa0>
 80072a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072a4:	6822      	ldr	r2, [r4, #0]
 80072a6:	3b00      	subs	r3, #0
 80072a8:	bf18      	it	ne
 80072aa:	2301      	movne	r3, #1
 80072ac:	0692      	lsls	r2, r2, #26
 80072ae:	d430      	bmi.n	8007312 <_printf_common+0xba>
 80072b0:	4641      	mov	r1, r8
 80072b2:	4638      	mov	r0, r7
 80072b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072b8:	47c8      	blx	r9
 80072ba:	3001      	adds	r0, #1
 80072bc:	d023      	beq.n	8007306 <_printf_common+0xae>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	f003 0306 	and.w	r3, r3, #6
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	bf14      	ite	ne
 80072ca:	2500      	movne	r5, #0
 80072cc:	6833      	ldreq	r3, [r6, #0]
 80072ce:	f04f 0600 	mov.w	r6, #0
 80072d2:	bf08      	it	eq
 80072d4:	68e5      	ldreq	r5, [r4, #12]
 80072d6:	f104 041a 	add.w	r4, r4, #26
 80072da:	bf08      	it	eq
 80072dc:	1aed      	subeq	r5, r5, r3
 80072de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80072e2:	bf08      	it	eq
 80072e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfc4      	itt	gt
 80072ec:	1a9b      	subgt	r3, r3, r2
 80072ee:	18ed      	addgt	r5, r5, r3
 80072f0:	42b5      	cmp	r5, r6
 80072f2:	d11a      	bne.n	800732a <_printf_common+0xd2>
 80072f4:	2000      	movs	r0, #0
 80072f6:	e008      	b.n	800730a <_printf_common+0xb2>
 80072f8:	2301      	movs	r3, #1
 80072fa:	4652      	mov	r2, sl
 80072fc:	4641      	mov	r1, r8
 80072fe:	4638      	mov	r0, r7
 8007300:	47c8      	blx	r9
 8007302:	3001      	adds	r0, #1
 8007304:	d103      	bne.n	800730e <_printf_common+0xb6>
 8007306:	f04f 30ff 	mov.w	r0, #4294967295
 800730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730e:	3501      	adds	r5, #1
 8007310:	e7c1      	b.n	8007296 <_printf_common+0x3e>
 8007312:	2030      	movs	r0, #48	@ 0x30
 8007314:	18e1      	adds	r1, r4, r3
 8007316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007320:	4422      	add	r2, r4
 8007322:	3302      	adds	r3, #2
 8007324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007328:	e7c2      	b.n	80072b0 <_printf_common+0x58>
 800732a:	2301      	movs	r3, #1
 800732c:	4622      	mov	r2, r4
 800732e:	4641      	mov	r1, r8
 8007330:	4638      	mov	r0, r7
 8007332:	47c8      	blx	r9
 8007334:	3001      	adds	r0, #1
 8007336:	d0e6      	beq.n	8007306 <_printf_common+0xae>
 8007338:	3601      	adds	r6, #1
 800733a:	e7d9      	b.n	80072f0 <_printf_common+0x98>

0800733c <_printf_i>:
 800733c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	7e0f      	ldrb	r7, [r1, #24]
 8007342:	4691      	mov	r9, r2
 8007344:	2f78      	cmp	r7, #120	@ 0x78
 8007346:	4680      	mov	r8, r0
 8007348:	460c      	mov	r4, r1
 800734a:	469a      	mov	sl, r3
 800734c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800734e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007352:	d807      	bhi.n	8007364 <_printf_i+0x28>
 8007354:	2f62      	cmp	r7, #98	@ 0x62
 8007356:	d80a      	bhi.n	800736e <_printf_i+0x32>
 8007358:	2f00      	cmp	r7, #0
 800735a:	f000 80d1 	beq.w	8007500 <_printf_i+0x1c4>
 800735e:	2f58      	cmp	r7, #88	@ 0x58
 8007360:	f000 80b8 	beq.w	80074d4 <_printf_i+0x198>
 8007364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800736c:	e03a      	b.n	80073e4 <_printf_i+0xa8>
 800736e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007372:	2b15      	cmp	r3, #21
 8007374:	d8f6      	bhi.n	8007364 <_printf_i+0x28>
 8007376:	a101      	add	r1, pc, #4	@ (adr r1, 800737c <_printf_i+0x40>)
 8007378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800737c:	080073d5 	.word	0x080073d5
 8007380:	080073e9 	.word	0x080073e9
 8007384:	08007365 	.word	0x08007365
 8007388:	08007365 	.word	0x08007365
 800738c:	08007365 	.word	0x08007365
 8007390:	08007365 	.word	0x08007365
 8007394:	080073e9 	.word	0x080073e9
 8007398:	08007365 	.word	0x08007365
 800739c:	08007365 	.word	0x08007365
 80073a0:	08007365 	.word	0x08007365
 80073a4:	08007365 	.word	0x08007365
 80073a8:	080074e7 	.word	0x080074e7
 80073ac:	08007413 	.word	0x08007413
 80073b0:	080074a1 	.word	0x080074a1
 80073b4:	08007365 	.word	0x08007365
 80073b8:	08007365 	.word	0x08007365
 80073bc:	08007509 	.word	0x08007509
 80073c0:	08007365 	.word	0x08007365
 80073c4:	08007413 	.word	0x08007413
 80073c8:	08007365 	.word	0x08007365
 80073cc:	08007365 	.word	0x08007365
 80073d0:	080074a9 	.word	0x080074a9
 80073d4:	6833      	ldr	r3, [r6, #0]
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6032      	str	r2, [r6, #0]
 80073dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073e4:	2301      	movs	r3, #1
 80073e6:	e09c      	b.n	8007522 <_printf_i+0x1e6>
 80073e8:	6833      	ldr	r3, [r6, #0]
 80073ea:	6820      	ldr	r0, [r4, #0]
 80073ec:	1d19      	adds	r1, r3, #4
 80073ee:	6031      	str	r1, [r6, #0]
 80073f0:	0606      	lsls	r6, r0, #24
 80073f2:	d501      	bpl.n	80073f8 <_printf_i+0xbc>
 80073f4:	681d      	ldr	r5, [r3, #0]
 80073f6:	e003      	b.n	8007400 <_printf_i+0xc4>
 80073f8:	0645      	lsls	r5, r0, #25
 80073fa:	d5fb      	bpl.n	80073f4 <_printf_i+0xb8>
 80073fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007400:	2d00      	cmp	r5, #0
 8007402:	da03      	bge.n	800740c <_printf_i+0xd0>
 8007404:	232d      	movs	r3, #45	@ 0x2d
 8007406:	426d      	negs	r5, r5
 8007408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800740c:	230a      	movs	r3, #10
 800740e:	4858      	ldr	r0, [pc, #352]	@ (8007570 <_printf_i+0x234>)
 8007410:	e011      	b.n	8007436 <_printf_i+0xfa>
 8007412:	6821      	ldr	r1, [r4, #0]
 8007414:	6833      	ldr	r3, [r6, #0]
 8007416:	0608      	lsls	r0, r1, #24
 8007418:	f853 5b04 	ldr.w	r5, [r3], #4
 800741c:	d402      	bmi.n	8007424 <_printf_i+0xe8>
 800741e:	0649      	lsls	r1, r1, #25
 8007420:	bf48      	it	mi
 8007422:	b2ad      	uxthmi	r5, r5
 8007424:	2f6f      	cmp	r7, #111	@ 0x6f
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	bf14      	ite	ne
 800742a:	230a      	movne	r3, #10
 800742c:	2308      	moveq	r3, #8
 800742e:	4850      	ldr	r0, [pc, #320]	@ (8007570 <_printf_i+0x234>)
 8007430:	2100      	movs	r1, #0
 8007432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007436:	6866      	ldr	r6, [r4, #4]
 8007438:	2e00      	cmp	r6, #0
 800743a:	60a6      	str	r6, [r4, #8]
 800743c:	db05      	blt.n	800744a <_printf_i+0x10e>
 800743e:	6821      	ldr	r1, [r4, #0]
 8007440:	432e      	orrs	r6, r5
 8007442:	f021 0104 	bic.w	r1, r1, #4
 8007446:	6021      	str	r1, [r4, #0]
 8007448:	d04b      	beq.n	80074e2 <_printf_i+0x1a6>
 800744a:	4616      	mov	r6, r2
 800744c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007450:	fb03 5711 	mls	r7, r3, r1, r5
 8007454:	5dc7      	ldrb	r7, [r0, r7]
 8007456:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800745a:	462f      	mov	r7, r5
 800745c:	42bb      	cmp	r3, r7
 800745e:	460d      	mov	r5, r1
 8007460:	d9f4      	bls.n	800744c <_printf_i+0x110>
 8007462:	2b08      	cmp	r3, #8
 8007464:	d10b      	bne.n	800747e <_printf_i+0x142>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	07df      	lsls	r7, r3, #31
 800746a:	d508      	bpl.n	800747e <_printf_i+0x142>
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	6861      	ldr	r1, [r4, #4]
 8007470:	4299      	cmp	r1, r3
 8007472:	bfde      	ittt	le
 8007474:	2330      	movle	r3, #48	@ 0x30
 8007476:	f806 3c01 	strble.w	r3, [r6, #-1]
 800747a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800747e:	1b92      	subs	r2, r2, r6
 8007480:	6122      	str	r2, [r4, #16]
 8007482:	464b      	mov	r3, r9
 8007484:	4621      	mov	r1, r4
 8007486:	4640      	mov	r0, r8
 8007488:	f8cd a000 	str.w	sl, [sp]
 800748c:	aa03      	add	r2, sp, #12
 800748e:	f7ff fee3 	bl	8007258 <_printf_common>
 8007492:	3001      	adds	r0, #1
 8007494:	d14a      	bne.n	800752c <_printf_i+0x1f0>
 8007496:	f04f 30ff 	mov.w	r0, #4294967295
 800749a:	b004      	add	sp, #16
 800749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	f043 0320 	orr.w	r3, r3, #32
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	2778      	movs	r7, #120	@ 0x78
 80074aa:	4832      	ldr	r0, [pc, #200]	@ (8007574 <_printf_i+0x238>)
 80074ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	6831      	ldr	r1, [r6, #0]
 80074b4:	061f      	lsls	r7, r3, #24
 80074b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80074ba:	d402      	bmi.n	80074c2 <_printf_i+0x186>
 80074bc:	065f      	lsls	r7, r3, #25
 80074be:	bf48      	it	mi
 80074c0:	b2ad      	uxthmi	r5, r5
 80074c2:	6031      	str	r1, [r6, #0]
 80074c4:	07d9      	lsls	r1, r3, #31
 80074c6:	bf44      	itt	mi
 80074c8:	f043 0320 	orrmi.w	r3, r3, #32
 80074cc:	6023      	strmi	r3, [r4, #0]
 80074ce:	b11d      	cbz	r5, 80074d8 <_printf_i+0x19c>
 80074d0:	2310      	movs	r3, #16
 80074d2:	e7ad      	b.n	8007430 <_printf_i+0xf4>
 80074d4:	4826      	ldr	r0, [pc, #152]	@ (8007570 <_printf_i+0x234>)
 80074d6:	e7e9      	b.n	80074ac <_printf_i+0x170>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	f023 0320 	bic.w	r3, r3, #32
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	e7f6      	b.n	80074d0 <_printf_i+0x194>
 80074e2:	4616      	mov	r6, r2
 80074e4:	e7bd      	b.n	8007462 <_printf_i+0x126>
 80074e6:	6833      	ldr	r3, [r6, #0]
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	6961      	ldr	r1, [r4, #20]
 80074ee:	6030      	str	r0, [r6, #0]
 80074f0:	062e      	lsls	r6, r5, #24
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	d501      	bpl.n	80074fa <_printf_i+0x1be>
 80074f6:	6019      	str	r1, [r3, #0]
 80074f8:	e002      	b.n	8007500 <_printf_i+0x1c4>
 80074fa:	0668      	lsls	r0, r5, #25
 80074fc:	d5fb      	bpl.n	80074f6 <_printf_i+0x1ba>
 80074fe:	8019      	strh	r1, [r3, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	4616      	mov	r6, r2
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	e7bc      	b.n	8007482 <_printf_i+0x146>
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	2100      	movs	r1, #0
 800750c:	1d1a      	adds	r2, r3, #4
 800750e:	6032      	str	r2, [r6, #0]
 8007510:	681e      	ldr	r6, [r3, #0]
 8007512:	6862      	ldr	r2, [r4, #4]
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f96b 	bl	80077f0 <memchr>
 800751a:	b108      	cbz	r0, 8007520 <_printf_i+0x1e4>
 800751c:	1b80      	subs	r0, r0, r6
 800751e:	6060      	str	r0, [r4, #4]
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	6123      	str	r3, [r4, #16]
 8007524:	2300      	movs	r3, #0
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800752a:	e7aa      	b.n	8007482 <_printf_i+0x146>
 800752c:	4632      	mov	r2, r6
 800752e:	4649      	mov	r1, r9
 8007530:	4640      	mov	r0, r8
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	47d0      	blx	sl
 8007536:	3001      	adds	r0, #1
 8007538:	d0ad      	beq.n	8007496 <_printf_i+0x15a>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	079b      	lsls	r3, r3, #30
 800753e:	d413      	bmi.n	8007568 <_printf_i+0x22c>
 8007540:	68e0      	ldr	r0, [r4, #12]
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	4298      	cmp	r0, r3
 8007546:	bfb8      	it	lt
 8007548:	4618      	movlt	r0, r3
 800754a:	e7a6      	b.n	800749a <_printf_i+0x15e>
 800754c:	2301      	movs	r3, #1
 800754e:	4632      	mov	r2, r6
 8007550:	4649      	mov	r1, r9
 8007552:	4640      	mov	r0, r8
 8007554:	47d0      	blx	sl
 8007556:	3001      	adds	r0, #1
 8007558:	d09d      	beq.n	8007496 <_printf_i+0x15a>
 800755a:	3501      	adds	r5, #1
 800755c:	68e3      	ldr	r3, [r4, #12]
 800755e:	9903      	ldr	r1, [sp, #12]
 8007560:	1a5b      	subs	r3, r3, r1
 8007562:	42ab      	cmp	r3, r5
 8007564:	dcf2      	bgt.n	800754c <_printf_i+0x210>
 8007566:	e7eb      	b.n	8007540 <_printf_i+0x204>
 8007568:	2500      	movs	r5, #0
 800756a:	f104 0619 	add.w	r6, r4, #25
 800756e:	e7f5      	b.n	800755c <_printf_i+0x220>
 8007570:	08007967 	.word	0x08007967
 8007574:	08007978 	.word	0x08007978

08007578 <__sflush_r>:
 8007578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	0716      	lsls	r6, r2, #28
 8007580:	4605      	mov	r5, r0
 8007582:	460c      	mov	r4, r1
 8007584:	d454      	bmi.n	8007630 <__sflush_r+0xb8>
 8007586:	684b      	ldr	r3, [r1, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	dc02      	bgt.n	8007592 <__sflush_r+0x1a>
 800758c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	dd48      	ble.n	8007624 <__sflush_r+0xac>
 8007592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007594:	2e00      	cmp	r6, #0
 8007596:	d045      	beq.n	8007624 <__sflush_r+0xac>
 8007598:	2300      	movs	r3, #0
 800759a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800759e:	682f      	ldr	r7, [r5, #0]
 80075a0:	6a21      	ldr	r1, [r4, #32]
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	d030      	beq.n	8007608 <__sflush_r+0x90>
 80075a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	0759      	lsls	r1, r3, #29
 80075ac:	d505      	bpl.n	80075ba <__sflush_r+0x42>
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	1ad2      	subs	r2, r2, r3
 80075b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075b4:	b10b      	cbz	r3, 80075ba <__sflush_r+0x42>
 80075b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075b8:	1ad2      	subs	r2, r2, r3
 80075ba:	2300      	movs	r3, #0
 80075bc:	4628      	mov	r0, r5
 80075be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075c0:	6a21      	ldr	r1, [r4, #32]
 80075c2:	47b0      	blx	r6
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	d106      	bne.n	80075d8 <__sflush_r+0x60>
 80075ca:	6829      	ldr	r1, [r5, #0]
 80075cc:	291d      	cmp	r1, #29
 80075ce:	d82b      	bhi.n	8007628 <__sflush_r+0xb0>
 80075d0:	4a28      	ldr	r2, [pc, #160]	@ (8007674 <__sflush_r+0xfc>)
 80075d2:	40ca      	lsrs	r2, r1
 80075d4:	07d6      	lsls	r6, r2, #31
 80075d6:	d527      	bpl.n	8007628 <__sflush_r+0xb0>
 80075d8:	2200      	movs	r2, #0
 80075da:	6062      	str	r2, [r4, #4]
 80075dc:	6922      	ldr	r2, [r4, #16]
 80075de:	04d9      	lsls	r1, r3, #19
 80075e0:	6022      	str	r2, [r4, #0]
 80075e2:	d504      	bpl.n	80075ee <__sflush_r+0x76>
 80075e4:	1c42      	adds	r2, r0, #1
 80075e6:	d101      	bne.n	80075ec <__sflush_r+0x74>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b903      	cbnz	r3, 80075ee <__sflush_r+0x76>
 80075ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80075ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075f0:	602f      	str	r7, [r5, #0]
 80075f2:	b1b9      	cbz	r1, 8007624 <__sflush_r+0xac>
 80075f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075f8:	4299      	cmp	r1, r3
 80075fa:	d002      	beq.n	8007602 <__sflush_r+0x8a>
 80075fc:	4628      	mov	r0, r5
 80075fe:	f7ff fbf5 	bl	8006dec <_free_r>
 8007602:	2300      	movs	r3, #0
 8007604:	6363      	str	r3, [r4, #52]	@ 0x34
 8007606:	e00d      	b.n	8007624 <__sflush_r+0xac>
 8007608:	2301      	movs	r3, #1
 800760a:	4628      	mov	r0, r5
 800760c:	47b0      	blx	r6
 800760e:	4602      	mov	r2, r0
 8007610:	1c50      	adds	r0, r2, #1
 8007612:	d1c9      	bne.n	80075a8 <__sflush_r+0x30>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0c6      	beq.n	80075a8 <__sflush_r+0x30>
 800761a:	2b1d      	cmp	r3, #29
 800761c:	d001      	beq.n	8007622 <__sflush_r+0xaa>
 800761e:	2b16      	cmp	r3, #22
 8007620:	d11d      	bne.n	800765e <__sflush_r+0xe6>
 8007622:	602f      	str	r7, [r5, #0]
 8007624:	2000      	movs	r0, #0
 8007626:	e021      	b.n	800766c <__sflush_r+0xf4>
 8007628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800762c:	b21b      	sxth	r3, r3
 800762e:	e01a      	b.n	8007666 <__sflush_r+0xee>
 8007630:	690f      	ldr	r7, [r1, #16]
 8007632:	2f00      	cmp	r7, #0
 8007634:	d0f6      	beq.n	8007624 <__sflush_r+0xac>
 8007636:	0793      	lsls	r3, r2, #30
 8007638:	bf18      	it	ne
 800763a:	2300      	movne	r3, #0
 800763c:	680e      	ldr	r6, [r1, #0]
 800763e:	bf08      	it	eq
 8007640:	694b      	ldreq	r3, [r1, #20]
 8007642:	1bf6      	subs	r6, r6, r7
 8007644:	600f      	str	r7, [r1, #0]
 8007646:	608b      	str	r3, [r1, #8]
 8007648:	2e00      	cmp	r6, #0
 800764a:	ddeb      	ble.n	8007624 <__sflush_r+0xac>
 800764c:	4633      	mov	r3, r6
 800764e:	463a      	mov	r2, r7
 8007650:	4628      	mov	r0, r5
 8007652:	6a21      	ldr	r1, [r4, #32]
 8007654:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007658:	47e0      	blx	ip
 800765a:	2800      	cmp	r0, #0
 800765c:	dc07      	bgt.n	800766e <__sflush_r+0xf6>
 800765e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766e:	4407      	add	r7, r0
 8007670:	1a36      	subs	r6, r6, r0
 8007672:	e7e9      	b.n	8007648 <__sflush_r+0xd0>
 8007674:	20400001 	.word	0x20400001

08007678 <_fflush_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	690b      	ldr	r3, [r1, #16]
 800767c:	4605      	mov	r5, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b913      	cbnz	r3, 8007688 <_fflush_r+0x10>
 8007682:	2500      	movs	r5, #0
 8007684:	4628      	mov	r0, r5
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	b118      	cbz	r0, 8007692 <_fflush_r+0x1a>
 800768a:	6a03      	ldr	r3, [r0, #32]
 800768c:	b90b      	cbnz	r3, 8007692 <_fflush_r+0x1a>
 800768e:	f7ff f947 	bl	8006920 <__sinit>
 8007692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0f3      	beq.n	8007682 <_fflush_r+0xa>
 800769a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800769c:	07d0      	lsls	r0, r2, #31
 800769e:	d404      	bmi.n	80076aa <_fflush_r+0x32>
 80076a0:	0599      	lsls	r1, r3, #22
 80076a2:	d402      	bmi.n	80076aa <_fflush_r+0x32>
 80076a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076a6:	f7ff fb90 	bl	8006dca <__retarget_lock_acquire_recursive>
 80076aa:	4628      	mov	r0, r5
 80076ac:	4621      	mov	r1, r4
 80076ae:	f7ff ff63 	bl	8007578 <__sflush_r>
 80076b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076b4:	4605      	mov	r5, r0
 80076b6:	07da      	lsls	r2, r3, #31
 80076b8:	d4e4      	bmi.n	8007684 <_fflush_r+0xc>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	059b      	lsls	r3, r3, #22
 80076be:	d4e1      	bmi.n	8007684 <_fflush_r+0xc>
 80076c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076c2:	f7ff fb83 	bl	8006dcc <__retarget_lock_release_recursive>
 80076c6:	e7dd      	b.n	8007684 <_fflush_r+0xc>

080076c8 <__swhatbuf_r>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	460c      	mov	r4, r1
 80076cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d0:	4615      	mov	r5, r2
 80076d2:	2900      	cmp	r1, #0
 80076d4:	461e      	mov	r6, r3
 80076d6:	b096      	sub	sp, #88	@ 0x58
 80076d8:	da0c      	bge.n	80076f4 <__swhatbuf_r+0x2c>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	2100      	movs	r1, #0
 80076de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076e2:	bf14      	ite	ne
 80076e4:	2340      	movne	r3, #64	@ 0x40
 80076e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076ea:	2000      	movs	r0, #0
 80076ec:	6031      	str	r1, [r6, #0]
 80076ee:	602b      	str	r3, [r5, #0]
 80076f0:	b016      	add	sp, #88	@ 0x58
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	466a      	mov	r2, sp
 80076f6:	f000 f849 	bl	800778c <_fstat_r>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	dbed      	blt.n	80076da <__swhatbuf_r+0x12>
 80076fe:	9901      	ldr	r1, [sp, #4]
 8007700:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007704:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007708:	4259      	negs	r1, r3
 800770a:	4159      	adcs	r1, r3
 800770c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007710:	e7eb      	b.n	80076ea <__swhatbuf_r+0x22>

08007712 <__smakebuf_r>:
 8007712:	898b      	ldrh	r3, [r1, #12]
 8007714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007716:	079d      	lsls	r5, r3, #30
 8007718:	4606      	mov	r6, r0
 800771a:	460c      	mov	r4, r1
 800771c:	d507      	bpl.n	800772e <__smakebuf_r+0x1c>
 800771e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007722:	6023      	str	r3, [r4, #0]
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	2301      	movs	r3, #1
 8007728:	6163      	str	r3, [r4, #20]
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	466a      	mov	r2, sp
 8007730:	ab01      	add	r3, sp, #4
 8007732:	f7ff ffc9 	bl	80076c8 <__swhatbuf_r>
 8007736:	9f00      	ldr	r7, [sp, #0]
 8007738:	4605      	mov	r5, r0
 800773a:	4639      	mov	r1, r7
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff fbbf 	bl	8006ec0 <_malloc_r>
 8007742:	b948      	cbnz	r0, 8007758 <__smakebuf_r+0x46>
 8007744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007748:	059a      	lsls	r2, r3, #22
 800774a:	d4ee      	bmi.n	800772a <__smakebuf_r+0x18>
 800774c:	f023 0303 	bic.w	r3, r3, #3
 8007750:	f043 0302 	orr.w	r3, r3, #2
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	e7e2      	b.n	800771e <__smakebuf_r+0xc>
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800775e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007762:	81a3      	strh	r3, [r4, #12]
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	6020      	str	r0, [r4, #0]
 8007768:	b15b      	cbz	r3, 8007782 <__smakebuf_r+0x70>
 800776a:	4630      	mov	r0, r6
 800776c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007770:	f000 f81e 	bl	80077b0 <_isatty_r>
 8007774:	b128      	cbz	r0, 8007782 <__smakebuf_r+0x70>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	431d      	orrs	r5, r3
 8007786:	81a5      	strh	r5, [r4, #12]
 8007788:	e7cf      	b.n	800772a <__smakebuf_r+0x18>
	...

0800778c <_fstat_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	2300      	movs	r3, #0
 8007790:	4d06      	ldr	r5, [pc, #24]	@ (80077ac <_fstat_r+0x20>)
 8007792:	4604      	mov	r4, r0
 8007794:	4608      	mov	r0, r1
 8007796:	4611      	mov	r1, r2
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	f7f9 f9d9 	bl	8000b50 <_fstat>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d102      	bne.n	80077a8 <_fstat_r+0x1c>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	b103      	cbz	r3, 80077a8 <_fstat_r+0x1c>
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	bd38      	pop	{r3, r4, r5, pc}
 80077aa:	bf00      	nop
 80077ac:	20001d58 	.word	0x20001d58

080077b0 <_isatty_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	2300      	movs	r3, #0
 80077b4:	4d05      	ldr	r5, [pc, #20]	@ (80077cc <_isatty_r+0x1c>)
 80077b6:	4604      	mov	r4, r0
 80077b8:	4608      	mov	r0, r1
 80077ba:	602b      	str	r3, [r5, #0]
 80077bc:	f7f9 f9d7 	bl	8000b6e <_isatty>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_isatty_r+0x1a>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_isatty_r+0x1a>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20001d58 	.word	0x20001d58

080077d0 <_sbrk_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	2300      	movs	r3, #0
 80077d4:	4d05      	ldr	r5, [pc, #20]	@ (80077ec <_sbrk_r+0x1c>)
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	f7f9 f9de 	bl	8000b9c <_sbrk>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_sbrk_r+0x1a>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_sbrk_r+0x1a>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20001d58 	.word	0x20001d58

080077f0 <memchr>:
 80077f0:	4603      	mov	r3, r0
 80077f2:	b510      	push	{r4, lr}
 80077f4:	b2c9      	uxtb	r1, r1
 80077f6:	4402      	add	r2, r0
 80077f8:	4293      	cmp	r3, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	d101      	bne.n	8007802 <memchr+0x12>
 80077fe:	2000      	movs	r0, #0
 8007800:	e003      	b.n	800780a <memchr+0x1a>
 8007802:	7804      	ldrb	r4, [r0, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	428c      	cmp	r4, r1
 8007808:	d1f6      	bne.n	80077f8 <memchr+0x8>
 800780a:	bd10      	pop	{r4, pc}

0800780c <_init>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr

08007818 <_fini>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr
